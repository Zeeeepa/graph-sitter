{
  "file_analyses": [
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/analysis/deep_analysis.py",
      "file_name": "deep_analysis.py",
      "functions": [
        {
          "name": "__init__",
          "line": 27,
          "args": [
            "self",
            "codebase"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "analyze_comprehensive_metrics",
          "line": 31,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate comprehensive codebase metrics.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_calculate_complexity_metrics",
          "line": 70,
          "args": [
            "self",
            "files",
            "functions",
            "classes"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Calculate complexity metrics.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_calculate_dependency_metrics",
          "line": 119,
          "args": [
            "self",
            "files",
            "imports"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Calculate dependency metrics.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_calculate_quality_metrics",
          "line": 159,
          "args": [
            "self",
            "files",
            "functions",
            "classes"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Calculate code quality metrics.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_calculate_distribution_metrics",
          "line": 205,
          "args": [
            "self",
            "files",
            "functions",
            "classes"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Calculate distribution metrics across the codebase.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_calculate_architectural_metrics",
          "line": 242,
          "args": [
            "self",
            "files",
            "classes",
            "functions"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Calculate architectural metrics.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_get_distribution",
          "line": 284,
          "args": [
            "self",
            "values"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get distribution of values in ranges.",
          "returns": "Dict[str, int]"
        },
        {
          "name": "analyze_hotspots",
          "line": 311,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Identify code hotspots and areas of concern.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_identify_complex_functions",
          "line": 334,
          "args": [
            "self",
            "functions"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Identify complex functions that may need refactoring.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "_identify_large_classes",
          "line": 352,
          "args": [
            "self",
            "classes"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Identify large classes that may need refactoring.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "_identify_coupled_files",
          "line": 370,
          "args": [
            "self",
            "files"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Identify highly coupled files.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "_identify_potential_issues",
          "line": 388,
          "args": [
            "self",
            "files",
            "functions",
            "classes"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Identify potential code issues.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "generate_visualization_data",
          "line": 427,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate data for codebase visualization.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_generate_hierarchy_data",
          "line": 513,
          "args": [
            "self",
            "files",
            "classes",
            "functions"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate hierarchical data for tree visualization.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_generate_chart_data",
          "line": 568,
          "args": [
            "self",
            "files",
            "functions",
            "classes"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate data for various charts.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_generate_heatmap_data",
          "line": 585,
          "args": [
            "self",
            "files",
            "functions",
            "classes"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate heatmap data for complexity visualization.",
          "returns": "List[List[int]]"
        },
        {
          "name": "_get_complexity_distribution",
          "line": 611,
          "args": [
            "self",
            "functions"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get complexity distribution for functions.",
          "returns": "List[int]"
        },
        {
          "name": "_get_file_size_distribution",
          "line": 628,
          "args": [
            "self",
            "files"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get file size distribution.",
          "returns": "List[int]"
        },
        {
          "name": "_get_class_method_distribution",
          "line": 645,
          "args": [
            "self",
            "classes"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get class method distribution.",
          "returns": "List[int]"
        }
      ],
      "classes": [
        {
          "name": "DeepCodebaseAnalyzer",
          "line": 24,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 27,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "analyze_comprehensive_metrics",
              "line": 31,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_calculate_complexity_metrics",
              "line": 70,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_calculate_dependency_metrics",
              "line": 119,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_calculate_quality_metrics",
              "line": 159,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_calculate_distribution_metrics",
              "line": 205,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_calculate_architectural_metrics",
              "line": 242,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_distribution",
              "line": 284,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "analyze_hotspots",
              "line": 311,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_identify_complex_functions",
              "line": 334,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_identify_large_classes",
              "line": 352,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_identify_coupled_files",
              "line": 370,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_identify_potential_issues",
              "line": 388,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "generate_visualization_data",
              "line": 427,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_generate_hierarchy_data",
              "line": 513,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_generate_chart_data",
              "line": 568,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_generate_heatmap_data",
              "line": 585,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_complexity_distribution",
              "line": 611,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_file_size_distribution",
              "line": 628,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_class_method_distribution",
              "line": 645,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Comprehensive deep analysis of codebases using graph-sitter."
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "sys",
          "alias": null,
          "line": 11
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 12
        },
        {
          "type": "import",
          "module": "traceback",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Set",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Tuple",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "collections",
          "name": "defaultdict",
          "alias": null,
          "line": 17
        },
        {
          "type": "from_import",
          "module": "collections",
          "name": "Counter",
          "alias": null,
          "line": 17
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 18
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nDeep Comprehensive Analysis Module for Graph-sitter\n==================================================\n\nThis module provides deep, comprehensive analysis capabilities that go beyond\nthe basic analysis functions. It includes advanced metrics, visualization data,\ndependency analysis, and comprehensive codebase insights.\n",
      "lines_of_code": 663,
      "complexity_score": 77,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/generation/code_generator.py",
      "file_name": "code_generator.py",
      "functions": [
        {
          "name": "__init__",
          "line": 19,
          "args": [
            "self",
            "codebase",
            "lsp_bridge"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "generate_code",
          "line": 23,
          "args": [
            "self",
            "prompt",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate code based on prompt and context.",
          "returns": "CodeGenerationResult"
        },
        {
          "name": "_generate_from_prompt",
          "line": 61,
          "args": [
            "self",
            "prompt",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate code from prompt with enhanced templates.",
          "returns": "str"
        },
        {
          "name": "_extract_imports",
          "line": 140,
          "args": [
            "self",
            "code"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Extract imports needed for the generated code.",
          "returns": "List[str]"
        },
        {
          "name": "generate_boilerplate",
          "line": 157,
          "args": [
            "self",
            "template",
            "context",
            "target_file"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate boilerplate code from template.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "generate_tests",
          "line": 166,
          "args": [
            "self",
            "target_function",
            "test_types"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate tests for the specified function.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "generate_documentation",
          "line": 175,
          "args": [
            "self",
            "target",
            "format"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate documentation for the specified target.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "get_status",
          "line": 184,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get status information.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "shutdown",
          "line": 188,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Shutdown code generator.",
          "returns": "None"
        }
      ],
      "classes": [
        {
          "name": "CodeGenerator",
          "line": 16,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 19,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "generate_code",
              "line": 23,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_generate_from_prompt",
              "line": 61,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_extract_imports",
              "line": 140,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "generate_boilerplate",
              "line": 157,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "generate_tests",
              "line": 166,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "generate_documentation",
              "line": 175,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_status",
              "line": 184,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "shutdown",
              "line": 188,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Provides code generation capabilities."
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "graph_sitter.shared.logging.get_logger",
          "name": "get_logger",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.codebase",
          "name": "Codebase",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "graph_sitter.extensions.lsp.serena_bridge",
          "name": "SerenaLSPBridge",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "graph_sitter.extensions.serena.serena_types",
          "name": "CodeGenerationResult",
          "alias": null,
          "line": 11
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nCode Generator\n\nProvides intelligent code generation from templates and context.\n",
      "lines_of_code": 190,
      "complexity_score": 38,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/enhanced/codebase.py",
      "file_name": "codebase.py",
      "functions": [
        {
          "name": "_verify_lsp_methods",
          "line": 137,
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": "Verify that all LSP methods are available on the Codebase class.",
          "returns": null
        },
        {
          "name": "__init__",
          "line": 54,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Initialize enhanced codebase with LSP integration.",
          "returns": null
        }
      ],
      "classes": [
        {
          "name": "Codebase",
          "line": 19,
          "bases": [
            "LSPMethodsMixin",
            "BaseCodebase"
          ],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 54,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Enhanced Codebase class with full LSP error retrieval and code intelligence.\n\nThis class provides all the standard Codebase functionality plus:\n- Complete LSP error retrieval API\n- Real-time error monitoring\n- Code intelligence features (completions, hover, definitions, etc.)\n- Code actions and refactoring capabilities\n- Semantic analysis and symbol navigation\n- Health monitoring and diagnostics\n\nExample:\n    >>> from graph_sitter.enhanced import Codebase\n    >>> codebase = Codebase(\"./my-project\")\n    >>> \n    >>> # Get all errors\n    >>> errors = codebase.errors()\n    >>> print(f\"Found {len(errors.errors)} errors\")\n    >>> \n    >>> # Get error context\n    >>> if errors.errors:\n    ...     context = codebase.full_error_context(errors.errors[0].id)\n    ...     print(f\"Error: {context.error.message}\")\n    >>> \n    >>> # Monitor errors in real-time\n    >>> def on_error_change(error_collection):\n    ...     print(f\"Errors updated: {len(error_collection.errors)}\")\n    >>> codebase.watch_errors(on_error_change)\n    >>> \n    >>> # Get health check\n    >>> health = codebase.health_check()\n    >>> print(f\"Codebase health score: {health.overall_score:.2f}\")"
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "graph_sitter.core.codebase",
          "name": "Codebase",
          "alias": "BaseCodebase",
          "line": 10
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_methods",
          "name": "LSPMethodsMixin",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "ErrorInfo",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "ErrorCollection",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "ErrorSummary",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "ErrorContext",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "QuickFix",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "CompletionItem",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "HoverInfo",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "SignatureHelp",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "SymbolInfo",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "LSPCapabilities",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "LSPStatus",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "HealthCheck",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "ErrorSeverity",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "ErrorType",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "Position",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "Range",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "graph_sitter.extensions.serena.auto_init",
          "name": "ensure_serena_initialized",
          "alias": null,
          "line": 65
        },
        {
          "type": "from_import",
          "module": "graph_sitter.shared.logging.get_logger",
          "name": "get_logger",
          "alias": null,
          "line": 59
        },
        {
          "type": "from_import",
          "module": "graph_sitter.extensions.serena",
          "name": "SerenaCore",
          "alias": null,
          "line": 69
        },
        {
          "type": "from_import",
          "module": "graph_sitter.extensions.serena",
          "name": "SerenaConfig",
          "alias": null,
          "line": 69
        },
        {
          "type": "from_import",
          "module": "graph_sitter.extensions.serena",
          "name": "SerenaCapability",
          "alias": null,
          "line": 69
        },
        {
          "type": "from_import",
          "module": "graph_sitter.extensions.serena",
          "name": "RefactoringType",
          "alias": null,
          "line": 69
        },
        {
          "type": "from_import",
          "module": "graph_sitter.extensions.serena",
          "name": "RefactoringResult",
          "alias": null,
          "line": 69
        },
        {
          "type": "from_import",
          "module": "graph_sitter.extensions.serena",
          "name": "CodeGenerationResult",
          "alias": null,
          "line": 69
        },
        {
          "type": "from_import",
          "module": "graph_sitter.extensions.serena",
          "name": "SemanticSearchResult",
          "alias": null,
          "line": 69
        },
        {
          "type": "from_import",
          "module": "graph_sitter.shared.logging.get_logger",
          "name": "get_logger",
          "alias": null,
          "line": 90
        },
        {
          "type": "from_import",
          "module": "graph_sitter.shared.logging.get_logger",
          "name": "get_logger",
          "alias": null,
          "line": 145
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nGraph-Sitter Enhanced Codebase Module\n\nThis module provides the main Codebase class with full LSP and Serena integration.\nWhen importing from this module, all LSP error retrieval and code intelligence\nfeatures are automatically available directly on the codebase object.\n",
      "lines_of_code": 152,
      "complexity_score": 37,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/core/diagnostics.py",
      "file_name": "diagnostics.py",
      "functions": [
        {
          "name": "add_diagnostic_capabilities",
          "line": 139,
          "args": [
            "codebase",
            "enable_lsp"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Add diagnostic capabilities to a Codebase instance.\n\nThis function extends the codebase with LSP-based error detection and\ndiagnostic capabilities that stay synchronized with file changes.\n\nArgs:\n    codebase: The Codebase instance to extend\n    enable_lsp: Whether to enable LSP integration (default: True)",
          "returns": "None"
        },
        {
          "name": "_patch_codebase_init",
          "line": 221,
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": "Monkey patch Codebase.__init__ to automatically add diagnostics.",
          "returns": null
        },
        {
          "name": "__init__",
          "line": 38,
          "args": [
            "self",
            "codebase",
            "enable_lsp"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "_initialize_lsp",
          "line": 46,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Initialize LSP integration.",
          "returns": "None"
        },
        {
          "name": "errors",
          "line": 74,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Get all errors in the codebase.",
          "returns": "List[ErrorInfo]"
        },
        {
          "name": "warnings",
          "line": 81,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Get all warnings in the codebase.",
          "returns": "List[ErrorInfo]"
        },
        {
          "name": "hints",
          "line": 88,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Get all hints in the codebase.",
          "returns": "List[ErrorInfo]"
        },
        {
          "name": "diagnostics",
          "line": 95,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Get all diagnostics (errors, warnings, hints) in the codebase.",
          "returns": "List[ErrorInfo]"
        },
        {
          "name": "get_file_errors",
          "line": 101,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get errors for a specific file.",
          "returns": "List[ErrorInfo]"
        },
        {
          "name": "get_file_diagnostics",
          "line": 107,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get all diagnostics for a specific file.",
          "returns": "List[ErrorInfo]"
        },
        {
          "name": "refresh_diagnostics",
          "line": 113,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Force refresh of diagnostic information.",
          "returns": "None"
        },
        {
          "name": "is_lsp_enabled",
          "line": 119,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check if LSP integration is enabled and working.",
          "returns": "bool"
        },
        {
          "name": "get_lsp_status",
          "line": 123,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get status information about the LSP integration.",
          "returns": "dict"
        },
        {
          "name": "shutdown",
          "line": 132,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Shutdown diagnostic services.",
          "returns": "None"
        },
        {
          "name": "_get_errors",
          "line": 159,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "_get_warnings",
          "line": 162,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "_get_hints",
          "line": 165,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "_get_diagnostics",
          "line": 168,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "_get_file_errors",
          "line": 171,
          "args": [
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "_get_file_diagnostics",
          "line": 174,
          "args": [
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "_refresh_diagnostics",
          "line": 177,
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "_is_lsp_enabled",
          "line": 180,
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "_get_lsp_status",
          "line": 183,
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "enhanced_shutdown",
          "line": 210,
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "enhanced_init",
          "line": 232,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "__init__",
          "line": 28,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "__init__",
          "line": 31,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "enhanced_apply_diffs",
          "line": 54,
          "args": [
            "diffs"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        }
      ],
      "classes": [
        {
          "name": "CodebaseDiagnostics",
          "line": 35,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 38,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_initialize_lsp",
              "line": 46,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "errors",
              "line": 74,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "warnings",
              "line": 81,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "hints",
              "line": 88,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "diagnostics",
              "line": 95,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_file_errors",
              "line": 101,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_file_diagnostics",
              "line": 107,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "refresh_diagnostics",
              "line": 113,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "is_lsp_enabled",
              "line": 119,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_lsp_status",
              "line": 123,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "shutdown",
              "line": 132,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Diagnostic capabilities for Codebase instances."
        },
        {
          "name": "ErrorInfo",
          "line": 27,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 28,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": null
        },
        {
          "name": "TransactionAwareLSPManager",
          "line": 30,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 31,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": null
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "TYPE_CHECKING",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "graph_sitter.shared.logging.get_logger",
          "name": "get_logger",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.codebase",
          "name": "Codebase",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "graph_sitter.extensions.lsp.transaction_manager",
          "name": "get_lsp_manager",
          "alias": null,
          "line": 20
        },
        {
          "type": "from_import",
          "module": "graph_sitter.extensions.lsp.transaction_manager",
          "name": "TransactionAwareLSPManager",
          "alias": null,
          "line": 20
        },
        {
          "type": "from_import",
          "module": "graph_sitter.extensions.lsp.serena_bridge",
          "name": "ErrorInfo",
          "alias": null,
          "line": 21
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.codebase",
          "name": "Codebase",
          "alias": null,
          "line": 224
        }
      ],
      "constants": [
        {
          "name": "LSP_AVAILABLE",
          "line": 22,
          "value": "True"
        },
        {
          "name": "LSP_AVAILABLE",
          "line": 25,
          "value": "False"
        }
      ],
      "decorators": [
        "property"
      ],
      "docstring": "\nDiagnostic Extensions for Codebase\n\nThis module provides diagnostic capabilities for the Codebase class,\nintegrating Serena's LSP for real-time error detection and semantic analysis.\n",
      "lines_of_code": 255,
      "complexity_score": 89,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/ai/codebase_ai.py",
      "file_name": "codebase_ai.py",
      "functions": [
        {
          "name": "generate_system_prompt",
          "line": 5,
          "args": [
            "target",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "str"
        },
        {
          "name": "generate_flag_system_prompt",
          "line": 106,
          "args": [
            "target",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "str"
        },
        {
          "name": "generate_context",
          "line": 140,
          "args": [
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "str"
        },
        {
          "name": "generate_tools",
          "line": 167,
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "list"
        },
        {
          "name": "generate_flag_tools",
          "line": 189,
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "list"
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "graph_sitter.core.file",
          "name": "File",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.interfaces.editable",
          "name": "Editable",
          "alias": null,
          "line": 2
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": null,
      "lines_of_code": 208,
      "complexity_score": 12,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/codebase/codebase_analysis.py",
      "file_name": "codebase_analysis.py",
      "functions": [
        {
          "name": "get_codebase_summary",
          "line": 11,
          "args": [
            "codebase"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "str"
        },
        {
          "name": "get_file_summary",
          "line": 31,
          "args": [
            "file"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "str"
        },
        {
          "name": "get_class_summary",
          "line": 50,
          "args": [
            "cls"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "str"
        },
        {
          "name": "get_function_summary",
          "line": 62,
          "args": [
            "func"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "str"
        },
        {
          "name": "get_symbol_summary",
          "line": 75,
          "args": [
            "symbol"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "str"
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "graph_sitter.core.class_definition",
          "name": "Class",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.codebase",
          "name": "Codebase",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.external_module",
          "name": "ExternalModule",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.file",
          "name": "SourceFile",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.function",
          "name": "Function",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.import_resolution",
          "name": "Import",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.symbol",
          "name": "Symbol",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "graph_sitter.enums",
          "name": "EdgeType",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "graph_sitter.enums",
          "name": "SymbolType",
          "alias": null,
          "line": 8
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": null,
      "lines_of_code": 92,
      "complexity_score": 19,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/codebase/__init__.py",
      "file_name": "__init__.py",
      "functions": [],
      "classes": [],
      "imports": [],
      "constants": [],
      "decorators": [],
      "docstring": null,
      "lines_of_code": 0,
      "complexity_score": 0,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/lsp/transaction_manager.py",
      "file_name": "transaction_manager.py",
      "functions": [
        {
          "name": "get_lsp_manager",
          "line": 257,
          "args": [
            "repo_path",
            "enable_lsp"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get or create an LSP manager for a repository.\n\nThis function maintains a registry of LSP managers to avoid creating\nmultiple managers for the same repository.",
          "returns": "TransactionAwareLSPManager"
        },
        {
          "name": "shutdown_all_lsp_managers",
          "line": 281,
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": "Shutdown all active LSP managers.",
          "returns": "None"
        },
        {
          "name": "__init__",
          "line": 30,
          "args": [
            "self",
            "repo_path",
            "enable_lsp"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "_initialize_bridge",
          "line": 44,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Initialize the Serena LSP bridge.",
          "returns": "None"
        },
        {
          "name": "_refresh_diagnostics_async",
          "line": 58,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Refresh diagnostics in background thread.",
          "returns": "None"
        },
        {
          "name": "_should_refresh",
          "line": 83,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check if diagnostics should be refreshed.",
          "returns": "bool"
        },
        {
          "name": "errors",
          "line": 88,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Get all errors in the codebase.",
          "returns": "List[ErrorInfo]"
        },
        {
          "name": "warnings",
          "line": 100,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Get all warnings in the codebase.",
          "returns": "List[ErrorInfo]"
        },
        {
          "name": "hints",
          "line": 112,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Get all hints in the codebase.",
          "returns": "List[ErrorInfo]"
        },
        {
          "name": "diagnostics",
          "line": 124,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Get all diagnostics (errors, warnings, hints) in the codebase.",
          "returns": "List[ErrorInfo]"
        },
        {
          "name": "get_file_errors",
          "line": 135,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get errors for a specific file.",
          "returns": "List[ErrorInfo]"
        },
        {
          "name": "get_file_diagnostics",
          "line": 143,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get all diagnostics for a specific file.",
          "returns": "List[ErrorInfo]"
        },
        {
          "name": "apply_diffs",
          "line": 171,
          "args": [
            "self",
            "diffs"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Handle file changes from graph-sitter's diff system.\nThis method is called when files are modified through graph-sitter.",
          "returns": "None"
        },
        {
          "name": "refresh_diagnostics",
          "line": 205,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Force refresh of diagnostic information.",
          "returns": "None"
        },
        {
          "name": "get_lsp_status",
          "line": 222,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get status information about the LSP integration.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "shutdown",
          "line": 240,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Shutdown the LSP manager and clean up resources.",
          "returns": "None"
        },
        {
          "name": "refresh_worker",
          "line": 60,
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        }
      ],
      "classes": [
        {
          "name": "TransactionAwareLSPManager",
          "line": 24,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 30,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_initialize_bridge",
              "line": 44,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_refresh_diagnostics_async",
              "line": 58,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_should_refresh",
              "line": 83,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "errors",
              "line": 88,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "warnings",
              "line": 100,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "hints",
              "line": 112,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "diagnostics",
              "line": 124,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_file_errors",
              "line": 135,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_file_diagnostics",
              "line": 143,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "apply_diffs",
              "line": 171,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "refresh_diagnostics",
              "line": 205,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_lsp_status",
              "line": 222,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "shutdown",
              "line": 240,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "LSP manager that integrates with graph-sitter's transaction system\nto provide real-time diagnostic updates."
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "threading",
          "alias": null,
          "line": 8
        },
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Set",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "weakref",
          "name": "WeakKeyDictionary",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "graph_sitter.shared.logging.get_logger",
          "name": "get_logger",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "serena_bridge",
          "name": "SerenaLSPBridge",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "serena_bridge",
          "name": "ErrorInfo",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "serena_bridge",
          "name": "DiagnosticSeverity",
          "alias": null,
          "line": 15
        }
      ],
      "constants": [],
      "decorators": [
        "property"
      ],
      "docstring": "\nTransaction-Aware LSP Manager\n\nThis module provides transaction-aware LSP integration that stays synchronized\nwith graph-sitter's file change tracking and transaction system.\n",
      "lines_of_code": 292,
      "complexity_score": 64,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/lsp/serena_bridge.py",
      "file_name": "serena_bridge.py",
      "functions": [
        {
          "name": "is_error",
          "line": 43,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Check if this is an error (not warning or hint).",
          "returns": "bool"
        },
        {
          "name": "is_warning",
          "line": 48,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Check if this is a warning.",
          "returns": "bool"
        },
        {
          "name": "is_hint",
          "line": 53,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Check if this is a hint.",
          "returns": "bool"
        },
        {
          "name": "__str__",
          "line": 57,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "str"
        },
        {
          "name": "__init__",
          "line": 71,
          "args": [
            "self",
            "repo_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "_initialize_language_servers",
          "line": 80,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Initialize language servers for detected languages.",
          "returns": "None"
        },
        {
          "name": "_has_python_files",
          "line": 95,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check if repository contains Python files.",
          "returns": "bool"
        },
        {
          "name": "_initialize_python_server",
          "line": 102,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Initialize Python language server.",
          "returns": "None"
        },
        {
          "name": "get_diagnostics",
          "line": 115,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get all diagnostics from all language servers.",
          "returns": "List[ErrorInfo]"
        },
        {
          "name": "get_file_diagnostics",
          "line": 142,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get diagnostics for a specific file.",
          "returns": "List[ErrorInfo]"
        },
        {
          "name": "get_all_diagnostics",
          "line": 167,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get all diagnostics from all language servers.\n\nThis method is required by the unified LSP manager and provides\ncomprehensive diagnostic information from all active language servers.\n\nReturns:\n    List[ErrorInfo]: All diagnostics from all language servers",
          "returns": "List[ErrorInfo]"
        },
        {
          "name": "_convert_diagnostic_to_error_info",
          "line": 212,
          "args": [
            "self",
            "diagnostic",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Convert a protocol diagnostic to ErrorInfo.",
          "returns": "Optional[ErrorInfo]"
        },
        {
          "name": "refresh_diagnostics",
          "line": 260,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Force refresh of diagnostic information.",
          "returns": "None"
        },
        {
          "name": "shutdown",
          "line": 274,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Shutdown all language servers.",
          "returns": "None"
        },
        {
          "name": "get_completions",
          "line": 288,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get code completions at the specified position.",
          "returns": "List[Any]"
        },
        {
          "name": "get_hover_info",
          "line": 300,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get hover information at the specified position.",
          "returns": "Optional[Any]"
        },
        {
          "name": "get_signature_help",
          "line": 312,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get signature help at the specified position.",
          "returns": "Optional[Any]"
        },
        {
          "name": "initialize_language_servers",
          "line": 324,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Initialize all language servers.",
          "returns": "None"
        },
        {
          "name": "get_status",
          "line": 331,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get status information about the LSP bridge.",
          "returns": "Dict[str, Any]"
        }
      ],
      "classes": [
        {
          "name": "ErrorInfo",
          "line": 30,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "is_error",
              "line": 43,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "is_warning",
              "line": 48,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "is_hint",
              "line": 53,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "__str__",
              "line": 57,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Standardized error information for graph-sitter."
        },
        {
          "name": "SerenaLSPBridge",
          "line": 68,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 71,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_initialize_language_servers",
              "line": 80,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_has_python_files",
              "line": 95,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_initialize_python_server",
              "line": 102,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_diagnostics",
              "line": 115,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_file_diagnostics",
              "line": 142,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_all_diagnostics",
              "line": 167,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_convert_diagnostic_to_error_info",
              "line": 212,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "refresh_diagnostics",
              "line": 260,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "shutdown",
              "line": 274,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_completions",
              "line": 288,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_hover_info",
              "line": 300,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_signature_help",
              "line": 312,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "initialize_language_servers",
              "line": 324,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_status",
              "line": 331,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Bridge between Serena's LSP implementation and graph-sitter."
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "os",
          "alias": null,
          "line": 8
        },
        {
          "type": "import",
          "module": "sys",
          "alias": null,
          "line": 9
        },
        {
          "type": "import",
          "module": "threading",
          "alias": null,
          "line": 10
        },
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Union",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "enum",
          "name": "IntEnum",
          "alias": null,
          "line": 15
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 17
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "DiagnosticSeverity",
          "alias": null,
          "line": 19
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Diagnostic",
          "alias": null,
          "line": 19
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Position",
          "alias": null,
          "line": 19
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Range",
          "alias": null,
          "line": 19
        },
        {
          "type": "from_import",
          "module": "language_servers.base",
          "name": "BaseLanguageServer",
          "alias": null,
          "line": 20
        },
        {
          "type": "from_import",
          "module": "language_servers.python_server",
          "name": "PythonLanguageServer",
          "alias": null,
          "line": 21
        }
      ],
      "constants": [],
      "decorators": [
        "property"
      ],
      "docstring": "\nSerena LSP Bridge for Graph-Sitter\n\nThis module provides a bridge between Serena's solidlsp implementation\nand graph-sitter's codebase analysis system.\n",
      "lines_of_code": 342,
      "complexity_score": 82,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/lsp/protocol/lsp_types.py",
      "file_name": "lsp_types.py",
      "functions": [
        {
          "name": "position_from_line_char",
          "line": 169,
          "args": [
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Create a Position from line and character numbers.",
          "returns": "Position"
        },
        {
          "name": "range_from_positions",
          "line": 174,
          "args": [
            "start_line",
            "start_char",
            "end_line",
            "end_char"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Create a Range from start and end positions.",
          "returns": "Range"
        },
        {
          "name": "diagnostic_from_error",
          "line": 183,
          "args": [
            "file_path",
            "line",
            "character",
            "message",
            "severity",
            "source"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Create a Diagnostic from error information.",
          "returns": "Diagnostic"
        },
        {
          "name": "__str__",
          "line": 56,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "str"
        },
        {
          "name": "__str__",
          "line": 66,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "str"
        },
        {
          "name": "__str__",
          "line": 76,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "str"
        },
        {
          "name": "__str__",
          "line": 90,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "str"
        }
      ],
      "classes": [
        {
          "name": "DiagnosticSeverity",
          "line": 13,
          "bases": [
            "IntEnum"
          ],
          "decorators": [],
          "methods": [],
          "docstring": "Diagnostic severity levels as defined by LSP."
        },
        {
          "name": "CompletionItemKind",
          "line": 21,
          "bases": [
            "IntEnum"
          ],
          "decorators": [],
          "methods": [],
          "docstring": "Completion item kinds as defined by LSP."
        },
        {
          "name": "Position",
          "line": 51,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "__str__",
              "line": 56,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Represents a position in a text document."
        },
        {
          "name": "Range",
          "line": 61,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "__str__",
              "line": 66,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Represents a range in a text document."
        },
        {
          "name": "Location",
          "line": 71,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "__str__",
              "line": 76,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Represents a location in a text document."
        },
        {
          "name": "Diagnostic",
          "line": 81,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "__str__",
              "line": 90,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Represents a diagnostic message."
        },
        {
          "name": "TextEdit",
          "line": 102,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Represents a text edit operation."
        },
        {
          "name": "WorkspaceEdit",
          "line": 109,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Represents a workspace edit operation."
        },
        {
          "name": "CompletionItem",
          "line": 116,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Represents a completion item."
        },
        {
          "name": "ParameterInformation",
          "line": 131,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Represents parameter information in a signature."
        },
        {
          "name": "SignatureInformation",
          "line": 138,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Represents signature information."
        },
        {
          "name": "SignatureHelp",
          "line": 146,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Represents signature help information."
        },
        {
          "name": "MarkupContent",
          "line": 154,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Represents markup content."
        },
        {
          "name": "Hover",
          "line": 161,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Represents hover information."
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "enum",
          "name": "IntEnum",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Union",
          "alias": null,
          "line": 10
        }
      ],
      "constants": [
        {
          "name": "ERROR",
          "line": 15,
          "value": "1"
        },
        {
          "name": "WARNING",
          "line": 16,
          "value": "2"
        },
        {
          "name": "INFORMATION",
          "line": 17,
          "value": "3"
        },
        {
          "name": "HINT",
          "line": 18,
          "value": "4"
        },
        {
          "name": "TEXT",
          "line": 23,
          "value": "1"
        },
        {
          "name": "METHOD",
          "line": 24,
          "value": "2"
        },
        {
          "name": "FUNCTION",
          "line": 25,
          "value": "3"
        },
        {
          "name": "CONSTRUCTOR",
          "line": 26,
          "value": "4"
        },
        {
          "name": "FIELD",
          "line": 27,
          "value": "5"
        },
        {
          "name": "VARIABLE",
          "line": 28,
          "value": "6"
        },
        {
          "name": "CLASS",
          "line": 29,
          "value": "7"
        },
        {
          "name": "INTERFACE",
          "line": 30,
          "value": "8"
        },
        {
          "name": "MODULE",
          "line": 31,
          "value": "9"
        },
        {
          "name": "PROPERTY",
          "line": 32,
          "value": "10"
        },
        {
          "name": "UNIT",
          "line": 33,
          "value": "11"
        },
        {
          "name": "VALUE",
          "line": 34,
          "value": "12"
        },
        {
          "name": "ENUM",
          "line": 35,
          "value": "13"
        },
        {
          "name": "KEYWORD",
          "line": 36,
          "value": "14"
        },
        {
          "name": "SNIPPET",
          "line": 37,
          "value": "15"
        },
        {
          "name": "COLOR",
          "line": 38,
          "value": "16"
        },
        {
          "name": "FILE",
          "line": 39,
          "value": "17"
        },
        {
          "name": "REFERENCE",
          "line": 40,
          "value": "18"
        },
        {
          "name": "FOLDER",
          "line": 41,
          "value": "19"
        },
        {
          "name": "ENUM_MEMBER",
          "line": 42,
          "value": "20"
        },
        {
          "name": "CONSTANT",
          "line": 43,
          "value": "21"
        },
        {
          "name": "STRUCT",
          "line": 44,
          "value": "22"
        },
        {
          "name": "EVENT",
          "line": 45,
          "value": "23"
        },
        {
          "name": "OPERATOR",
          "line": 46,
          "value": "24"
        },
        {
          "name": "TYPE_PARAMETER",
          "line": 47,
          "value": "25"
        }
      ],
      "decorators": [],
      "docstring": "\nLSP Protocol Types\n\nThis module defines the core LSP types used throughout the Serena integration.\nBased on the Language Server Protocol specification.\n",
      "lines_of_code": 196,
      "complexity_score": 67,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/lsp/protocol/lsp_constants.py",
      "file_name": "lsp_constants.py",
      "functions": [],
      "classes": [
        {
          "name": "LSPConstants",
          "line": 8,
          "bases": [],
          "decorators": [],
          "methods": [],
          "docstring": "Constants used in LSP communication."
        }
      ],
      "imports": [],
      "constants": [
        {
          "name": "INITIALIZE",
          "line": 12,
          "value": "'initialize'"
        },
        {
          "name": "INITIALIZED",
          "line": 13,
          "value": "'initialized'"
        },
        {
          "name": "SHUTDOWN",
          "line": 14,
          "value": "'shutdown'"
        },
        {
          "name": "EXIT",
          "line": 15,
          "value": "'exit'"
        },
        {
          "name": "TEXT_DOCUMENT_DID_OPEN",
          "line": 18,
          "value": "'textDocument/didOpen'"
        },
        {
          "name": "TEXT_DOCUMENT_DID_CHANGE",
          "line": 19,
          "value": "'textDocument/didChange'"
        },
        {
          "name": "TEXT_DOCUMENT_DID_CLOSE",
          "line": 20,
          "value": "'textDocument/didClose'"
        },
        {
          "name": "TEXT_DOCUMENT_DID_SAVE",
          "line": 21,
          "value": "'textDocument/didSave'"
        },
        {
          "name": "TEXT_DOCUMENT_PUBLISH_DIAGNOSTICS",
          "line": 22,
          "value": "'textDocument/publishDiagnostics'"
        },
        {
          "name": "TEXT_DOCUMENT_DIAGNOSTIC",
          "line": 23,
          "value": "'textDocument/diagnostic'"
        },
        {
          "name": "WORKSPACE_DID_CHANGE_CONFIGURATION",
          "line": 26,
          "value": "'workspace/didChangeConfiguration'"
        },
        {
          "name": "WORKSPACE_DID_CHANGE_WATCHED_FILES",
          "line": 27,
          "value": "'workspace/didChangeWatchedFiles'"
        },
        {
          "name": "WORKSPACE_DIAGNOSTIC",
          "line": 28,
          "value": "'workspace/diagnostic'"
        },
        {
          "name": "WINDOW_SHOW_MESSAGE",
          "line": 31,
          "value": "'window/showMessage'"
        },
        {
          "name": "WINDOW_LOG_MESSAGE",
          "line": 32,
          "value": "'window/logMessage'"
        },
        {
          "name": "PARSE_ERROR",
          "line": 35,
          "value": "-32700"
        },
        {
          "name": "INVALID_REQUEST",
          "line": 36,
          "value": "-32600"
        },
        {
          "name": "METHOD_NOT_FOUND",
          "line": 37,
          "value": "-32601"
        },
        {
          "name": "INVALID_PARAMS",
          "line": 38,
          "value": "-32602"
        },
        {
          "name": "INTERNAL_ERROR",
          "line": 39,
          "value": "-32603"
        },
        {
          "name": "SERVER_ERROR_START",
          "line": 42,
          "value": "-32099"
        },
        {
          "name": "SERVER_ERROR_END",
          "line": 43,
          "value": "-32000"
        },
        {
          "name": "SERVER_NOT_INITIALIZED",
          "line": 44,
          "value": "-32002"
        },
        {
          "name": "UNKNOWN_ERROR_CODE",
          "line": 45,
          "value": "-32001"
        },
        {
          "name": "REQUEST_FAILED",
          "line": 48,
          "value": "-32803"
        },
        {
          "name": "SERVER_CANCELLED",
          "line": 49,
          "value": "-32802"
        },
        {
          "name": "CONTENT_MODIFIED",
          "line": 50,
          "value": "-32801"
        },
        {
          "name": "REQUEST_CANCELLED",
          "line": 51,
          "value": "-32800"
        },
        {
          "name": "DIAGNOSTIC_SEVERITY_ERROR",
          "line": 54,
          "value": "1"
        },
        {
          "name": "DIAGNOSTIC_SEVERITY_WARNING",
          "line": 55,
          "value": "2"
        },
        {
          "name": "DIAGNOSTIC_SEVERITY_INFORMATION",
          "line": 56,
          "value": "3"
        },
        {
          "name": "DIAGNOSTIC_SEVERITY_HINT",
          "line": 57,
          "value": "4"
        },
        {
          "name": "TEXT_DOCUMENT_SYNC_NONE",
          "line": 60,
          "value": "0"
        },
        {
          "name": "TEXT_DOCUMENT_SYNC_FULL",
          "line": 61,
          "value": "1"
        },
        {
          "name": "TEXT_DOCUMENT_SYNC_INCREMENTAL",
          "line": 62,
          "value": "2"
        },
        {
          "name": "FILE_CHANGE_TYPE_CREATED",
          "line": 65,
          "value": "1"
        },
        {
          "name": "FILE_CHANGE_TYPE_CHANGED",
          "line": 66,
          "value": "2"
        },
        {
          "name": "FILE_CHANGE_TYPE_DELETED",
          "line": 67,
          "value": "3"
        }
      ],
      "decorators": [],
      "docstring": "\nLSP Protocol Constants\n\nAdapted from Serena's solidlsp implementation.\n",
      "lines_of_code": 68,
      "complexity_score": 3,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/lsp/language_servers/python_server.py",
      "file_name": "python_server.py",
      "functions": [
        {
          "name": "__init__",
          "line": 25,
          "args": [
            "self",
            "workspace_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "get_server_command",
          "line": 29,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get the command to start the Python language server.",
          "returns": "List[str]"
        },
        {
          "name": "supports_file",
          "line": 46,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check if this server supports the given file.",
          "returns": "bool"
        },
        {
          "name": "_get_mock_completions",
          "line": 50,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Enhanced Python-specific mock completions.",
          "returns": "List[CompletionItem]"
        },
        {
          "name": "_get_mock_hover",
          "line": 222,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Enhanced Python-specific mock hover.",
          "returns": "Optional[Hover]"
        },
        {
          "name": "_get_mock_signature_help",
          "line": 264,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Enhanced Python-specific mock signature help.",
          "returns": "Optional[SignatureHelp]"
        },
        {
          "name": "_update_diagnostics_cache",
          "line": 332,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Update diagnostics cache with Python-specific diagnostics.",
          "returns": "None"
        },
        {
          "name": "_check_python_syntax",
          "line": 347,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Basic Python syntax checking.",
          "returns": "List[Diagnostic]"
        },
        {
          "name": "get_status",
          "line": 379,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get Python language server status.",
          "returns": "Dict[str, Any]"
        }
      ],
      "classes": [
        {
          "name": "PythonLanguageServer",
          "line": 22,
          "bases": [
            "BaseLanguageServer"
          ],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 25,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_server_command",
              "line": 29,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "supports_file",
              "line": 46,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_mock_completions",
              "line": 50,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_mock_hover",
              "line": 222,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_mock_signature_help",
              "line": 264,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_update_diagnostics_cache",
              "line": 332,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_check_python_syntax",
              "line": 347,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_status",
              "line": 379,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Python language server implementation using pylsp."
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "os",
          "alias": null,
          "line": 7
        },
        {
          "type": "import",
          "module": "shutil",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "graph_sitter.shared.logging.get_logger",
          "name": "get_logger",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "base",
          "name": "BaseLanguageServer",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Diagnostic",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "CompletionItem",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "CompletionItemKind",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Hover",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "SignatureHelp",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Position",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Range",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "DiagnosticSeverity",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "MarkupContent",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "SignatureHelp",
          "alias": null,
          "line": 266
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "SignatureInformation",
          "alias": null,
          "line": 266
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "ParameterInformation",
          "alias": null,
          "line": 266
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nPython Language Server implementation.\n\nThis module provides LSP integration for Python using pylsp (Python LSP Server).\n",
      "lines_of_code": 388,
      "complexity_score": 51,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/lsp/language_servers/base.py",
      "file_name": "base.py",
      "functions": [
        {
          "name": "__init__",
          "line": 27,
          "args": [
            "self",
            "workspace_path",
            "language"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "get_server_command",
          "line": 36,
          "args": [
            "self"
          ],
          "decorators": [
            "abstractmethod"
          ],
          "is_async": false,
          "docstring": "Get the command to start the language server.",
          "returns": "List[str]"
        },
        {
          "name": "supports_file",
          "line": 41,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [
            "abstractmethod"
          ],
          "is_async": false,
          "docstring": "Check if this server supports the given file.",
          "returns": "bool"
        },
        {
          "name": "initialize",
          "line": 45,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Initialize the language server.",
          "returns": "bool"
        },
        {
          "name": "_check_server_availability",
          "line": 82,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check if the language server is available.",
          "returns": "bool"
        },
        {
          "name": "_send_initialize_request",
          "line": 99,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Send LSP initialize request.",
          "returns": "bool"
        },
        {
          "name": "get_completions",
          "line": 112,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get code completions at the specified position.",
          "returns": "List[CompletionItem]"
        },
        {
          "name": "get_hover_info",
          "line": 125,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get hover information at the specified position.",
          "returns": "Optional[Hover]"
        },
        {
          "name": "get_signature_help",
          "line": 138,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get signature help at the specified position.",
          "returns": "Optional[SignatureHelp]"
        },
        {
          "name": "get_diagnostics",
          "line": 151,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get all diagnostics from the language server.",
          "returns": "List[Diagnostic]"
        },
        {
          "name": "get_file_diagnostics",
          "line": 162,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get diagnostics for a specific file.",
          "returns": "List[Diagnostic]"
        },
        {
          "name": "refresh_diagnostics",
          "line": 170,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Refresh diagnostic information.",
          "returns": "None"
        },
        {
          "name": "shutdown",
          "line": 182,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Shutdown the language server.",
          "returns": "None"
        },
        {
          "name": "_cleanup_process",
          "line": 200,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Clean up the language server process.",
          "returns": "None"
        },
        {
          "name": "get_status",
          "line": 216,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get status information about the language server.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_get_mock_completions",
          "line": 228,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Mock completion implementation.",
          "returns": "List[CompletionItem]"
        },
        {
          "name": "_get_mock_hover",
          "line": 247,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Mock hover implementation.",
          "returns": "Optional[Hover]"
        },
        {
          "name": "_get_mock_signature_help",
          "line": 258,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Mock signature help implementation.",
          "returns": "Optional[SignatureHelp]"
        },
        {
          "name": "_update_diagnostics_cache",
          "line": 283,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Update the diagnostics cache with mock data.",
          "returns": "None"
        }
      ],
      "classes": [
        {
          "name": "BaseLanguageServer",
          "line": 24,
          "bases": [
            "ABC"
          ],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 27,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_server_command",
              "line": 36,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "supports_file",
              "line": 41,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "initialize",
              "line": 45,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_check_server_availability",
              "line": 82,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_send_initialize_request",
              "line": 99,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_completions",
              "line": 112,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_hover_info",
              "line": 125,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_signature_help",
              "line": 138,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_diagnostics",
              "line": 151,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_file_diagnostics",
              "line": 162,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "refresh_diagnostics",
              "line": 170,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "shutdown",
              "line": 182,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_cleanup_process",
              "line": 200,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_status",
              "line": 216,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_mock_completions",
              "line": 228,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_mock_hover",
              "line": 247,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_mock_signature_help",
              "line": 258,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_update_diagnostics_cache",
              "line": 283,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Abstract base class for language server implementations."
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "os",
          "alias": null,
          "line": 7
        },
        {
          "type": "import",
          "module": "subprocess",
          "alias": null,
          "line": 8
        },
        {
          "type": "import",
          "module": "threading",
          "alias": null,
          "line": 9
        },
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "abc",
          "name": "ABC",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "abc",
          "name": "abstractmethod",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Union",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "graph_sitter.shared.logging.get_logger",
          "name": "get_logger",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Diagnostic",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "CompletionItem",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Hover",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "SignatureHelp",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Position",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Range",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "TextEdit",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "WorkspaceEdit",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "CompletionItem",
          "alias": null,
          "line": 230
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "CompletionItemKind",
          "alias": null,
          "line": 230
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Hover",
          "alias": null,
          "line": 249
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "MarkupContent",
          "alias": null,
          "line": 249
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "SignatureHelp",
          "alias": null,
          "line": 260
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "SignatureInformation",
          "alias": null,
          "line": 260
        },
        {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "ParameterInformation",
          "alias": null,
          "line": 260
        }
      ],
      "constants": [],
      "decorators": [
        "abstractmethod"
      ],
      "docstring": "\nBase Language Server implementation.\n\nThis module provides the abstract base class for all language server implementations.\n",
      "lines_of_code": 288,
      "complexity_score": 88,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/advanced_error_viewer.py",
      "file_name": "advanced_error_viewer.py",
      "functions": [
        {
          "name": "__init__",
          "line": 61,
          "args": [
            "self",
            "codebase",
            "knowledge_integration",
            "config"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "_build_error_overview",
          "line": 123,
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Build error overview section.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_build_context_analysis",
          "line": 143,
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Build context analysis section.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_build_impact_assessment",
          "line": 154,
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Build impact assessment section.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_build_fix_recommendations",
          "line": 163,
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Build fix recommendations section.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_cluster_by_file",
          "line": 396,
          "args": [
            "self",
            "errors"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Cluster errors by file.",
          "returns": "List[ErrorCluster]"
        },
        {
          "name": "_cluster_by_function",
          "line": 416,
          "args": [
            "self",
            "errors"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Cluster errors by function.",
          "returns": "List[ErrorCluster]"
        },
        {
          "name": "_calculate_cluster_priority",
          "line": 462,
          "args": [
            "self",
            "cluster",
            "all_errors"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Calculate priority score for an error cluster.",
          "returns": "float"
        },
        {
          "name": "_generate_quick_summary",
          "line": 496,
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate a quick summary of the error.",
          "returns": "str"
        },
        {
          "name": "_summarize_context",
          "line": 510,
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Summarize the context analysis.",
          "returns": "Dict[str, str]"
        },
        {
          "name": "_identify_affected_components",
          "line": 529,
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Identify components affected by the error.",
          "returns": "List[str]"
        },
        {
          "name": "_assess_risks",
          "line": 541,
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Assess various risks associated with the error.",
          "returns": "Dict[str, str]"
        },
        {
          "name": "_recommend_priority",
          "line": 549,
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Recommend priority level for fixing the error.",
          "returns": "str"
        },
        {
          "name": "_generate_implementation_guide",
          "line": 560,
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate implementation guide for fixes.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_analyze_dependency_impact",
          "line": 583,
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Analyze impact on dependencies.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_generate_code_annotations",
          "line": 615,
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate code annotations for visualization.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "_detect_language",
          "line": 635,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Detect programming language from file extension.",
          "returns": "str"
        }
      ],
      "classes": [
        {
          "name": "ErrorViewConfig",
          "line": 24,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Configuration for error viewing."
        },
        {
          "name": "ErrorVisualization",
          "line": 36,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Error visualization data."
        },
        {
          "name": "ErrorCluster",
          "line": 45,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Cluster of related errors."
        },
        {
          "name": "AdvancedErrorViewer",
          "line": 55,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 61,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_build_error_overview",
              "line": 123,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_build_context_analysis",
              "line": 143,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_build_impact_assessment",
              "line": 154,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_build_fix_recommendations",
              "line": 163,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_cluster_by_file",
              "line": 396,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_cluster_by_function",
              "line": 416,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_calculate_cluster_priority",
              "line": 462,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_generate_quick_summary",
              "line": 496,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_summarize_context",
              "line": 510,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_identify_affected_components",
              "line": 529,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_assess_risks",
              "line": 541,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_recommend_priority",
              "line": 549,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_generate_implementation_guide",
              "line": 560,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_analyze_dependency_impact",
              "line": 583,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_generate_code_annotations",
              "line": 615,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_detect_language",
              "line": 635,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Advanced error viewer that provides comprehensive error analysis,\nvisualization, and intelligent fix suggestions."
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "asyncio",
          "alias": null,
          "line": 9
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 10
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "field",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Set",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Tuple",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Union",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "collections",
          "name": "defaultdict",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "advanced_context",
          "name": "AdvancedContextEngine",
          "alias": null,
          "line": 17
        },
        {
          "type": "from_import",
          "module": "advanced_context",
          "name": "ContextualError",
          "alias": null,
          "line": 17
        },
        {
          "type": "from_import",
          "module": "knowledge_integration",
          "name": "AdvancedKnowledgeIntegration",
          "alias": null,
          "line": 18
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nAdvanced Error Viewer for Serena Integration\n\nThis module provides comprehensive error viewing capabilities with intelligent\ncontext inclusion and deep code understanding.\n",
      "lines_of_code": 649,
      "complexity_score": 80,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/auto_init.py",
      "file_name": "auto_init.py",
      "functions": [
        {
          "name": "initialize_serena_integration",
          "line": 14,
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": "Initialize Serena integration with the Codebase class.",
          "returns": "bool"
        },
        {
          "name": "add_serena_to_codebase",
          "line": 36,
          "args": [
            "codebase_class"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Add Serena methods to the Codebase class.",
          "returns": "None"
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "core",
          "name": "SerenaCore",
          "alias": null,
          "line": 40
        },
        {
          "type": "from_import",
          "module": "core",
          "name": "get_or_create_core",
          "alias": null,
          "line": 40
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "SerenaConfig",
          "alias": null,
          "line": 41
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "SerenaCapability",
          "alias": null,
          "line": 41
        },
        {
          "type": "from_import",
          "module": "lsp_integration",
          "name": "SerenaLSPIntegration",
          "alias": null,
          "line": 42
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.codebase",
          "name": "Codebase",
          "alias": null,
          "line": 18
        },
        {
          "type": "from_import",
          "module": "lsp_integration",
          "name": "SerenaLSPIntegration",
          "alias": null,
          "line": 65
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "AnalysisContext",
          "alias": null,
          "line": 241
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "AnalysisContext",
          "alias": null,
          "line": 377
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "SerenaConfig",
          "alias": null,
          "line": 480
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nAuto-initialization for Serena Integration\n\nThis module automatically integrates Serena capabilities into the Codebase class\nwhen imported. It should be imported after the Codebase class is defined.\n",
      "lines_of_code": 551,
      "complexity_score": 17,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/core.py",
      "file_name": "core.py",
      "functions": [
        {
          "name": "create_core",
          "line": 524,
          "args": [
            "codebase_path",
            "config"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Create a new SerenaCore instance (not global).",
          "returns": "SerenaCore"
        },
        {
          "name": "__init__",
          "line": 51,
          "args": [
            "self",
            "codebase_path",
            "config"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "set_lsp_integration",
          "line": 156,
          "args": [
            "self",
            "lsp_integration"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Set reference to LSP integration for coordination.",
          "returns": "None"
        },
        {
          "name": "get_capability",
          "line": 161,
          "args": [
            "self",
            "capability"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get instance of a specific capability.",
          "returns": "Optional[Any]"
        },
        {
          "name": "is_capability_enabled",
          "line": 165,
          "args": [
            "self",
            "capability"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check if a capability is enabled and available.",
          "returns": "bool"
        },
        {
          "name": "subscribe_to_event",
          "line": 252,
          "args": [
            "self",
            "event_type",
            "handler",
            "priority"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Subscribe to an event type.",
          "returns": "None"
        },
        {
          "name": "unsubscribe_from_event",
          "line": 271,
          "args": [
            "self",
            "event_type",
            "handler"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Unsubscribe from an event type.",
          "returns": "None"
        },
        {
          "name": "get_performance_metrics",
          "line": 296,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get performance metrics for all operations.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "get_operation_counts",
          "line": 300,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get operation counts.",
          "returns": "Dict[str, int]"
        },
        {
          "name": "get_status",
          "line": 304,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get comprehensive status information.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_record_operation",
          "line": 473,
          "args": [
            "self",
            "operation_name",
            "duration"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Record an operation for performance tracking.",
          "returns": "None"
        },
        {
          "name": "run_background_loop",
          "line": 390,
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        }
      ],
      "classes": [
        {
          "name": "SerenaCore",
          "line": 36,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 51,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "set_lsp_integration",
              "line": 156,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_capability",
              "line": 161,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "is_capability_enabled",
              "line": 165,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "subscribe_to_event",
              "line": 252,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "unsubscribe_from_event",
              "line": 271,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_performance_metrics",
              "line": 296,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_operation_counts",
              "line": 300,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_status",
              "line": 304,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_record_operation",
              "line": 473,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Core Serena integration for graph-sitter.\n\nOrchestrates all Serena LSP capabilities and provides unified interface\nfor real-time code intelligence, refactoring, and advanced analysis.\n\nFeatures:\n- Capability management and coordination\n- Event-driven architecture\n- Performance monitoring\n- Background processing\n- LSP integration coordination"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "asyncio",
          "alias": null,
          "line": 8
        },
        {
          "type": "import",
          "module": "threading",
          "alias": null,
          "line": 9
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Union",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Callable",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "enum",
          "name": "Enum",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "SerenaCapability",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "SerenaConfig",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringResult",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "SymbolInfo",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "CodeAction",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "CodeGenerationResult",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "SemanticSearchResult",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "HoverInfo",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "CompletionItem",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "AnalysisContext",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "PerformanceMetrics",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "EventSubscription",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "EventHandler",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "AsyncEventHandler",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "refactoring.refactoring_engine",
          "name": "RefactoringEngine",
          "alias": null,
          "line": 333
        },
        {
          "type": "from_import",
          "module": "symbols.symbol_intelligence",
          "name": "SymbolIntelligence",
          "alias": null,
          "line": 339
        },
        {
          "type": "from_import",
          "module": "actions.code_actions",
          "name": "CodeActions",
          "alias": null,
          "line": 345
        },
        {
          "type": "from_import",
          "module": "realtime.realtime_analyzer",
          "name": "RealtimeAnalyzer",
          "alias": null,
          "line": 351
        },
        {
          "type": "from_import",
          "module": "search.semantic_search",
          "name": "SemanticSearch",
          "alias": null,
          "line": 357
        },
        {
          "type": "from_import",
          "module": "generation.code_generator",
          "name": "CodeGenerator",
          "alias": null,
          "line": 363
        },
        {
          "type": "from_import",
          "module": "intelligence.hover",
          "name": "HoverProvider",
          "alias": null,
          "line": 369
        },
        {
          "type": "from_import",
          "module": "intelligence.completions",
          "name": "CompletionProvider",
          "alias": null,
          "line": 375
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nSerena Core Integration\n\nMain orchestrator for all Serena LSP capabilities in graph-sitter.\nCoordinates between LSP integration, refactoring, symbol intelligence, and other advanced features.\n",
      "lines_of_code": 527,
      "complexity_score": 71,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/error_analysis.py",
      "file_name": "error_analysis.py",
      "functions": [
        {
          "name": "analyze_codebase_errors",
          "line": 634,
          "args": [
            "codebase",
            "enable_lsp"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Create and return a comprehensive error analyzer for a codebase.",
          "returns": "ComprehensiveErrorAnalyzer"
        },
        {
          "name": "get_instant_error_context",
          "line": 639,
          "args": [
            "codebase",
            "file_path",
            "line"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get instant error context for a specific location.",
          "returns": "Optional[ErrorContext]"
        },
        {
          "name": "get_all_codebase_errors_with_context",
          "line": 652,
          "args": [
            "codebase"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get all errors in the codebase with their complete contexts.",
          "returns": "List[ErrorContext]"
        },
        {
          "name": "__init__",
          "line": 78,
          "args": [
            "self",
            "codebase",
            "enable_lsp"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "_initialize_serena_components",
          "line": 103,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Initialize Serena components if available.",
          "returns": "None"
        },
        {
          "name": "get_all_errors",
          "line": 132,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get all errors in the codebase using existing diagnostics.",
          "returns": "List[ErrorInfo]"
        },
        {
          "name": "get_all_warnings",
          "line": 136,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get all warnings in the codebase using existing diagnostics.",
          "returns": "List[ErrorInfo]"
        },
        {
          "name": "get_all_diagnostics",
          "line": 140,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get all diagnostics (errors, warnings, hints) using existing diagnostics.",
          "returns": "List[ErrorInfo]"
        },
        {
          "name": "get_file_errors",
          "line": 144,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get errors for a specific file using existing diagnostics.",
          "returns": "List[ErrorInfo]"
        },
        {
          "name": "analyze_error_context",
          "line": 148,
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Analyze comprehensive context for an error using existing capabilities.\n\nArgs:\n    error: ErrorInfo object from diagnostics\n    \nReturns:\n    ErrorContext with comprehensive information",
          "returns": "ErrorContext"
        },
        {
          "name": "_get_code_context",
          "line": 197,
          "args": [
            "self",
            "file_path",
            "line",
            "context_lines"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get code context around an error line.",
          "returns": "Optional[str]"
        },
        {
          "name": "_find_calling_functions",
          "line": 219,
          "args": [
            "self",
            "file_path",
            "line"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find functions that call the error point using existing capabilities.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "_find_called_functions",
          "line": 253,
          "args": [
            "self",
            "file_path",
            "line"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find functions called by the error point using existing capabilities.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "_analyze_parameter_issues",
          "line": 280,
          "args": [
            "self",
            "file_path",
            "line"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Analyze parameter usage issues using existing capabilities.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "_build_dependency_chain",
          "line": 309,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Build dependency chain for a file using existing capabilities.",
          "returns": "List[str]"
        },
        {
          "name": "_find_related_symbols",
          "line": 340,
          "args": [
            "self",
            "file_path",
            "line"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find symbols related to the error point using existing capabilities.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "_generate_fix_suggestions",
          "line": 368,
          "args": [
            "self",
            "error",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate fix suggestions based on error and context.",
          "returns": "List[str]"
        },
        {
          "name": "_get_function_at_line",
          "line": 407,
          "args": [
            "self",
            "file_path",
            "line"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get the function name at a specific line.",
          "returns": "Optional[str]"
        },
        {
          "name": "_find_callers_via_ast",
          "line": 425,
          "args": [
            "self",
            "file_path",
            "line"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find callers using AST analysis as fallback.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "_find_called_via_ast",
          "line": 459,
          "args": [
            "self",
            "file_path",
            "line"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find called functions using AST analysis as fallback.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "_analyze_parameters_via_ast",
          "line": 502,
          "args": [
            "self",
            "file_path",
            "line"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Analyze parameter issues using AST as fallback.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "get_error_summary",
          "line": 542,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get a comprehensive summary of all errors in the codebase.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_classify_error_type",
          "line": 575,
          "args": [
            "self",
            "message"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Classify error type based on message.",
          "returns": "str"
        },
        {
          "name": "_get_most_problematic_files",
          "line": 592,
          "args": [
            "self",
            "errors_by_file",
            "limit"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get the files with the most errors.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "refresh_analysis",
          "line": 602,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Refresh all analysis data.",
          "returns": "None"
        },
        {
          "name": "shutdown",
          "line": 618,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Shutdown the error analyzer.",
          "returns": "None"
        }
      ],
      "classes": [
        {
          "name": "ErrorContext",
          "line": 30,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Comprehensive error context information."
        },
        {
          "name": "ParameterIssue",
          "line": 43,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Parameter usage issue."
        },
        {
          "name": "FunctionCallInfo",
          "line": 56,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Information about function calls."
        },
        {
          "name": "ComprehensiveErrorAnalyzer",
          "line": 66,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 78,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_initialize_serena_components",
              "line": 103,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_all_errors",
              "line": 132,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_all_warnings",
              "line": 136,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_all_diagnostics",
              "line": 140,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_file_errors",
              "line": 144,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "analyze_error_context",
              "line": 148,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_code_context",
              "line": 197,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_calling_functions",
              "line": 219,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_called_functions",
              "line": 253,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_analyze_parameter_issues",
              "line": 280,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_build_dependency_chain",
              "line": 309,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_related_symbols",
              "line": 340,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_generate_fix_suggestions",
              "line": 368,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_function_at_line",
              "line": 407,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_callers_via_ast",
              "line": 425,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_called_via_ast",
              "line": 459,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_analyze_parameters_via_ast",
              "line": 502,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_error_summary",
              "line": 542,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_classify_error_type",
              "line": 575,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_most_problematic_files",
              "line": 592,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "refresh_analysis",
              "line": 602,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "shutdown",
              "line": 618,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Comprehensive error analyzer that leverages existing graph-sitter and Serena capabilities.\n\nUses existing components:\n- CodebaseDiagnostics for error detection\n- SemanticTools for code analysis\n- CodeIntelligence for symbol information\n- SymbolIntelligence for dependency tracking\n- SemanticSearch for finding related code"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "ast",
          "alias": null,
          "line": 8
        },
        {
          "type": "import",
          "module": "inspect",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Set",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Tuple",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Union",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "field",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "collections",
          "name": "defaultdict",
          "alias": null,
          "line": 13
        },
        {
          "type": "import",
          "module": "traceback",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "graph_sitter.shared.logging.get_logger",
          "name": "get_logger",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.codebase",
          "name": "Codebase",
          "alias": null,
          "line": 17
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.diagnostics",
          "name": "CodebaseDiagnostics",
          "alias": null,
          "line": 18
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.diagnostics",
          "name": "add_diagnostic_capabilities",
          "alias": null,
          "line": 18
        },
        {
          "type": "from_import",
          "module": "graph_sitter.extensions.lsp.serena_bridge",
          "name": "ErrorInfo",
          "alias": null,
          "line": 19
        },
        {
          "type": "from_import",
          "module": "graph_sitter.extensions.lsp.serena_bridge",
          "name": "SerenaLSPBridge",
          "alias": null,
          "line": 19
        },
        {
          "type": "from_import",
          "module": "mcp_bridge",
          "name": "SerenaMCPBridge",
          "alias": null,
          "line": 20
        },
        {
          "type": "from_import",
          "module": "mcp_bridge",
          "name": "MCPToolResult",
          "alias": null,
          "line": 20
        },
        {
          "type": "from_import",
          "module": "semantic_tools",
          "name": "SemanticTools",
          "alias": null,
          "line": 21
        },
        {
          "type": "from_import",
          "module": "intelligence.code_intelligence",
          "name": "CodeIntelligence",
          "alias": null,
          "line": 22
        },
        {
          "type": "from_import",
          "module": "symbols.symbol_intelligence",
          "name": "SymbolIntelligence",
          "alias": null,
          "line": 23
        },
        {
          "type": "from_import",
          "module": "search.semantic_search",
          "name": "SemanticSearch",
          "alias": null,
          "line": 24
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nComprehensive Error Analysis System for Graph-Sitter & Serena\n\nThis module provides comprehensive error detection, context analysis, and dependency tracking\nusing existing graph-sitter and Serena capabilities without reinventing the wheel.\n",
      "lines_of_code": 662,
      "complexity_score": 113,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/lsp_integration.py",
      "file_name": "lsp_integration.py",
      "functions": [
        {
          "name": "__init__",
          "line": 69,
          "args": [
            "self",
            "codebase_path",
            "config_dir",
            "auto_discover_servers",
            "enable_real_time_diagnostics",
            "serena_config"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "get_real_time_stats",
          "line": 326,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get real-time diagnostic statistics.",
          "returns": "Optional[DiagnosticStats]"
        },
        {
          "name": "get_trend_analysis",
          "line": 333,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get trend analysis from real-time diagnostics.",
          "returns": "Optional[Dict[str, Any]]"
        },
        {
          "name": "get_comprehensive_report",
          "line": 340,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get comprehensive diagnostic report.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "add_error_listener",
          "line": 368,
          "args": [
            "self",
            "listener"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Add listener for error updates.",
          "returns": null
        },
        {
          "name": "add_stats_listener",
          "line": 372,
          "args": [
            "self",
            "listener"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Add listener for statistics updates.",
          "returns": null
        },
        {
          "name": "add_connection_listener",
          "line": 376,
          "args": [
            "self",
            "listener"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Add listener for connection status changes.",
          "returns": null
        },
        {
          "name": "add_diagnostic_filter",
          "line": 380,
          "args": [
            "self",
            "filter_config"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Add diagnostic filter for real-time processing.",
          "returns": null
        },
        {
          "name": "_select_best_client",
          "line": 521,
          "args": [
            "self",
            "preferred_server"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Select the best available client.",
          "returns": "Optional[SerenaLSPClient]"
        },
        {
          "name": "_clear_server_cache",
          "line": 535,
          "args": [
            "self",
            "server_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Clear cache entries for a specific server.",
          "returns": null
        },
        {
          "name": "_requires_serena_core",
          "line": 623,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check if any enabled capabilities require Serena core.",
          "returns": "bool"
        },
        {
          "name": "get_serena_core",
          "line": 650,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get the Serena core instance.",
          "returns": "Optional[Any]"
        }
      ],
      "classes": [
        {
          "name": "SerenaLSPIntegration",
          "line": 43,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 69,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_real_time_stats",
              "line": 326,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_trend_analysis",
              "line": 333,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_comprehensive_report",
              "line": 340,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "add_error_listener",
              "line": 368,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "add_stats_listener",
              "line": 372,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "add_connection_listener",
              "line": 376,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "add_diagnostic_filter",
              "line": 380,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_select_best_client",
              "line": 521,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_clear_server_cache",
              "line": 535,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_requires_serena_core",
              "line": 623,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_serena_core",
              "line": 650,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Enhanced LSP integration for Serena analysis with advanced capabilities.\n\nThis class provides a unified interface for:\n- LSP server management and coordination\n- Real-time error retrieval and diagnostics\n- Advanced refactoring operations\n- Symbol intelligence and analysis\n- Code actions and quick fixes\n- Real-time file monitoring\n- Comprehensive code analysis\n- Performance optimization\n\nFeatures:\n- Automatic server discovery and management\n- Multiple server support with load balancing\n- Real-time diagnostics and monitoring\n- Integration with Serena core capabilities\n- Advanced refactoring with conflict detection\n- Symbol intelligence and impact analysis\n- Code actions with LSP protocol compliance\n- Event-driven architecture with background processing\n- Performance monitoring and optimization"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "asyncio",
          "alias": null,
          "line": 9
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 10
        },
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Callable",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Union",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "lsp",
          "name": "SerenaLSPClient",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "lsp",
          "name": "SerenaServerManager",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "lsp",
          "name": "ServerConfig",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "lsp",
          "name": "ErrorRetriever",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "lsp",
          "name": "ComprehensiveErrorList",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "lsp",
          "name": "CodeError",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "lsp",
          "name": "ErrorSeverity",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "lsp",
          "name": "ErrorCategory",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "lsp",
          "name": "RealTimeDiagnostics",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "lsp",
          "name": "DiagnosticFilter",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "lsp",
          "name": "DiagnosticStats",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "lsp",
          "name": "ConnectionType",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "SerenaConfig",
          "alias": null,
          "line": 30
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "SerenaCapability",
          "alias": null,
          "line": 30
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringResult",
          "alias": null,
          "line": 30
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "SymbolInfo",
          "alias": null,
          "line": 30
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "CodeAction",
          "alias": null,
          "line": 30
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "HoverInfo",
          "alias": null,
          "line": 30
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "CompletionItem",
          "alias": null,
          "line": 30
        },
        {
          "type": "from_import",
          "module": "core",
          "name": "SerenaCore",
          "alias": null,
          "line": 639
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "AnalysisContext",
          "alias": null,
          "line": 750
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringType",
          "alias": null,
          "line": 718
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringType",
          "alias": null,
          "line": 731
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nEnhanced LSP Serena Integration\n\nThis module provides the main integration point for LSP-based Serena analysis,\ncombining all LSP components with advanced Serena capabilities including\nrefactoring, symbol intelligence, code actions, and real-time analysis.\n",
      "lines_of_code": 865,
      "complexity_score": 72,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/semantic_tools.py",
      "file_name": "semantic_tools.py",
      "functions": [
        {
          "name": "__init__",
          "line": 21,
          "args": [
            "self",
            "mcp_bridge"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "semantic_search",
          "line": 24,
          "args": [
            "self",
            "query",
            "file_pattern",
            "max_results"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Perform semantic search across the codebase.\n\nArgs:\n    query: Search query (natural language or code pattern)\n    file_pattern: Optional file pattern to limit search\n    max_results: Maximum number of results to return\n\nReturns:\n    List of search results with file paths, line numbers, and relevance scores",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "find_symbol",
          "line": 57,
          "args": [
            "self",
            "symbol_name",
            "symbol_type"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find symbol definitions and references.\n\nArgs:\n    symbol_name: Name of the symbol to find\n    symbol_type: Optional type filter (function, class, variable, etc.)\n\nReturns:\n    List of symbol locations with context",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "get_symbol_context",
          "line": 84,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get context information for a symbol at a specific position.\n\nArgs:\n    file_path: Path to the file\n    line: Line number (0-based)\n    character: Character position (0-based)\n\nReturns:\n    Symbol context information or None",
          "returns": "Optional[Dict[str, Any]]"
        },
        {
          "name": "edit_code",
          "line": 114,
          "args": [
            "self",
            "file_path",
            "start_line",
            "end_line",
            "new_content",
            "description"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Edit code in a file using semantic understanding.\n\nArgs:\n    file_path: Path to the file to edit\n    start_line: Start line of the edit (0-based)\n    end_line: End line of the edit (0-based)\n    new_content: New content to insert\n    description: Optional description of the change\n\nReturns:\n    True if edit was successful, False otherwise",
          "returns": "bool"
        },
        {
          "name": "get_completions",
          "line": 152,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get code completions at a specific position.\n\nArgs:\n    file_path: Path to the file\n    line: Line number (0-based)\n    character: Character position (0-based)\n\nReturns:\n    List of completion items",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "get_hover_info",
          "line": 182,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get hover information for a symbol at a specific position.\n\nArgs:\n    file_path: Path to the file\n    line: Line number (0-based)\n    character: Character position (0-based)\n\nReturns:\n    Hover information or None",
          "returns": "Optional[Dict[str, Any]]"
        },
        {
          "name": "refactor_rename",
          "line": 212,
          "args": [
            "self",
            "file_path",
            "line",
            "character",
            "new_name",
            "preview"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Rename a symbol across the codebase.\n\nArgs:\n    file_path: Path to the file containing the symbol\n    line: Line number (0-based)\n    character: Character position (0-based)\n    new_name: New name for the symbol\n    preview: Whether to return preview without applying changes\n\nReturns:\n    Refactoring result with changes and conflicts",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "analyze_code_quality",
          "line": 246,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Analyze code quality and get suggestions.\n\nArgs:\n    file_path: Optional specific file to analyze, or None for entire codebase\n\nReturns:\n    Code quality analysis results",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "get_available_tools",
          "line": 271,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get list of available MCP tools.",
          "returns": "List[str]"
        },
        {
          "name": "_parse_search_results",
          "line": 275,
          "args": [
            "self",
            "content"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Parse search results from MCP response.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "_parse_symbol_results",
          "line": 285,
          "args": [
            "self",
            "content"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Parse symbol results from MCP response.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "_parse_completion_results",
          "line": 295,
          "args": [
            "self",
            "content"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Parse completion results from MCP response.",
          "returns": "List[Dict[str, Any]]"
        }
      ],
      "classes": [
        {
          "name": "SemanticTools",
          "line": 18,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 21,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "semantic_search",
              "line": 24,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "find_symbol",
              "line": 57,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_symbol_context",
              "line": 84,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "edit_code",
              "line": 114,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_completions",
              "line": 152,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_hover_info",
              "line": 182,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "refactor_rename",
              "line": 212,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "analyze_code_quality",
              "line": 246,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_available_tools",
              "line": 271,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_parse_search_results",
              "line": 275,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_parse_symbol_results",
              "line": 285,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_parse_completion_results",
              "line": 295,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "High-level semantic tools using Serena MCP server."
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Union",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 9
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "graph_sitter.shared.logging.get_logger",
          "name": "get_logger",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "mcp_bridge",
          "name": "SerenaMCPBridge",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "mcp_bridge",
          "name": "MCPToolResult",
          "alias": null,
          "line": 13
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nSemantic Tools for Serena MCP Integration\n\nThis module provides high-level semantic tools that use the Serena MCP server\nto perform code retrieval, editing, and analysis operations.\n",
      "lines_of_code": 303,
      "complexity_score": 52,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/types.py",
      "file_name": "types.py",
      "functions": [
        {
          "name": "validate_refactoring_type",
          "line": 437,
          "args": [
            "value"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Validate and convert string to RefactoringType.",
          "returns": "RefactoringType"
        },
        {
          "name": "validate_capability",
          "line": 445,
          "args": [
            "value"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Validate and convert string to SerenaCapability.",
          "returns": "SerenaCapability"
        },
        {
          "name": "create_default_config",
          "line": 453,
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": "Create default Serena configuration.",
          "returns": "SerenaConfig"
        },
        {
          "name": "merge_configs",
          "line": 458,
          "args": [
            "base",
            "override"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Merge two configurations, with override taking precedence.",
          "returns": "SerenaConfig"
        },
        {
          "name": "is_insertion",
          "line": 109,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Check if this is an insertion change.",
          "returns": "bool"
        },
        {
          "name": "is_deletion",
          "line": 114,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Check if this is a deletion change.",
          "returns": "bool"
        },
        {
          "name": "line_count_delta",
          "line": 119,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Calculate the change in line count.",
          "returns": "int"
        },
        {
          "name": "is_blocking",
          "line": 138,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Check if this conflict blocks the refactoring.",
          "returns": "bool"
        },
        {
          "name": "has_conflicts",
          "line": 158,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Check if there are any conflicts.",
          "returns": "bool"
        },
        {
          "name": "has_blocking_conflicts",
          "line": 163,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Check if there are any blocking conflicts.",
          "returns": "bool"
        },
        {
          "name": "files_changed",
          "line": 168,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Get list of files that would be changed.",
          "returns": "List[str]"
        },
        {
          "name": "total_changes",
          "line": 173,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Get total number of changes.",
          "returns": "int"
        },
        {
          "name": "to_dict",
          "line": 177,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Convert RefactoringResult to dictionary.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "qualified_name",
          "line": 238,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Get fully qualified symbol name.",
          "returns": "str"
        },
        {
          "name": "is_available",
          "line": 263,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Check if the action is available (not disabled).",
          "returns": "bool"
        },
        {
          "name": "to_dict",
          "line": 279,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Convert to dictionary.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "to_dict",
          "line": 301,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Convert to dictionary.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "to_dict",
          "line": 319,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Convert to dictionary.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "to_dict",
          "line": 340,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Convert to dictionary.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "has_selection",
          "line": 366,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Check if there's a selection range.",
          "returns": "bool"
        },
        {
          "name": "has_cursor",
          "line": 371,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Check if there's a cursor position.",
          "returns": "bool"
        },
        {
          "name": "start_timing",
          "line": 389,
          "args": [
            "cls",
            "operation_name"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "Start timing an operation.",
          "returns": "'PerformanceMetrics'"
        },
        {
          "name": "finish_timing",
          "line": 399,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Finish timing the operation.",
          "returns": "None"
        },
        {
          "name": "to_dict",
          "line": 404,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Convert to dictionary.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "__post_init__",
          "line": 430,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Determine if handler is async.",
          "returns": null
        }
      ],
      "classes": [
        {
          "name": "SerenaCapability",
          "line": 15,
          "bases": [
            "Enum"
          ],
          "decorators": [],
          "methods": [],
          "docstring": "Available Serena capabilities."
        },
        {
          "name": "RefactoringType",
          "line": 28,
          "bases": [
            "Enum"
          ],
          "decorators": [],
          "methods": [],
          "docstring": "Types of refactoring operations."
        },
        {
          "name": "ChangeType",
          "line": 40,
          "bases": [
            "Enum"
          ],
          "decorators": [],
          "methods": [],
          "docstring": "Types of changes in refactoring operations."
        },
        {
          "name": "ConflictType",
          "line": 48,
          "bases": [
            "Enum"
          ],
          "decorators": [],
          "methods": [],
          "docstring": "Types of conflicts in refactoring operations."
        },
        {
          "name": "SerenaConfig",
          "line": 58,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Configuration for Serena integration."
        },
        {
          "name": "RefactoringChange",
          "line": 96,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "is_insertion",
              "line": 109,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "is_deletion",
              "line": 114,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "line_count_delta",
              "line": 119,
              "is_property": true,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Represents a single change in a refactoring operation."
        },
        {
          "name": "RefactoringConflict",
          "line": 127,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "is_blocking",
              "line": 138,
              "is_property": true,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Represents a conflict that prevents a refactoring operation."
        },
        {
          "name": "RefactoringResult",
          "line": 144,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "has_conflicts",
              "line": 158,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "has_blocking_conflicts",
              "line": 163,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "files_changed",
              "line": 168,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "total_changes",
              "line": 173,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "to_dict",
              "line": 177,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Result of a refactoring operation."
        },
        {
          "name": "SymbolInfo",
          "line": 222,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "qualified_name",
              "line": 238,
              "is_property": true,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Information about a code symbol."
        },
        {
          "name": "CodeAction",
          "line": 250,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "is_available",
              "line": 263,
              "is_property": true,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Represents a code action that can be applied."
        },
        {
          "name": "CodeGenerationResult",
          "line": 269,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "to_dict",
              "line": 279,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Result of code generation operation."
        },
        {
          "name": "SemanticSearchResult",
          "line": 293,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "to_dict",
              "line": 301,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Result of semantic search operation."
        },
        {
          "name": "HoverInfo",
          "line": 313,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "to_dict",
              "line": 319,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Information displayed on hover."
        },
        {
          "name": "CompletionItem",
          "line": 329,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "to_dict",
              "line": 340,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Code completion item."
        },
        {
          "name": "AnalysisContext",
          "line": 355,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "has_selection",
              "line": 366,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "has_cursor",
              "line": 371,
              "is_property": true,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Context for analysis operations."
        },
        {
          "name": "PerformanceMetrics",
          "line": 377,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "start_timing",
              "line": 389,
              "is_property": false,
              "is_static": false,
              "is_class": true
            },
            {
              "name": "finish_timing",
              "line": 399,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "to_dict",
              "line": 404,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Performance metrics for operations."
        },
        {
          "name": "EventSubscription",
          "line": 423,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "__post_init__",
              "line": 430,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Event subscription information."
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "field",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "enum",
          "name": "Enum",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Union",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Callable",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 11
        },
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 12
        },
        {
          "type": "import",
          "module": "asyncio",
          "alias": null,
          "line": 432
        }
      ],
      "constants": [
        {
          "name": "ERROR_ANALYSIS",
          "line": 17,
          "value": "'error_analysis'"
        },
        {
          "name": "REFACTORING",
          "line": 18,
          "value": "'refactoring'"
        },
        {
          "name": "SYMBOL_INTELLIGENCE",
          "line": 19,
          "value": "'symbol_intelligence'"
        },
        {
          "name": "CODE_ACTIONS",
          "line": 20,
          "value": "'code_actions'"
        },
        {
          "name": "REAL_TIME_ANALYSIS",
          "line": 21,
          "value": "'real_time_analysis'"
        },
        {
          "name": "SEMANTIC_SEARCH",
          "line": 22,
          "value": "'semantic_search'"
        },
        {
          "name": "CODE_GENERATION",
          "line": 23,
          "value": "'code_generation'"
        },
        {
          "name": "HOVER_INFO",
          "line": 24,
          "value": "'hover_info'"
        },
        {
          "name": "COMPLETIONS",
          "line": 25,
          "value": "'completions'"
        },
        {
          "name": "RENAME",
          "line": 30,
          "value": "'rename'"
        },
        {
          "name": "EXTRACT_METHOD",
          "line": 31,
          "value": "'extract_method'"
        },
        {
          "name": "EXTRACT_VARIABLE",
          "line": 32,
          "value": "'extract_variable'"
        },
        {
          "name": "INLINE_METHOD",
          "line": 33,
          "value": "'inline_method'"
        },
        {
          "name": "INLINE_VARIABLE",
          "line": 34,
          "value": "'inline_variable'"
        },
        {
          "name": "MOVE_SYMBOL",
          "line": 35,
          "value": "'move_symbol'"
        },
        {
          "name": "MOVE_FILE",
          "line": 36,
          "value": "'move_file'"
        },
        {
          "name": "ORGANIZE_IMPORTS",
          "line": 37,
          "value": "'organize_imports'"
        },
        {
          "name": "INSERT",
          "line": 42,
          "value": "'insert'"
        },
        {
          "name": "DELETE",
          "line": 43,
          "value": "'delete'"
        },
        {
          "name": "REPLACE",
          "line": 44,
          "value": "'replace'"
        },
        {
          "name": "MOVE",
          "line": 45,
          "value": "'move'"
        },
        {
          "name": "NAME_COLLISION",
          "line": 50,
          "value": "'name_collision'"
        },
        {
          "name": "SCOPE_CONFLICT",
          "line": 51,
          "value": "'scope_conflict'"
        },
        {
          "name": "TYPE_MISMATCH",
          "line": 52,
          "value": "'type_mismatch'"
        },
        {
          "name": "DEPENDENCY_CONFLICT",
          "line": 53,
          "value": "'dependency_conflict'"
        },
        {
          "name": "SYNTAX_ERROR",
          "line": 54,
          "value": "'syntax_error'"
        }
      ],
      "decorators": [
        "property",
        "classmethod"
      ],
      "docstring": "\nEnhanced Types for Serena LSP Integration\n\nThis module contains comprehensive types and enums used across all Serena modules\nincluding LSP integration, refactoring, symbol intelligence, and code actions.\n",
      "lines_of_code": 477,
      "complexity_score": 134,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/serena_types.py",
      "file_name": "serena_types.py",
      "functions": [
        {
          "name": "has_conflicts",
          "line": 63,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Check if there are any conflicts.",
          "returns": "bool"
        },
        {
          "name": "files_changed",
          "line": 68,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Get list of files that would be changed.",
          "returns": "List[str]"
        },
        {
          "name": "to_dict",
          "line": 72,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Convert RefactoringResult to dictionary.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "__post_init__",
          "line": 205,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Set default capabilities if none provided.",
          "returns": null
        },
        {
          "name": "is_capability_enabled",
          "line": 218,
          "args": [
            "self",
            "capability"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check if a capability is enabled.",
          "returns": "bool"
        },
        {
          "name": "enable_capability",
          "line": 222,
          "args": [
            "self",
            "capability"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Enable a capability.",
          "returns": "None"
        },
        {
          "name": "disable_capability",
          "line": 227,
          "args": [
            "self",
            "capability"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Disable a capability.",
          "returns": "None"
        }
      ],
      "classes": [
        {
          "name": "RefactoringType",
          "line": 14,
          "bases": [
            "Enum"
          ],
          "decorators": [],
          "methods": [],
          "docstring": "Types of refactoring operations."
        },
        {
          "name": "RefactoringChange",
          "line": 27,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Represents a single change in a refactoring operation."
        },
        {
          "name": "RefactoringConflict",
          "line": 40,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Represents a conflict that prevents a refactoring operation."
        },
        {
          "name": "RefactoringResult",
          "line": 50,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "has_conflicts",
              "line": 63,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "files_changed",
              "line": 68,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "to_dict",
              "line": 72,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Result of a refactoring operation."
        },
        {
          "name": "CodeGenerationResult",
          "line": 109,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Result of a code generation operation."
        },
        {
          "name": "SemanticSearchResult",
          "line": 119,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Result of a semantic search operation."
        },
        {
          "name": "SymbolInfo",
          "line": 132,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Information about a code symbol."
        },
        {
          "name": "CompletionContext",
          "line": 146,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Context information for code completions."
        },
        {
          "name": "HoverContext",
          "line": 157,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Context information for hover requests."
        },
        {
          "name": "SignatureContext",
          "line": 167,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Context information for signature help."
        },
        {
          "name": "SerenaCapability",
          "line": 176,
          "bases": [
            "Enum"
          ],
          "decorators": [],
          "methods": [],
          "docstring": "Serena capabilities that can be enabled/disabled."
        },
        {
          "name": "SerenaConfig",
          "line": 195,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "__post_init__",
              "line": 205,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "is_capability_enabled",
              "line": 218,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "enable_capability",
              "line": 222,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "disable_capability",
              "line": 227,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Configuration for Serena LSP integration."
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "enum",
          "name": "Enum",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Union",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 11
        }
      ],
      "constants": [
        {
          "name": "RENAME",
          "line": 16,
          "value": "'rename'"
        },
        {
          "name": "EXTRACT_METHOD",
          "line": 17,
          "value": "'extract_method'"
        },
        {
          "name": "EXTRACT_VARIABLE",
          "line": 18,
          "value": "'extract_variable'"
        },
        {
          "name": "INLINE_METHOD",
          "line": 19,
          "value": "'inline_method'"
        },
        {
          "name": "INLINE_VARIABLE",
          "line": 20,
          "value": "'inline_variable'"
        },
        {
          "name": "MOVE_SYMBOL",
          "line": 21,
          "value": "'move_symbol'"
        },
        {
          "name": "MOVE_FILE",
          "line": 22,
          "value": "'move_file'"
        },
        {
          "name": "ORGANIZE_IMPORTS",
          "line": 23,
          "value": "'organize_imports'"
        },
        {
          "name": "CODE_INTELLIGENCE",
          "line": 178,
          "value": "'code_intelligence'"
        },
        {
          "name": "INTELLIGENCE",
          "line": 179,
          "value": "'intelligence'"
        },
        {
          "name": "REFACTORING",
          "line": 180,
          "value": "'refactoring'"
        },
        {
          "name": "CODE_ACTIONS",
          "line": 181,
          "value": "'code_actions'"
        },
        {
          "name": "ACTIONS",
          "line": 182,
          "value": "'actions'"
        },
        {
          "name": "CODE_GENERATION",
          "line": 183,
          "value": "'code_generation'"
        },
        {
          "name": "GENERATION",
          "line": 184,
          "value": "'generation'"
        },
        {
          "name": "SEMANTIC_SEARCH",
          "line": 185,
          "value": "'semantic_search'"
        },
        {
          "name": "SEARCH",
          "line": 186,
          "value": "'search'"
        },
        {
          "name": "SYMBOL_INTELLIGENCE",
          "line": 187,
          "value": "'symbol_intelligence'"
        },
        {
          "name": "SYMBOLS",
          "line": 188,
          "value": "'symbols'"
        },
        {
          "name": "REALTIME_ANALYSIS",
          "line": 189,
          "value": "'realtime_analysis'"
        },
        {
          "name": "REALTIME",
          "line": 190,
          "value": "'realtime'"
        },
        {
          "name": "ANALYSIS",
          "line": 191,
          "value": "'analysis'"
        }
      ],
      "decorators": [
        "property"
      ],
      "docstring": "\nShared types for Serena LSP integration.\n\nThis module contains common types and enums used across Serena modules\nto avoid circular imports.\n",
      "lines_of_code": 230,
      "complexity_score": 65,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/__init__.py",
      "file_name": "__init__.py",
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "core",
          "name": "SerenaCore",
          "alias": null,
          "line": 56
        },
        {
          "type": "from_import",
          "module": "core",
          "name": "get_or_create_core",
          "alias": null,
          "line": 56
        },
        {
          "type": "from_import",
          "module": "core",
          "name": "create_core",
          "alias": null,
          "line": 56
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "SerenaConfig",
          "alias": null,
          "line": 57
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "SerenaCapability",
          "alias": null,
          "line": 57
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringType",
          "alias": null,
          "line": 57
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringResult",
          "alias": null,
          "line": 57
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringChange",
          "alias": null,
          "line": 57
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringConflict",
          "alias": null,
          "line": 57
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "SymbolInfo",
          "alias": null,
          "line": 57
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "CodeAction",
          "alias": null,
          "line": 57
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "CodeGenerationResult",
          "alias": null,
          "line": 57
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "SemanticSearchResult",
          "alias": null,
          "line": 57
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "HoverInfo",
          "alias": null,
          "line": 57
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "CompletionItem",
          "alias": null,
          "line": 57
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "AnalysisContext",
          "alias": null,
          "line": 57
        },
        {
          "type": "from_import",
          "module": "error_analysis",
          "name": "ComprehensiveErrorAnalyzer",
          "alias": null,
          "line": 74
        },
        {
          "type": "from_import",
          "module": "error_analysis",
          "name": "ErrorContext",
          "alias": null,
          "line": 74
        },
        {
          "type": "from_import",
          "module": "error_analysis",
          "name": "ParameterIssue",
          "alias": null,
          "line": 74
        },
        {
          "type": "from_import",
          "module": "error_analysis",
          "name": "FunctionCallInfo",
          "alias": null,
          "line": 74
        },
        {
          "type": "from_import",
          "module": "error_analysis",
          "name": "analyze_codebase_errors",
          "alias": null,
          "line": 74
        },
        {
          "type": "from_import",
          "module": "error_analysis",
          "name": "get_instant_error_context",
          "alias": null,
          "line": 74
        },
        {
          "type": "from_import",
          "module": "error_analysis",
          "name": "get_all_codebase_errors_with_context",
          "alias": null,
          "line": 74
        },
        {
          "type": "from_import",
          "module": "api",
          "name": "SerenaAPI",
          "alias": null,
          "line": 85
        },
        {
          "type": "from_import",
          "module": "api",
          "name": "create_serena_api",
          "alias": null,
          "line": 85
        },
        {
          "type": "from_import",
          "module": "api",
          "name": "get_codebase_error_analysis",
          "alias": null,
          "line": 85
        },
        {
          "type": "from_import",
          "module": "api",
          "name": "analyze_file_errors",
          "alias": null,
          "line": 85
        },
        {
          "type": "from_import",
          "module": "api",
          "name": "find_function_relationships",
          "alias": null,
          "line": 85
        },
        {
          "type": "from_import",
          "module": "mcp_bridge",
          "name": "SerenaMCPBridge",
          "alias": null,
          "line": 125
        },
        {
          "type": "from_import",
          "module": "mcp_bridge",
          "name": "MCPToolResult",
          "alias": null,
          "line": 125
        },
        {
          "type": "from_import",
          "module": "semantic_tools",
          "name": "SemanticTools",
          "alias": null,
          "line": 126
        },
        {
          "type": "from_import",
          "module": "knowledge_integration",
          "name": "AdvancedKnowledgeIntegration",
          "alias": null,
          "line": 95
        },
        {
          "type": "from_import",
          "module": "knowledge_integration",
          "name": "KnowledgeContext",
          "alias": null,
          "line": 95
        },
        {
          "type": "from_import",
          "module": "knowledge_integration",
          "name": "KnowledgeGraph",
          "alias": null,
          "line": 95
        },
        {
          "type": "from_import",
          "module": "knowledge_integration",
          "name": "AdvancedErrorContext",
          "alias": null,
          "line": 95
        },
        {
          "type": "from_import",
          "module": "advanced_context",
          "name": "AdvancedContextEngine",
          "alias": null,
          "line": 106
        },
        {
          "type": "from_import",
          "module": "advanced_context",
          "name": "ContextualError",
          "alias": null,
          "line": 106
        },
        {
          "type": "from_import",
          "module": "advanced_context",
          "name": "ContextualInsight",
          "alias": null,
          "line": 106
        },
        {
          "type": "from_import",
          "module": "advanced_error_viewer",
          "name": "AdvancedErrorViewer",
          "alias": null,
          "line": 115
        },
        {
          "type": "from_import",
          "module": "advanced_error_viewer",
          "name": "ErrorViewConfig",
          "alias": null,
          "line": 115
        },
        {
          "type": "from_import",
          "module": "advanced_error_viewer",
          "name": "ErrorCluster",
          "alias": null,
          "line": 115
        },
        {
          "type": "from_import",
          "module": "advanced_error_viewer",
          "name": "ErrorVisualization",
          "alias": null,
          "line": 115
        },
        {
          "type": "from_import",
          "module": "lsp_integration",
          "name": "SerenaLSPIntegration",
          "alias": null,
          "line": 130
        },
        {
          "type": "from_import",
          "module": "lsp_integration",
          "name": "create_serena_lsp_integration",
          "alias": null,
          "line": 130
        },
        {
          "type": "from_import",
          "module": "lsp_integration",
          "name": "get_comprehensive_code_errors",
          "alias": null,
          "line": 130
        },
        {
          "type": "from_import",
          "module": "lsp_integration",
          "name": "analyze_file_errors",
          "alias": "lsp_analyze_file_errors",
          "line": 130
        },
        {
          "type": "from_import",
          "module": "lsp",
          "name": "SerenaLSPClient",
          "alias": null,
          "line": 137
        },
        {
          "type": "from_import",
          "module": "lsp",
          "name": "SerenaServerManager",
          "alias": null,
          "line": 137
        },
        {
          "type": "from_import",
          "module": "lsp",
          "name": "ServerConfig",
          "alias": null,
          "line": 137
        },
        {
          "type": "from_import",
          "module": "lsp",
          "name": "ErrorRetriever",
          "alias": null,
          "line": 137
        },
        {
          "type": "from_import",
          "module": "lsp",
          "name": "ComprehensiveErrorList",
          "alias": null,
          "line": 137
        },
        {
          "type": "from_import",
          "module": "lsp",
          "name": "CodeError",
          "alias": null,
          "line": 137
        },
        {
          "type": "from_import",
          "module": "lsp",
          "name": "RealTimeDiagnostics",
          "alias": null,
          "line": 137
        },
        {
          "type": "from_import",
          "module": "lsp",
          "name": "DiagnosticFilter",
          "alias": null,
          "line": 137
        },
        {
          "type": "from_import",
          "module": "lsp",
          "name": "DiagnosticStats",
          "alias": null,
          "line": 137
        },
        {
          "type": "from_import",
          "module": "lsp",
          "name": "ConnectionType",
          "alias": null,
          "line": 137
        },
        {
          "type": "from_import",
          "module": "refactoring",
          "name": "RefactoringEngine",
          "alias": null,
          "line": 157
        },
        {
          "type": "from_import",
          "module": "refactoring.refactoring_engine",
          "name": "RefactoringConfig",
          "alias": null,
          "line": 158
        },
        {
          "type": "from_import",
          "module": "refactoring.rename_refactor",
          "name": "RenameRefactor",
          "alias": null,
          "line": 159
        },
        {
          "type": "from_import",
          "module": "refactoring.extract_refactor",
          "name": "ExtractRefactor",
          "alias": null,
          "line": 160
        },
        {
          "type": "from_import",
          "module": "refactoring.inline_refactor",
          "name": "InlineRefactor",
          "alias": null,
          "line": 161
        },
        {
          "type": "from_import",
          "module": "refactoring.move_refactor",
          "name": "MoveRefactor",
          "alias": null,
          "line": 162
        },
        {
          "type": "from_import",
          "module": "symbols",
          "name": "SymbolIntelligence",
          "alias": null,
          "line": 168
        },
        {
          "type": "from_import",
          "module": "actions",
          "name": "CodeActions",
          "alias": null,
          "line": 174
        },
        {
          "type": "from_import",
          "module": "realtime",
          "name": "RealtimeAnalyzer",
          "alias": null,
          "line": 180
        },
        {
          "type": "from_import",
          "module": "auto_init",
          "name": "initialize_serena_integration",
          "alias": null,
          "line": 187
        },
        {
          "type": "from_import",
          "module": "auto_init",
          "name": "add_serena_to_codebase",
          "alias": null,
          "line": 187
        },
        {
          "type": "from_import",
          "module": "intelligence",
          "name": "CodeIntelligence",
          "alias": null,
          "line": 194
        },
        {
          "type": "from_import",
          "module": "generation",
          "name": "CodeGenerator",
          "alias": null,
          "line": 195
        },
        {
          "type": "from_import",
          "module": "search",
          "name": "SemanticSearch",
          "alias": null,
          "line": 196
        }
      ],
      "constants": [
        {
          "name": "LSP_AVAILABLE",
          "line": 150,
          "value": "True"
        },
        {
          "name": "REFACTORING_AVAILABLE",
          "line": 163,
          "value": "True"
        },
        {
          "name": "SYMBOL_INTELLIGENCE_AVAILABLE",
          "line": 169,
          "value": "True"
        },
        {
          "name": "CODE_ACTIONS_AVAILABLE",
          "line": 175,
          "value": "True"
        },
        {
          "name": "REALTIME_ANALYSIS_AVAILABLE",
          "line": 181,
          "value": "True"
        },
        {
          "name": "AUTO_INIT_AVAILABLE",
          "line": 188,
          "value": "True"
        },
        {
          "name": "LSP_AVAILABLE",
          "line": 153,
          "value": "False"
        },
        {
          "name": "REFACTORING_AVAILABLE",
          "line": 165,
          "value": "False"
        },
        {
          "name": "SYMBOL_INTELLIGENCE_AVAILABLE",
          "line": 171,
          "value": "False"
        },
        {
          "name": "CODE_ACTIONS_AVAILABLE",
          "line": 177,
          "value": "False"
        },
        {
          "name": "REALTIME_ANALYSIS_AVAILABLE",
          "line": 183,
          "value": "False"
        },
        {
          "name": "AUTO_INIT_AVAILABLE",
          "line": 190,
          "value": "False"
        }
      ],
      "decorators": [],
      "docstring": "\nEnhanced Serena Extension for Graph-Sitter\n\nThis extension provides comprehensive code intelligence with advanced LSP integration,\nincluding error analysis, refactoring, symbol intelligence, code actions, and real-time analysis.\n\nMain Features:\n- Advanced LSP integration with multiple server support\n- Comprehensive refactoring operations (rename, extract, inline, move)\n- Symbol intelligence with relationship tracking and impact analysis\n- Code actions and quick fixes with LSP protocol compliance\n- Real-time file monitoring and incremental analysis\n- Comprehensive error detection and context analysis\n- Function call chain mapping (callers and callees)\n- Parameter usage analysis (unused, wrong types)\n- Dependency tracking and analysis\n- Symbol relationship mapping\n- Real-time error context with fix suggestions\n\nUsage:\n    from graph_sitter.extensions.serena import (\n        SerenaCore,\n        SerenaLSPIntegration,\n        create_serena_lsp_integration,\n        SerenaConfig,\n        SerenaCapability\n    )\n    \n    # Create enhanced LSP integration\n    integration = await create_serena_lsp_integration(\n        codebase_path=\"/path/to/codebase\"\n    )\n    \n    # Get comprehensive diagnostics\n    diagnostics = await integration.get_all_diagnostics()\n    \n    # Perform refactoring\n    result = await integration.perform_refactoring(\n        'rename',\n        file_path='example.py',\n        line=10,\n        character=5,\n        new_name='new_function_name'\n    )\n    \n    # Get enhanced completions\n    completions = await integration.get_completions_enhanced(\n        'example.py', 15, 10\n    )\n    \n    # Get symbol information\n    symbol_info = await integration.get_symbol_info_enhanced('MyClass')\n",
      "lines_of_code": 309,
      "complexity_score": 70,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/advanced_api.py",
      "file_name": "advanced_api.py",
      "functions": [],
      "classes": [],
      "imports": [],
      "constants": [],
      "decorators": [],
      "docstring": null,
      "lines_of_code": 0,
      "complexity_score": 0,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/integration.py",
      "file_name": "integration.py",
      "functions": [
        {
          "name": "add_serena_to_codebase",
          "line": 530,
          "args": [
            "codebase_class"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Add Serena methods to the Codebase class.\n\nThis function dynamically adds all Serena methods to the Codebase class\nso they can be called directly on codebase instances.",
          "returns": null
        },
        {
          "name": "__init__",
          "line": 25,
          "args": [
            "self",
            "codebase"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "_ensure_serena_initialized",
          "line": 30,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Ensure Serena is initialized and return the core instance.",
          "returns": "Optional[SerenaCore]"
        },
        {
          "name": "get_completions",
          "line": 48,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get code completions at the specified position.\n\nArgs:\n    file_path: Path to the file\n    line: Line number (0-based)\n    character: Character position (0-based)\n    **kwargs: Additional completion options\n\nReturns:\n    List of completion items with details\n\nExample:\n    >>> completions = codebase.get_completions(\"src/main.py\", 10, 5)\n    >>> for comp in completions:\n    ...     print(f\"{comp['label']}: {comp['detail']}\")",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "get_hover_info",
          "line": 71,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get hover information for symbol at position.\n\nArgs:\n    file_path: Path to the file\n    line: Line number (0-based)\n    character: Character position (0-based)\n\nReturns:\n    Hover information or None if not available\n\nExample:\n    >>> hover = codebase.get_hover_info(\"src/main.py\", 15, 10)\n    >>> if hover:\n    ...     print(f\"Symbol: {hover['symbolName']}\")\n    ...     print(f\"Type: {hover['symbolType']}\")\n    ...     print(f\"Documentation: {hover['documentation']}\")",
          "returns": "Optional[Dict[str, Any]]"
        },
        {
          "name": "get_signature_help",
          "line": 95,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get signature help for function call at position.\n\nArgs:\n    file_path: Path to the file\n    line: Line number (0-based)\n    character: Character position (0-based)\n\nReturns:\n    Signature help information or None if not available\n\nExample:\n    >>> sig = codebase.get_signature_help(\"src/main.py\", 20, 15)\n    >>> if sig:\n    ...     print(f\"Function: {sig['functionName']}\")\n    ...     for i, param in enumerate(sig['parameters']):\n    ...         active = \" <-- ACTIVE\" if i == sig['activeParameter'] else \"\"\n    ...         print(f\"  {param['name']}: {param['typeAnnotation']}{active}\")",
          "returns": "Optional[Dict[str, Any]]"
        },
        {
          "name": "rename_symbol",
          "line": 121,
          "args": [
            "self",
            "file_path",
            "line",
            "character",
            "new_name",
            "preview"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Rename symbol at position across all files.\n\nArgs:\n    file_path: Path to the file containing the symbol\n    line: Line number (0-based)\n    character: Character position (0-based)\n    new_name: New name for the symbol\n    preview: Whether to return preview without applying changes\n\nReturns:\n    Refactoring result with changes and conflicts\n\nExample:\n    >>> # Preview rename operation\n    >>> result = codebase.rename_symbol(\"src/main.py\", 10, 5, \"new_function_name\", preview=True)\n    >>> if result['success']:\n    ...     print(f\"Will rename in {len(result['changes'])} locations\")\n    ...     # Apply the rename\n    ...     result = codebase.rename_symbol(\"src/main.py\", 10, 5, \"new_function_name\")",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "extract_method",
          "line": 148,
          "args": [
            "self",
            "file_path",
            "start_line",
            "end_line",
            "method_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Extract selected code into a new method.\n\nArgs:\n    file_path: Path to the file\n    start_line: Start line of selection (0-based)\n    end_line: End line of selection (0-based)\n    method_name: Name for the new method\n    **kwargs: Additional options (target_class, visibility, etc.)\n\nReturns:\n    Refactoring result with changes and conflicts\n\nExample:\n    >>> result = codebase.extract_method(\"src/main.py\", 15, 25, \"calculate_total\")\n    >>> if result['success']:\n    ...     print(\"Method extracted successfully\")\n    ...     for change in result['changes']:\n    ...         print(f\"Modified: {change['file']}\")",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "extract_variable",
          "line": 174,
          "args": [
            "self",
            "file_path",
            "line",
            "character",
            "variable_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Extract expression into a variable.\n\nArgs:\n    file_path: Path to the file\n    line: Line number (0-based)\n    character: Character position (0-based)\n    variable_name: Name for the new variable\n    **kwargs: Additional options (scope, type_annotation, etc.)\n\nReturns:\n    Refactoring result with changes and conflicts\n\nExample:\n    >>> result = codebase.extract_variable(\"src/main.py\", 20, 10, \"temp_result\")\n    >>> if result['success']:\n    ...     print(\"Variable extracted successfully\")",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "get_code_actions",
          "line": 199,
          "args": [
            "self",
            "file_path",
            "start_line",
            "end_line",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get available code actions for the specified range.\n\nArgs:\n    file_path: Path to the file\n    start_line: Start line of range (0-based)\n    end_line: End line of range (0-based)\n    context: Optional context information\n\nReturns:\n    List of available code actions\n\nExample:\n    >>> actions = codebase.get_code_actions(\"src/main.py\", 10, 15)\n    >>> for action in actions:\n    ...     print(f\"{action['title']}: {action['description']}\")",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "apply_code_action",
          "line": 222,
          "args": [
            "self",
            "action_id",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Apply a specific code action.\n\nArgs:\n    action_id: ID of the action to apply\n    file_path: Path to the file\n    **kwargs: Additional action parameters\n\nReturns:\n    Result of applying the code action\n\nExample:\n    >>> result = codebase.apply_code_action(\"add_missing_import\", \"src/main.py\")\n    >>> if result['success']:\n    ...     print(\"Code action applied successfully\")",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "organize_imports",
          "line": 244,
          "args": [
            "self",
            "file_path",
            "remove_unused",
            "sort_imports"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Organize imports in the specified file.\n\nArgs:\n    file_path: Path to the file\n    remove_unused: Whether to remove unused imports\n    sort_imports: Whether to sort imports\n\nReturns:\n    Result of import organization\n\nExample:\n    >>> result = codebase.organize_imports(\"src/main.py\")\n    >>> if result['success']:\n    ...     print(\"Imports organized successfully\")",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "generate_boilerplate",
          "line": 267,
          "args": [
            "self",
            "template",
            "context",
            "target_file"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate boilerplate code from template.\n\nArgs:\n    template: Template name or pattern\n    context: Context variables for template\n    target_file: Optional target file path\n\nReturns:\n    Generated code and metadata\n\nExample:\n    >>> result = codebase.generate_boilerplate(\"class\", {\n    ...     \"class_name\": \"MyClass\",\n    ...     \"base_class\": \"BaseClass\"\n    ... })\n    >>> if result['success']:\n    ...     print(result['generated_code'])",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "generate_tests",
          "line": 292,
          "args": [
            "self",
            "target_function",
            "test_types"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate tests for the specified function.\n\nArgs:\n    target_function: Name of the function to test\n    test_types: Types of tests to generate (unit, integration, etc.)\n    **kwargs: Additional generation options\n\nReturns:\n    Generated test code and metadata\n\nExample:\n    >>> result = codebase.generate_tests(\"calculate_total\", [\"unit\", \"edge_cases\"])\n    >>> if result['success']:\n    ...     for test in result['generated_tests']:\n    ...         print(test)",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "generate_documentation",
          "line": 315,
          "args": [
            "self",
            "target",
            "format"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate documentation for the specified target.\n\nArgs:\n    target: Target symbol or file to document\n    format: Documentation format (docstring, markdown, etc.)\n    **kwargs: Additional generation options\n\nReturns:\n    Generated documentation and metadata\n\nExample:\n    >>> result = codebase.generate_documentation(\"MyClass.my_method\")\n    >>> if result['success']:\n    ...     print(result['generated_docs'])",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "semantic_search",
          "line": 338,
          "args": [
            "self",
            "query",
            "language"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Perform semantic search across the codebase.\n\nArgs:\n    query: Search query (natural language or code pattern)\n    language: Query language type (natural, code, regex)\n    **kwargs: Additional search options\n\nReturns:\n    List of search results with relevance scores\n\nExample:\n    >>> results = codebase.semantic_search(\"functions that handle authentication\")\n    >>> for result in results:\n    ...     print(f\"{result['file']}:{result['line']} - {result['match']}\")",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "find_code_patterns",
          "line": 360,
          "args": [
            "self",
            "pattern",
            "suggest_improvements"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find code patterns matching the specified pattern.\n\nArgs:\n    pattern: Code pattern to search for\n    suggest_improvements: Whether to suggest improvements\n\nReturns:\n    List of pattern matches with optional improvement suggestions\n\nExample:\n    >>> results = codebase.find_code_patterns(\"for.*in.*range\", suggest_improvements=True)\n    >>> for result in results:\n    ...     print(f\"Found pattern in {result['file']}\")\n    ...     if result['improvements']:\n    ...         print(f\"Suggestion: {result['improvements'][0]}\")",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "find_similar_code",
          "line": 383,
          "args": [
            "self",
            "reference_code",
            "similarity_threshold"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find code similar to the reference code.\n\nArgs:\n    reference_code: Reference code to find similarities to\n    similarity_threshold: Minimum similarity score (0.0 to 1.0)\n\nReturns:\n    List of similar code blocks with similarity scores\n\nExample:\n    >>> reference = \"def calculate_total(items): return sum(item.price for item in items)\"\n    >>> results = codebase.find_similar_code(reference, 0.7)\n    >>> for result in results:\n    ...     print(f\"Similar code in {result['file']} (similarity: {result['similarity']})\")",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "get_symbol_context",
          "line": 406,
          "args": [
            "self",
            "symbol",
            "include_dependencies"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get comprehensive context for a symbol.\n\nArgs:\n    symbol: Symbol name to analyze\n    include_dependencies: Whether to include dependency information\n    **kwargs: Additional context options\n\nReturns:\n    Comprehensive symbol context and relationships\n\nExample:\n    >>> context = codebase.get_symbol_context(\"MyClass\")\n    >>> print(f\"Symbol type: {context['type']}\")\n    >>> print(f\"Dependencies: {context['dependencies']}\")\n    >>> print(f\"Usages: {context['usages']}\")",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "analyze_symbol_impact",
          "line": 429,
          "args": [
            "self",
            "symbol",
            "change_type"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Analyze the impact of changing a symbol.\n\nArgs:\n    symbol: Symbol name to analyze\n    change_type: Type of change (rename, delete, modify, etc.)\n\nReturns:\n    Impact analysis with affected files and recommendations\n\nExample:\n    >>> impact = codebase.analyze_symbol_impact(\"calculate_total\", \"rename\")\n    >>> print(f\"Impact level: {impact['impact_level']}\")\n    >>> print(f\"Affected files: {impact['affected_files']}\")\n    >>> for rec in impact['recommendations']:\n    ...     print(f\"Recommendation: {rec}\")",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "enable_realtime_analysis",
          "line": 453,
          "args": [
            "self",
            "watch_patterns",
            "auto_refresh"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Enable real-time analysis with file watching.\n\nArgs:\n    watch_patterns: File patterns to watch (e.g., [\"*.py\", \"*.ts\"])\n    auto_refresh: Whether to automatically refresh analysis on changes\n\nReturns:\n    True if real-time analysis was enabled successfully\n\nExample:\n    >>> success = codebase.enable_realtime_analysis([\"*.py\", \"*.ts\"])\n    >>> if success:\n    ...     print(\"Real-time analysis enabled\")",
          "returns": "bool"
        },
        {
          "name": "disable_realtime_analysis",
          "line": 474,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Disable real-time analysis.\n\nReturns:\n    True if real-time analysis was disabled successfully\n\nExample:\n    >>> success = codebase.disable_realtime_analysis()\n    >>> if success:\n    ...     print(\"Real-time analysis disabled\")",
          "returns": "bool"
        },
        {
          "name": "get_serena_status",
          "line": 492,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get comprehensive status of Serena integration.\n\nReturns:\n    Status information for all Serena capabilities\n\nExample:\n    >>> status = codebase.get_serena_status()\n    >>> print(f\"Serena enabled: {status.get('enabled', False)}\")\n    >>> for capability, details in status.get('capability_details', {}).items():\n    ...     print(f\"{capability}: {details}\")",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "shutdown_serena",
          "line": 516,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Shutdown Serena integration and cleanup resources.\n\nExample:\n    >>> codebase.shutdown_serena()\n    >>> print(\"Serena integration shutdown\")",
          "returns": "None"
        },
        {
          "name": "_get_serena_integration",
          "line": 538,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get or create Serena integration instance.",
          "returns": "SerenaIntegration"
        },
        {
          "name": "create_method",
          "line": 560,
          "args": [
            "name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "method",
          "line": 561,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        }
      ],
      "classes": [
        {
          "name": "SerenaIntegration",
          "line": 18,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 25,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_ensure_serena_initialized",
              "line": 30,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_completions",
              "line": 48,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_hover_info",
              "line": 71,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_signature_help",
              "line": 95,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "rename_symbol",
              "line": 121,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "extract_method",
              "line": 148,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "extract_variable",
              "line": 174,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_code_actions",
              "line": 199,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "apply_code_action",
              "line": 222,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "organize_imports",
              "line": 244,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "generate_boilerplate",
              "line": 267,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "generate_tests",
              "line": 292,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "generate_documentation",
              "line": 315,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "semantic_search",
              "line": 338,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "find_code_patterns",
              "line": 360,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "find_similar_code",
              "line": 383,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_symbol_context",
              "line": 406,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "analyze_symbol_impact",
              "line": 429,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "enable_realtime_analysis",
              "line": 453,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "disable_realtime_analysis",
              "line": 474,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_serena_status",
              "line": 492,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "shutdown_serena",
              "line": 516,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Integration class that adds Serena capabilities to Codebase.\n\nThis class provides all Serena methods that will be added to the Codebase class."
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "TYPE_CHECKING",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "graph_sitter.shared.logging.get_logger",
          "name": "get_logger",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "core",
          "name": "SerenaCore",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "core",
          "name": "SerenaConfig",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.codebase",
          "name": "Codebase",
          "alias": null,
          "line": 11
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nSerena Integration for Codebase\n\nProvides integration methods to add Serena capabilities to the main Codebase class.\n",
      "lines_of_code": 571,
      "complexity_score": 89,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/advanced_context.py",
      "file_name": "advanced_context.py",
      "functions": [
        {
          "name": "__init__",
          "line": 73,
          "args": [
            "self",
            "codebase",
            "knowledge_integration"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "_get_file_object",
          "line": 350,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get file object by path.",
          "returns": "Optional[SourceFile]"
        },
        {
          "name": "_find_function",
          "line": 357,
          "args": [
            "self",
            "file_path",
            "function_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find function in file.",
          "returns": "Optional[Function]"
        },
        {
          "name": "_find_class",
          "line": 366,
          "args": [
            "self",
            "file_path",
            "class_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find class in file.",
          "returns": "Optional[Class]"
        },
        {
          "name": "_classify_line_type",
          "line": 375,
          "args": [
            "self",
            "line"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Classify the type of code line.",
          "returns": "str"
        },
        {
          "name": "_calculate_complexity",
          "line": 391,
          "args": [
            "self",
            "func"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Calculate function complexity.",
          "returns": "int"
        },
        {
          "name": "_extract_local_variables",
          "line": 406,
          "args": [
            "self",
            "func"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Extract local variables from function.",
          "returns": "List[str]"
        },
        {
          "name": "_analyze_control_flow",
          "line": 419,
          "args": [
            "self",
            "func"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Analyze control flow structures.",
          "returns": "Dict[str, int]"
        },
        {
          "name": "_analyze_class_methods",
          "line": 432,
          "args": [
            "self",
            "cls"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Analyze class methods.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_analyze_class_attributes",
          "line": 441,
          "args": [
            "self",
            "cls"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Analyze class attributes.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_detect_class_patterns",
          "line": 449,
          "args": [
            "self",
            "cls"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Detect design patterns in class.",
          "returns": "List[str]"
        },
        {
          "name": "_calculate_file_complexity",
          "line": 460,
          "args": [
            "self",
            "file_obj"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Calculate file complexity metrics.",
          "returns": "Dict[str, float]"
        },
        {
          "name": "_assess_file_quality",
          "line": 469,
          "args": [
            "self",
            "file_obj"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Assess file code quality.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_get_module_files",
          "line": 478,
          "args": [
            "self",
            "module_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get all files in a module.",
          "returns": "List[SourceFile]"
        },
        {
          "name": "_analyze_module_dependencies",
          "line": 482,
          "args": [
            "self",
            "files"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Analyze module dependencies.",
          "returns": "Dict[str, int]"
        },
        {
          "name": "_determine_architectural_role",
          "line": 496,
          "args": [
            "self",
            "module_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Determine the architectural role of a module.",
          "returns": "str"
        },
        {
          "name": "_detect_languages",
          "line": 512,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Detect programming languages in the project.",
          "returns": "List[str]"
        },
        {
          "name": "_detect_project_patterns",
          "line": 521,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Detect architectural patterns in the project.",
          "returns": "List[str]"
        },
        {
          "name": "_analyze_technology_stack",
          "line": 535,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Analyze the technology stack.",
          "returns": "Dict[str, List[str]]"
        },
        {
          "name": "_assess_project_health",
          "line": 554,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Assess overall project health.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_build_dependency_chain",
          "line": 565,
          "args": [
            "self",
            "func"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Build dependency chain for a function.",
          "returns": "List[str]"
        },
        {
          "name": "_assess_impact_severity",
          "line": 575,
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Assess the severity of error impact.",
          "returns": "str"
        },
        {
          "name": "_assess_change_risk",
          "line": 584,
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Assess the risk of making changes.",
          "returns": "str"
        },
        {
          "name": "_get_complexity_fix_suggestions",
          "line": 593,
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get fix suggestions for complexity issues.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "_get_security_fix_suggestions",
          "line": 610,
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get fix suggestions for security issues.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "_get_performance_fix_suggestions",
          "line": 627,
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get fix suggestions for performance issues.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "_get_contextual_suggestions",
          "line": 644,
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get contextual suggestions based on error context.",
          "returns": "List[Dict[str, Any]]"
        }
      ],
      "classes": [
        {
          "name": "ContextualError",
          "line": 25,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Enhanced error with comprehensive context."
        },
        {
          "name": "ContextualInsight",
          "line": 57,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Contextual insight about code elements."
        },
        {
          "name": "AdvancedContextEngine",
          "line": 67,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 73,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_file_object",
              "line": 350,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_function",
              "line": 357,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_class",
              "line": 366,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_classify_line_type",
              "line": 375,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_calculate_complexity",
              "line": 391,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_extract_local_variables",
              "line": 406,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_analyze_control_flow",
              "line": 419,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_analyze_class_methods",
              "line": 432,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_analyze_class_attributes",
              "line": 441,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_detect_class_patterns",
              "line": 449,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_calculate_file_complexity",
              "line": 460,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_assess_file_quality",
              "line": 469,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_module_files",
              "line": 478,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_analyze_module_dependencies",
              "line": 482,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_determine_architectural_role",
              "line": 496,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_detect_languages",
              "line": 512,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_detect_project_patterns",
              "line": 521,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_analyze_technology_stack",
              "line": 535,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_assess_project_health",
              "line": 554,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_build_dependency_chain",
              "line": 565,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_assess_impact_severity",
              "line": 575,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_assess_change_risk",
              "line": 584,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_complexity_fix_suggestions",
              "line": 593,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_security_fix_suggestions",
              "line": 610,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_performance_fix_suggestions",
              "line": 627,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_contextual_suggestions",
              "line": 644,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Advanced context engine that provides deep contextual understanding\nof code elements and their relationships."
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "asyncio",
          "alias": null,
          "line": 9
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "field",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Set",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Tuple",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "collections",
          "name": "defaultdict",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.codebase",
          "name": "Codebase",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.file",
          "name": "SourceFile",
          "alias": null,
          "line": 17
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.function",
          "name": "Function",
          "alias": null,
          "line": 18
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.class_definition",
          "name": "Class",
          "alias": null,
          "line": 19
        },
        {
          "type": "import",
          "module": "re",
          "alias": null,
          "line": 412
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nAdvanced Context Engine for Serena Integration\n\nThis module provides comprehensive context analysis and inclusion capabilities\nfor deep code understanding and intelligent error analysis.\n",
      "lines_of_code": 659,
      "complexity_score": 107,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/api.py",
      "file_name": "api.py",
      "functions": [
        {
          "name": "create_serena_api",
          "line": 318,
          "args": [
            "codebase",
            "enable_lsp"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Create a Serena API instance for a codebase.",
          "returns": "SerenaAPI"
        },
        {
          "name": "get_codebase_error_analysis",
          "line": 323,
          "args": [
            "codebase"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get comprehensive error analysis for a codebase.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "analyze_file_errors",
          "line": 339,
          "args": [
            "codebase",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get comprehensive error analysis for a specific file.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "find_function_relationships",
          "line": 361,
          "args": [
            "codebase",
            "function_name",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find all relationships for a function (callers, callees, related symbols).",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "__init__",
          "line": 39,
          "args": [
            "self",
            "codebase",
            "enable_lsp"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Initialize Serena API.\n\nArgs:\n    codebase: Graph-sitter codebase instance\n    enable_lsp: Whether to enable LSP integration for enhanced analysis",
          "returns": null
        },
        {
          "name": "get_all_errors",
          "line": 64,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get all errors in the codebase with basic information.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "get_all_errors_with_context",
          "line": 80,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get all errors with comprehensive context analysis.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "get_file_errors",
          "line": 104,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get errors for a specific file.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "get_error_context",
          "line": 120,
          "args": [
            "self",
            "file_path",
            "line"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get comprehensive context for an error at a specific location.",
          "returns": "Optional[Dict[str, Any]]"
        },
        {
          "name": "get_error_summary",
          "line": 144,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get comprehensive summary of all errors in the codebase.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "get_unused_parameters",
          "line": 148,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get all unused parameters across the codebase.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "get_wrong_parameters",
          "line": 168,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get all wrongly typed/set parameters across the codebase.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "get_function_callers",
          "line": 192,
          "args": [
            "self",
            "function_name",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get all functions that call a specific function.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "get_function_calls",
          "line": 213,
          "args": [
            "self",
            "function_name",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get all functions called by a specific function.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "get_file_dependencies",
          "line": 225,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get all dependencies for a specific file.",
          "returns": "List[str]"
        },
        {
          "name": "get_dependency_graph",
          "line": 231,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get dependency graph for the entire codebase.",
          "returns": "Dict[str, List[str]]"
        },
        {
          "name": "find_symbol_usage",
          "line": 243,
          "args": [
            "self",
            "symbol_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find all usages of a symbol across the codebase.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "get_related_symbols",
          "line": 264,
          "args": [
            "self",
            "symbol_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get symbols related to a given symbol.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "refresh_analysis",
          "line": 286,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Refresh all analysis data.",
          "returns": "None"
        },
        {
          "name": "get_status",
          "line": 290,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get status of all Serena components.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "shutdown",
          "line": 306,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Shutdown all Serena components.",
          "returns": "None"
        }
      ],
      "classes": [
        {
          "name": "SerenaAPI",
          "line": 32,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 39,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_all_errors",
              "line": 64,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_all_errors_with_context",
              "line": 80,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_file_errors",
              "line": 104,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_error_context",
              "line": 120,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_error_summary",
              "line": 144,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_unused_parameters",
              "line": 148,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_wrong_parameters",
              "line": 168,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_function_callers",
              "line": 192,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_function_calls",
              "line": 213,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_file_dependencies",
              "line": 225,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_dependency_graph",
              "line": 231,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "find_symbol_usage",
              "line": 243,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_related_symbols",
              "line": 264,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "refresh_analysis",
              "line": 286,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_status",
              "line": 290,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "shutdown",
              "line": 306,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Main API interface for Serena extension.\n\nProvides unified access to all error analysis and code intelligence capabilities."
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Union",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "graph_sitter.shared.logging.get_logger",
          "name": "get_logger",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.codebase",
          "name": "Codebase",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "error_analysis",
          "name": "ComprehensiveErrorAnalyzer",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "error_analysis",
          "name": "ErrorContext",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "error_analysis",
          "name": "ParameterIssue",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "error_analysis",
          "name": "FunctionCallInfo",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "error_analysis",
          "name": "analyze_codebase_errors",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "error_analysis",
          "name": "get_instant_error_context",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "error_analysis",
          "name": "get_all_codebase_errors_with_context",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "core",
          "name": "SerenaCore",
          "alias": null,
          "line": 22
        },
        {
          "type": "from_import",
          "module": "semantic_tools",
          "name": "SemanticTools",
          "alias": null,
          "line": 23
        },
        {
          "type": "from_import",
          "module": "mcp_bridge",
          "name": "SerenaMCPBridge",
          "alias": null,
          "line": 24
        },
        {
          "type": "from_import",
          "module": "mcp_bridge",
          "name": "MCPToolResult",
          "alias": null,
          "line": 24
        },
        {
          "type": "from_import",
          "module": "intelligence.code_intelligence",
          "name": "CodeIntelligence",
          "alias": null,
          "line": 25
        },
        {
          "type": "from_import",
          "module": "symbols.symbol_intelligence",
          "name": "SymbolIntelligence",
          "alias": null,
          "line": 26
        },
        {
          "type": "from_import",
          "module": "search.semantic_search",
          "name": "SemanticSearch",
          "alias": null,
          "line": 27
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nSerena Extension API\n\nMain API interface for accessing all Serena error analysis and code intelligence capabilities.\nProvides clean imports and easy access to comprehensive error analysis.\n",
      "lines_of_code": 374,
      "complexity_score": 84,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/knowledge_integration.py",
      "file_name": "knowledge_integration.py",
      "functions": [
        {
          "name": "get_extractor_type",
          "line": 106,
          "args": [
            "self"
          ],
          "decorators": [
            "abstractmethod"
          ],
          "is_async": false,
          "docstring": "Get the type of this extractor.",
          "returns": "str"
        },
        {
          "name": "__init__",
          "line": 114,
          "args": [
            "self",
            "semantic_tools"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "get_extractor_type",
          "line": 188,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "str"
        },
        {
          "name": "__init__",
          "line": 195,
          "args": [
            "self",
            "code_intelligence"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "get_extractor_type",
          "line": 259,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "str"
        },
        {
          "name": "__init__",
          "line": 266,
          "args": [
            "self",
            "symbol_intelligence"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "get_extractor_type",
          "line": 329,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "str"
        },
        {
          "name": "__init__",
          "line": 339,
          "args": [
            "self",
            "codebase",
            "enable_serena",
            "enable_caching",
            "max_workers"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "_initialize_serena_components",
          "line": 376,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Initialize Serena MCP components if available.",
          "returns": null
        },
        {
          "name": "_get_file_object",
          "line": 494,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get the SourceFile object for a given path.",
          "returns": "Optional[SourceFile]"
        },
        {
          "name": "_calculate_cyclomatic_complexity",
          "line": 516,
          "args": [
            "self",
            "func"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Calculate cyclomatic complexity for a function.",
          "returns": "int"
        },
        {
          "name": "_find_function_node_id",
          "line": 719,
          "args": [
            "self",
            "function_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find the node ID for a function by name.",
          "returns": "Optional[str]"
        },
        {
          "name": "shutdown",
          "line": 777,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Shutdown the knowledge integration system.",
          "returns": null
        }
      ],
      "classes": [
        {
          "name": "KnowledgeContext",
          "line": 45,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Comprehensive context for code knowledge extraction."
        },
        {
          "name": "KnowledgeGraph",
          "line": 61,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Knowledge graph representation of codebase understanding."
        },
        {
          "name": "AdvancedErrorContext",
          "line": 71,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Advanced error context with deep semantic understanding."
        },
        {
          "name": "KnowledgeExtractor",
          "line": 97,
          "bases": [
            "ABC"
          ],
          "decorators": [],
          "methods": [
            {
              "name": "get_extractor_type",
              "line": 106,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Abstract base class for knowledge extractors."
        },
        {
          "name": "SemanticKnowledgeExtractor",
          "line": 111,
          "bases": [
            "KnowledgeExtractor"
          ],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 114,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_extractor_type",
              "line": 188,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Extract semantic knowledge using Serena's capabilities."
        },
        {
          "name": "ArchitecturalKnowledgeExtractor",
          "line": 192,
          "bases": [
            "KnowledgeExtractor"
          ],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 195,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_extractor_type",
              "line": 259,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Extract architectural knowledge and patterns."
        },
        {
          "name": "DependencyKnowledgeExtractor",
          "line": 263,
          "bases": [
            "KnowledgeExtractor"
          ],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 266,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_extractor_type",
              "line": 329,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Extract dependency knowledge and impact analysis."
        },
        {
          "name": "AdvancedKnowledgeIntegration",
          "line": 333,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 339,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_initialize_serena_components",
              "line": 376,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_file_object",
              "line": 494,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_calculate_cyclomatic_complexity",
              "line": 516,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_function_node_id",
              "line": 719,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "shutdown",
              "line": 777,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Advanced knowledge integration system that combines graph-sitter analysis\nwith Serena's codebase knowledge features."
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "asyncio",
          "alias": null,
          "line": 9
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 10
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 11
        },
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "abc",
          "name": "ABC",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "abc",
          "name": "abstractmethod",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "field",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Set",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Tuple",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Union",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "collections",
          "name": "defaultdict",
          "alias": null,
          "line": 17
        },
        {
          "type": "from_import",
          "module": "collections",
          "name": "deque",
          "alias": null,
          "line": 17
        },
        {
          "type": "from_import",
          "module": "concurrent.futures",
          "name": "ThreadPoolExecutor",
          "alias": null,
          "line": 18
        },
        {
          "type": "from_import",
          "module": "concurrent.futures",
          "name": "as_completed",
          "alias": null,
          "line": 18
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.codebase",
          "name": "Codebase",
          "alias": null,
          "line": 20
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.file",
          "name": "SourceFile",
          "alias": null,
          "line": 21
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.function",
          "name": "Function",
          "alias": null,
          "line": 22
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.class_definition",
          "name": "Class",
          "alias": null,
          "line": 23
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.symbol",
          "name": "Symbol",
          "alias": null,
          "line": 24
        },
        {
          "type": "from_import",
          "module": "mcp_bridge",
          "name": "SerenaMCPBridge",
          "alias": null,
          "line": 28
        },
        {
          "type": "from_import",
          "module": "semantic_tools",
          "name": "SerenaSemanticTools",
          "alias": null,
          "line": 29
        },
        {
          "type": "from_import",
          "module": "code_intelligence",
          "name": "SerenaCodeIntelligence",
          "alias": null,
          "line": 30
        },
        {
          "type": "from_import",
          "module": "symbol_intelligence",
          "name": "SerenaSymbolIntelligence",
          "alias": null,
          "line": 31
        },
        {
          "type": "from_import",
          "module": "semantic_search",
          "name": "SerenaSemanticSearch",
          "alias": null,
          "line": 32
        }
      ],
      "constants": [],
      "decorators": [
        "abstractmethod"
      ],
      "docstring": "\nAdvanced Serena Knowledge Integration for Graph-Sitter\n\nThis module provides comprehensive integration with Serena's codebase knowledge features,\nenabling advanced error analysis, context inclusion, and semantic understanding.\n",
      "lines_of_code": 791,
      "complexity_score": 93,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/mcp_bridge.py",
      "file_name": "mcp_bridge.py",
      "functions": [
        {
          "name": "__str__",
          "line": 33,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "str"
        },
        {
          "name": "__init__",
          "line": 43,
          "args": [
            "self",
            "repo_path",
            "serena_command"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "_get_default_serena_command",
          "line": 55,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get the default command to run Serena MCP server.",
          "returns": "str"
        },
        {
          "name": "_setup_local_serena",
          "line": 65,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Set up local Serena installation if uvx is not available.",
          "returns": "str"
        },
        {
          "name": "_initialize_mcp_server",
          "line": 84,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Initialize the MCP server process.",
          "returns": "None"
        },
        {
          "name": "_initialize_mcp_protocol",
          "line": 122,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Initialize the MCP protocol with handshake.",
          "returns": "None"
        },
        {
          "name": "_discover_tools",
          "line": 156,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Discover available tools from the MCP server.",
          "returns": "None"
        },
        {
          "name": "_get_next_id",
          "line": 173,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get next message ID.",
          "returns": "int"
        },
        {
          "name": "_send_request",
          "line": 178,
          "args": [
            "self",
            "request"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Send a request to the MCP server and wait for response.",
          "returns": "Optional[Dict[str, Any]]"
        },
        {
          "name": "_send_notification",
          "line": 200,
          "args": [
            "self",
            "notification"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Send a notification to the MCP server (no response expected).",
          "returns": "None"
        },
        {
          "name": "call_tool",
          "line": 212,
          "args": [
            "self",
            "tool_name",
            "arguments"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Call a tool on the MCP server.",
          "returns": "MCPToolResult"
        },
        {
          "name": "get_available_tools",
          "line": 272,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get list of available tools.",
          "returns": "Dict[str, Dict[str, Any]]"
        },
        {
          "name": "is_tool_available",
          "line": 276,
          "args": [
            "self",
            "tool_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check if a specific tool is available.",
          "returns": "bool"
        },
        {
          "name": "shutdown",
          "line": 280,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Shutdown the MCP server.",
          "returns": "None"
        },
        {
          "name": "__del__",
          "line": 309,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Cleanup when bridge is destroyed.",
          "returns": null
        },
        {
          "name": "__init__",
          "line": 318,
          "args": [
            "self",
            "file_path",
            "line",
            "character",
            "message",
            "severity",
            "source",
            "code",
            "end_line",
            "end_character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "is_error",
          "line": 333,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": null,
          "returns": "bool"
        },
        {
          "name": "is_warning",
          "line": 337,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": null,
          "returns": "bool"
        },
        {
          "name": "is_hint",
          "line": 341,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": null,
          "returns": "bool"
        },
        {
          "name": "__str__",
          "line": 344,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "str"
        }
      ],
      "classes": [
        {
          "name": "MCPToolResult",
          "line": 26,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "__str__",
              "line": 33,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Result from an MCP tool invocation."
        },
        {
          "name": "SerenaMCPBridge",
          "line": 40,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 43,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_default_serena_command",
              "line": 55,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_setup_local_serena",
              "line": 65,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_initialize_mcp_server",
              "line": 84,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_initialize_mcp_protocol",
              "line": 122,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_discover_tools",
              "line": 156,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_next_id",
              "line": 173,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_send_request",
              "line": 178,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_send_notification",
              "line": 200,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "call_tool",
              "line": 212,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_available_tools",
              "line": 272,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "is_tool_available",
              "line": 276,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "shutdown",
              "line": 280,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "__del__",
              "line": 309,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Bridge between Serena's MCP server and graph-sitter."
        },
        {
          "name": "ErrorInfo",
          "line": 315,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 318,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "is_error",
              "line": 333,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "is_warning",
              "line": 337,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "is_hint",
              "line": 341,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "__str__",
              "line": 344,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Compatibility class for LSP ErrorInfo."
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "asyncio",
          "alias": null,
          "line": 8
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 9
        },
        {
          "type": "import",
          "module": "subprocess",
          "alias": null,
          "line": 10
        },
        {
          "type": "import",
          "module": "threading",
          "alias": null,
          "line": 11
        },
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Union",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Callable",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "enum",
          "name": "IntEnum",
          "alias": null,
          "line": 16
        },
        {
          "type": "import",
          "module": "tempfile",
          "alias": null,
          "line": 17
        },
        {
          "type": "import",
          "module": "os",
          "alias": null,
          "line": 18
        },
        {
          "type": "from_import",
          "module": "graph_sitter.shared.logging.get_logger",
          "name": "get_logger",
          "alias": null,
          "line": 20
        }
      ],
      "constants": [],
      "decorators": [
        "property"
      ],
      "docstring": "\nSerena MCP Bridge for Graph-Sitter\n\nThis module provides a bridge between Serena's MCP server implementation\nand graph-sitter's codebase analysis system.\n",
      "lines_of_code": 350,
      "complexity_score": 86,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/symbols/__init__.py",
      "file_name": "__init__.py",
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "symbol_intelligence",
          "name": "SymbolIntelligence",
          "alias": null,
          "line": 8
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nSymbol Intelligence System for Serena LSP Integration\n\nThis module provides advanced symbol analysis, context understanding,\nand impact analysis capabilities.\n",
      "lines_of_code": 11,
      "complexity_score": 1,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/symbols/symbol_intelligence.py",
      "file_name": "symbol_intelligence.py",
      "functions": [
        {
          "name": "__init__",
          "line": 30,
          "args": [
            "self",
            "codebase_path",
            "serena_core"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "get_index_stats",
          "line": 307,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get statistics about the symbol index.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_determine_scope",
          "line": 422,
          "args": [
            "self",
            "lines",
            "line_index"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Determine the scope of a symbol based on indentation.",
          "returns": "str"
        },
        {
          "name": "_find_symbol_references_in_content",
          "line": 447,
          "args": [
            "self",
            "symbol_name",
            "content",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find references to a symbol in file content.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "_find_symbol_usages_in_content",
          "line": 471,
          "args": [
            "self",
            "symbol_name",
            "content",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find usages of a symbol in file content.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "_find_reverse_dependencies",
          "line": 547,
          "args": [
            "self",
            "symbol"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find symbols that depend on the given symbol.",
          "returns": "Set[str]"
        },
        {
          "name": "_calculate_impact_level",
          "line": 557,
          "args": [
            "self",
            "affected_files_count",
            "affected_symbols_count",
            "symbol_type"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Calculate the impact level of a symbol change.",
          "returns": "str"
        },
        {
          "name": "_generate_impact_recommendations",
          "line": 573,
          "args": [
            "self",
            "symbol_info",
            "change_type",
            "impact_level"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate recommendations based on impact analysis.",
          "returns": "List[str]"
        },
        {
          "name": "_identify_risk_factors",
          "line": 597,
          "args": [
            "self",
            "symbol_info",
            "change_type",
            "affected_files_count"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Identify risk factors for the symbol change.",
          "returns": "List[str]"
        },
        {
          "name": "_classify_usage_type",
          "line": 669,
          "args": [
            "self",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Classify the type of symbol usage.",
          "returns": "str"
        },
        {
          "name": "_categorize_usage_contexts",
          "line": 682,
          "args": [
            "self",
            "patterns"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Categorize usage contexts.",
          "returns": "Dict[str, int]"
        },
        {
          "name": "_identify_common_patterns",
          "line": 690,
          "args": [
            "self",
            "patterns"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Identify common usage patterns.",
          "returns": "List[str]"
        },
        {
          "name": "_identify_anti_patterns",
          "line": 695,
          "args": [
            "self",
            "patterns"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Identify anti-patterns in usage.",
          "returns": "List[str]"
        },
        {
          "name": "_get_symbol_type_distribution",
          "line": 700,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get distribution of symbol types.",
          "returns": "Dict[str, int]"
        },
        {
          "name": "_get_top_referenced_symbols",
          "line": 708,
          "args": [
            "self",
            "limit"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get top referenced symbols.",
          "returns": "List[Dict[str, Any]]"
        }
      ],
      "classes": [
        {
          "name": "SymbolIntelligence",
          "line": 18,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 30,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_index_stats",
              "line": 307,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_determine_scope",
              "line": 422,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_symbol_references_in_content",
              "line": 447,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_symbol_usages_in_content",
              "line": 471,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_reverse_dependencies",
              "line": 547,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_calculate_impact_level",
              "line": 557,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_generate_impact_recommendations",
              "line": 573,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_identify_risk_factors",
              "line": 597,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_classify_usage_type",
              "line": 669,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_categorize_usage_contexts",
              "line": 682,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_identify_common_patterns",
              "line": 690,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_identify_anti_patterns",
              "line": 695,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_symbol_type_distribution",
              "line": 700,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_top_referenced_symbols",
              "line": 708,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Provides advanced symbol intelligence and analysis.\n\nFeatures:\n- Symbol discovery and indexing\n- Context-aware symbol analysis\n- Dependency tracking and impact analysis\n- Symbol relationship mapping\n- Usage pattern analysis"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "asyncio",
          "alias": null,
          "line": 7
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Set",
          "alias": null,
          "line": 10
        },
        {
          "type": "import",
          "module": "re",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "SymbolInfo",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "AnalysisContext",
          "alias": null,
          "line": 13
        },
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 340
        },
        {
          "type": "import",
          "module": "fnmatch",
          "alias": null,
          "line": 248
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nSymbol Intelligence\n\nProvides advanced symbol analysis, context understanding, and impact analysis.\n",
      "lines_of_code": 721,
      "complexity_score": 61,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/intelligence/hover.py",
      "file_name": "hover.py",
      "functions": [
        {
          "name": "to_dict",
          "line": 36,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Convert to dictionary representation.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "__init__",
          "line": 58,
          "args": [
            "self",
            "codebase",
            "mcp_bridge",
            "config"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "get_hover_info",
          "line": 73,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get hover information for symbol at position.\n\nArgs:\n    file_path: Path to the file\n    line: Line number (0-based)\n    character: Character position (0-based)\n\nReturns:\n    Hover information or None if not available",
          "returns": "Optional[Dict[str, Any]]"
        },
        {
          "name": "_find_symbol_at_position",
          "line": 112,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find symbol at the specified position.",
          "returns": "Optional[Symbol]"
        },
        {
          "name": "_get_word_at_position",
          "line": 143,
          "args": [
            "self",
            "content",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Extract word at the specified position.",
          "returns": "Optional[str]"
        },
        {
          "name": "_is_position_in_symbol",
          "line": 173,
          "args": [
            "self",
            "symbol",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check if position is within symbol's definition range.",
          "returns": "bool"
        },
        {
          "name": "_find_imported_symbol",
          "line": 185,
          "args": [
            "self",
            "file_obj",
            "symbol_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find symbol in imported modules.",
          "returns": "Optional[Symbol]"
        },
        {
          "name": "_find_global_symbol",
          "line": 198,
          "args": [
            "self",
            "symbol_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find symbol in global codebase.",
          "returns": "Optional[Symbol]"
        },
        {
          "name": "_build_hover_info",
          "line": 212,
          "args": [
            "self",
            "symbol",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Build comprehensive hover information for a symbol.",
          "returns": "Optional[HoverInfo]"
        },
        {
          "name": "_get_symbol_type",
          "line": 256,
          "args": [
            "self",
            "symbol"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get the type of symbol (function, class, variable, etc.).",
          "returns": "str"
        },
        {
          "name": "_get_symbol_signature",
          "line": 275,
          "args": [
            "self",
            "symbol"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get the signature of a symbol.",
          "returns": "Optional[str]"
        },
        {
          "name": "_get_symbol_documentation",
          "line": 318,
          "args": [
            "self",
            "symbol"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get documentation for a symbol.",
          "returns": "Optional[str]"
        },
        {
          "name": "_get_symbol_type_info",
          "line": 353,
          "args": [
            "self",
            "symbol"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get type information for a symbol.",
          "returns": "Optional[str]"
        },
        {
          "name": "_get_definition_location",
          "line": 380,
          "args": [
            "self",
            "symbol"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get the definition location of a symbol.",
          "returns": "Optional[Dict[str, Any]]"
        },
        {
          "name": "_get_symbol_examples",
          "line": 400,
          "args": [
            "self",
            "symbol"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get usage examples for a symbol.",
          "returns": "Optional[List[str]]"
        },
        {
          "name": "_get_related_symbols",
          "line": 424,
          "args": [
            "self",
            "symbol"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get symbols related to this symbol.",
          "returns": "Optional[List[str]]"
        },
        {
          "name": "_determine_hover_source",
          "line": 447,
          "args": [
            "self",
            "symbol",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Determine the source of hover information.",
          "returns": "str"
        },
        {
          "name": "_extract_docstring_from_body",
          "line": 460,
          "args": [
            "self",
            "body"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Extract docstring from function/class body.",
          "returns": "Optional[str]"
        },
        {
          "name": "_clean_documentation",
          "line": 496,
          "args": [
            "self",
            "doc"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Clean and format documentation text.",
          "returns": "str"
        },
        {
          "name": "_get_cached_hover",
          "line": 514,
          "args": [
            "self",
            "cache_key"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get cached hover information if still valid.",
          "returns": "Optional[Dict[str, Any]]"
        },
        {
          "name": "_cache_hover",
          "line": 525,
          "args": [
            "self",
            "cache_key",
            "hover_info"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Cache hover information.",
          "returns": "None"
        },
        {
          "name": "invalidate_cache",
          "line": 541,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Invalidate hover cache.",
          "returns": "None"
        },
        {
          "name": "get_status",
          "line": 557,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get status information.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "shutdown",
          "line": 570,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Shutdown the hover provider.",
          "returns": "None"
        }
      ],
      "classes": [
        {
          "name": "HoverInfo",
          "line": 24,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "to_dict",
              "line": 36,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Represents hover information for a symbol."
        },
        {
          "name": "HoverProvider",
          "line": 51,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 58,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_hover_info",
              "line": 73,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_symbol_at_position",
              "line": 112,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_word_at_position",
              "line": 143,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_is_position_in_symbol",
              "line": 173,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_imported_symbol",
              "line": 185,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_global_symbol",
              "line": 198,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_build_hover_info",
              "line": 212,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_symbol_type",
              "line": 256,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_symbol_signature",
              "line": 275,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_symbol_documentation",
              "line": 318,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_symbol_type_info",
              "line": 353,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_definition_location",
              "line": 380,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_symbol_examples",
              "line": 400,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_related_symbols",
              "line": 424,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_determine_hover_source",
              "line": 447,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_extract_docstring_from_body",
              "line": 460,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_clean_documentation",
              "line": 496,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_cached_hover",
              "line": 514,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_cache_hover",
              "line": 525,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "invalidate_cache",
              "line": 541,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_status",
              "line": 557,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "shutdown",
              "line": 570,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Provides rich hover information for symbols.\n\nCombines LSP hover data with semantic analysis and documentation extraction."
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 8
        },
        {
          "type": "import",
          "module": "re",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Tuple",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null,
          "line": 12
        },
        {
          "type": "import",
          "module": "threading",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "graph_sitter.shared.logging.get_logger",
          "name": "get_logger",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.codebase",
          "name": "Codebase",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "mcp_bridge",
          "name": "SerenaMCPBridge",
          "alias": null,
          "line": 17
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.symbol",
          "name": "Symbol",
          "alias": null,
          "line": 18
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nHover Provider\n\nProvides rich hover information for symbols including documentation,\ntype information, and contextual details.\n",
      "lines_of_code": 575,
      "complexity_score": 92,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/intelligence/code_intelligence.py",
      "file_name": "code_intelligence.py",
      "functions": [
        {
          "name": "__init__",
          "line": 56,
          "args": [
            "self",
            "codebase",
            "bridge",
            "config"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "get_completions",
          "line": 86,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get code completions at the specified position.\n\nArgs:\n    file_path: Path to the file\n    line: Line number (0-based)\n    character: Character position (0-based)\n    **kwargs: Additional completion options\n\nReturns:\n    List of completion items with details",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "get_hover_info",
          "line": 122,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get hover information for symbol at position.\n\nArgs:\n    file_path: Path to the file\n    line: Line number (0-based)\n    character: Character position (0-based)\n\nReturns:\n    Hover information or None if not available",
          "returns": "Optional[Dict[str, Any]]"
        },
        {
          "name": "get_signature_help",
          "line": 155,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get signature help for function call at position.\n\nArgs:\n    file_path: Path to the file\n    line: Line number (0-based)\n    character: Character position (0-based)\n\nReturns:\n    Signature help information or None if not available",
          "returns": "Optional[Dict[str, Any]]"
        },
        {
          "name": "get_all_intelligence",
          "line": 188,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get all intelligence information concurrently.\n\nArgs:\n    file_path: Path to the file\n    line: Line number (0-based)\n    character: Character position (0-based)\n\nReturns:\n    Dictionary with completions, hover, and signature information",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "invalidate_cache",
          "line": 221,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Invalidate intelligence cache.\n\nArgs:\n    file_path: Specific file to invalidate, or None for all files",
          "returns": "None"
        },
        {
          "name": "warm_cache",
          "line": 234,
          "args": [
            "self",
            "file_paths"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Pre-warm intelligence cache for specified files.\n\nArgs:\n    file_paths: List of file paths to warm",
          "returns": "None"
        },
        {
          "name": "_warm_file_cache",
          "line": 260,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Warm cache for a specific file.",
          "returns": "None"
        },
        {
          "name": "_validate_position",
          "line": 277,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Validate file position parameters.",
          "returns": "bool"
        },
        {
          "name": "_update_stats",
          "line": 289,
          "args": [
            "self",
            "operation",
            "elapsed_time",
            "cache_hit"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Update performance statistics.",
          "returns": "None"
        },
        {
          "name": "get_performance_stats",
          "line": 297,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get performance statistics.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "get_status",
          "line": 315,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get status information.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "get_symbol_info",
          "line": 333,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get detailed information about a symbol at the specified position.",
          "returns": "Optional[SymbolInfo]"
        },
        {
          "name": "semantic_search",
          "line": 390,
          "args": [
            "self",
            "query",
            "max_results"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Perform semantic search across the codebase.",
          "returns": "List[SemanticSearchResult]"
        },
        {
          "name": "generate_code",
          "line": 431,
          "args": [
            "self",
            "prompt",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate code based on prompt and context.",
          "returns": "CodeGenerationResult"
        },
        {
          "name": "_find_symbol_at_position",
          "line": 467,
          "args": [
            "self",
            "file",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find symbol at the specified position in the file.",
          "returns": null
        },
        {
          "name": "_get_symbol_kind",
          "line": 522,
          "args": [
            "self",
            "symbol"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get the kind/type of symbol.",
          "returns": "str"
        },
        {
          "name": "_get_symbol_documentation",
          "line": 531,
          "args": [
            "self",
            "symbol"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Extract documentation for a symbol.",
          "returns": "str"
        },
        {
          "name": "_get_symbol_signature",
          "line": 542,
          "args": [
            "self",
            "symbol"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get the signature of a symbol.",
          "returns": "str"
        },
        {
          "name": "_calculate_relevance_score",
          "line": 553,
          "args": [
            "self",
            "symbol",
            "query"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Calculate relevance score for semantic search.",
          "returns": "float"
        },
        {
          "name": "_get_context_snippet",
          "line": 581,
          "args": [
            "self",
            "symbol"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get a context snippet for the symbol.",
          "returns": "str"
        },
        {
          "name": "_generate_code_from_prompt",
          "line": 592,
          "args": [
            "self",
            "prompt",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate code from prompt - basic implementation.",
          "returns": "str"
        },
        {
          "name": "_extract_needed_imports",
          "line": 613,
          "args": [
            "self",
            "code"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Extract imports that might be needed for the generated code.",
          "returns": "List[str]"
        },
        {
          "name": "shutdown",
          "line": 627,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Shutdown the intelligence engine.",
          "returns": "None"
        }
      ],
      "classes": [
        {
          "name": "IntelligenceConfig",
          "line": 36,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Configuration for code intelligence features."
        },
        {
          "name": "CodeIntelligence",
          "line": 48,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 56,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_completions",
              "line": 86,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_hover_info",
              "line": 122,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_signature_help",
              "line": 155,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_all_intelligence",
              "line": 188,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "invalidate_cache",
              "line": 221,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "warm_cache",
              "line": 234,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_warm_file_cache",
              "line": 260,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_validate_position",
              "line": 277,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_update_stats",
              "line": 289,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_performance_stats",
              "line": 297,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_status",
              "line": 315,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_symbol_info",
              "line": 333,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "semantic_search",
              "line": 390,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "generate_code",
              "line": 431,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_symbol_at_position",
              "line": 467,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_symbol_kind",
              "line": 522,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_symbol_documentation",
              "line": 531,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_symbol_signature",
              "line": 542,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_calculate_relevance_score",
              "line": 553,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_context_snippet",
              "line": 581,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_generate_code_from_prompt",
              "line": 592,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_extract_needed_imports",
              "line": 613,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "shutdown",
              "line": 627,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Real-time code intelligence engine.\n\nProvides completions, hover information, and signature help\nwith caching and performance optimization."
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Union",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "concurrent.futures",
          "name": "ThreadPoolExecutor",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "concurrent.futures",
          "name": "as_completed",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "concurrent.futures",
          "name": "Future",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "graph_sitter.shared.logging.get_logger",
          "name": "get_logger",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.codebase",
          "name": "Codebase",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "mcp_bridge",
          "name": "SerenaMCPBridge",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "serena_types",
          "name": "CompletionContext",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "serena_types",
          "name": "HoverContext",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "serena_types",
          "name": "SignatureContext",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "serena_types",
          "name": "SymbolInfo",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "serena_types",
          "name": "SemanticSearchResult",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "serena_types",
          "name": "CodeGenerationResult",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "completions",
          "name": "CompletionProvider",
          "alias": null,
          "line": 28
        },
        {
          "type": "from_import",
          "module": "hover",
          "name": "HoverProvider",
          "alias": null,
          "line": 29
        },
        {
          "type": "from_import",
          "module": "signatures",
          "name": "SignatureProvider",
          "alias": null,
          "line": 30
        },
        {
          "type": "from_import",
          "module": "graph_sitter.extensions.lsp.serena_bridge",
          "name": "SerenaLSPBridge",
          "alias": null,
          "line": 23
        }
      ],
      "constants": [
        {
          "name": "LSP_BRIDGE_AVAILABLE",
          "line": 24,
          "value": "True"
        },
        {
          "name": "LSP_BRIDGE_AVAILABLE",
          "line": 26,
          "value": "False"
        }
      ],
      "decorators": [],
      "docstring": "\nCode Intelligence Engine\n\nMain orchestrator for real-time code intelligence features.\n",
      "lines_of_code": 639,
      "complexity_score": 102,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/intelligence/signatures.py",
      "file_name": "signatures.py",
      "functions": [
        {
          "name": "to_dict",
          "line": 31,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Convert to dictionary representation.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "to_dict",
          "line": 51,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Convert to dictionary representation.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "__init__",
          "line": 69,
          "args": [
            "self",
            "codebase",
            "mcp_bridge",
            "config"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "get_signature_help",
          "line": 81,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get signature help for function call at position.\n\nArgs:\n    file_path: Path to the file\n    line: Line number (0-based)\n    character: Character position (0-based)\n\nReturns:\n    Signature help information or None if not available",
          "returns": "Optional[Dict[str, Any]]"
        },
        {
          "name": "_analyze_function_call",
          "line": 125,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Analyze the function call context at the given position.",
          "returns": "Optional[Dict[str, Any]]"
        },
        {
          "name": "_find_function_call_info",
          "line": 150,
          "args": [
            "self",
            "current_line",
            "character",
            "all_lines",
            "line_num"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find function call information from the current position.",
          "returns": "Optional[Dict[str, Any]]"
        },
        {
          "name": "_extract_function_name",
          "line": 212,
          "args": [
            "self",
            "line",
            "paren_pos"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Extract function name before the opening parenthesis.",
          "returns": "Optional[str]"
        },
        {
          "name": "_count_parameters",
          "line": 243,
          "args": [
            "self",
            "line",
            "start_pos",
            "end_pos"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Count the current parameter position in the function call.",
          "returns": "int"
        },
        {
          "name": "_find_multiline_function_call",
          "line": 286,
          "args": [
            "self",
            "lines",
            "current_line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find function call that spans multiple lines.",
          "returns": "Optional[Dict[str, Any]]"
        },
        {
          "name": "_count_multiline_parameters",
          "line": 318,
          "args": [
            "self",
            "lines",
            "start_line",
            "start_char",
            "end_line",
            "end_char"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Count parameters across multiple lines.",
          "returns": "int"
        },
        {
          "name": "_find_function_definition",
          "line": 377,
          "args": [
            "self",
            "function_name",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find the definition of the function.",
          "returns": "Optional[Symbol]"
        },
        {
          "name": "_find_imported_function",
          "line": 405,
          "args": [
            "self",
            "file_obj",
            "function_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find function in imported modules.",
          "returns": "Optional[Symbol]"
        },
        {
          "name": "_build_signature_info",
          "line": 416,
          "args": [
            "self",
            "function_symbol",
            "call_context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Build signature information from function symbol.",
          "returns": "Optional[SignatureInfo]"
        },
        {
          "name": "_get_parameter_documentation",
          "line": 455,
          "args": [
            "self",
            "param",
            "function_symbol"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get documentation for a specific parameter.",
          "returns": "Optional[str]"
        },
        {
          "name": "_get_function_documentation",
          "line": 481,
          "args": [
            "self",
            "function_symbol"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get documentation for the function.",
          "returns": "Optional[str]"
        },
        {
          "name": "_get_cached_signature",
          "line": 504,
          "args": [
            "self",
            "cache_key"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get cached signature information if still valid.",
          "returns": "Optional[Dict[str, Any]]"
        },
        {
          "name": "_cache_signature",
          "line": 515,
          "args": [
            "self",
            "cache_key",
            "signature_info"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Cache signature information.",
          "returns": "None"
        },
        {
          "name": "invalidate_cache",
          "line": 531,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Invalidate signature cache.",
          "returns": "None"
        },
        {
          "name": "get_status",
          "line": 543,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get status information.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "shutdown",
          "line": 555,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Shutdown the signature provider.",
          "returns": "None"
        }
      ],
      "classes": [
        {
          "name": "ParameterInfo",
          "line": 23,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "to_dict",
              "line": 31,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Information about a function parameter."
        },
        {
          "name": "SignatureInfo",
          "line": 43,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "to_dict",
              "line": 51,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Information about a function signature."
        },
        {
          "name": "SignatureProvider",
          "line": 62,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 69,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_signature_help",
              "line": 81,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_analyze_function_call",
              "line": 125,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_function_call_info",
              "line": 150,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_extract_function_name",
              "line": 212,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_count_parameters",
              "line": 243,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_multiline_function_call",
              "line": 286,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_count_multiline_parameters",
              "line": 318,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_function_definition",
              "line": 377,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_imported_function",
              "line": 405,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_build_signature_info",
              "line": 416,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_parameter_documentation",
              "line": 455,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_function_documentation",
              "line": 481,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_cached_signature",
              "line": 504,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_cache_signature",
              "line": 515,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "invalidate_cache",
              "line": 531,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_status",
              "line": 543,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "shutdown",
              "line": 555,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Provides function signature help.\n\nAnalyzes function calls and provides parameter information and documentation."
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 7
        },
        {
          "type": "import",
          "module": "re",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Tuple",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null,
          "line": 11
        },
        {
          "type": "import",
          "module": "threading",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "graph_sitter.shared.logging.get_logger",
          "name": "get_logger",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.codebase",
          "name": "Codebase",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "mcp_bridge",
          "name": "SerenaMCPBridge",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.symbol",
          "name": "Symbol",
          "alias": null,
          "line": 17
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nSignature Provider\n\nProvides function signature help during function calls.\n",
      "lines_of_code": 559,
      "complexity_score": 83,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/intelligence/completions.py",
      "file_name": "completions.py",
      "functions": [
        {
          "name": "to_dict",
          "line": 36,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Convert to dictionary representation.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "__init__",
          "line": 58,
          "args": [
            "self",
            "codebase",
            "mcp_bridge",
            "config"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "get_completions",
          "line": 74,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get code completions at the specified position.\n\nArgs:\n    file_path: Path to the file\n    line: Line number (0-based)\n    character: Character position (0-based)\n    **kwargs: Additional options (trigger_character, context, etc.)\n\nReturns:\n    List of completion items",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "_get_completion_context",
          "line": 128,
          "args": [
            "self",
            "file_path",
            "line",
            "character"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get context information for completions.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_get_lsp_completions",
          "line": 170,
          "args": [
            "self",
            "file_path",
            "line",
            "character",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get completions from LSP servers.",
          "returns": "List[CompletionItem]"
        },
        {
          "name": "_get_symbol_completions",
          "line": 184,
          "args": [
            "self",
            "file_path",
            "line",
            "character",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get completions based on symbols in the codebase.",
          "returns": "List[CompletionItem]"
        },
        {
          "name": "_get_keyword_completions",
          "line": 242,
          "args": [
            "self",
            "file_path",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get keyword completions based on language.",
          "returns": "List[CompletionItem]"
        },
        {
          "name": "_get_snippet_completions",
          "line": 270,
          "args": [
            "self",
            "file_path",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get snippet completions.",
          "returns": "List[CompletionItem]"
        },
        {
          "name": "_get_ai_completions",
          "line": 296,
          "args": [
            "self",
            "file_path",
            "line",
            "character",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get AI-powered completions.",
          "returns": "List[CompletionItem]"
        },
        {
          "name": "_process_completions",
          "line": 325,
          "args": [
            "self",
            "completions",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Process and rank completions.",
          "returns": "List[CompletionItem]"
        },
        {
          "name": "_build_symbol_index",
          "line": 359,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Build index of all symbols in the codebase.",
          "returns": "None"
        },
        {
          "name": "_detect_language",
          "line": 373,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Detect programming language from file extension.",
          "returns": "str"
        },
        {
          "name": "_is_in_string",
          "line": 388,
          "args": [
            "self",
            "prefix"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check if position is inside a string literal.",
          "returns": "bool"
        },
        {
          "name": "_is_in_comment",
          "line": 395,
          "args": [
            "self",
            "prefix"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check if position is inside a comment.",
          "returns": "bool"
        },
        {
          "name": "_extract_word_prefix",
          "line": 400,
          "args": [
            "self",
            "prefix"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Extract the word prefix for completion.",
          "returns": "str"
        },
        {
          "name": "_get_scope_context",
          "line": 406,
          "args": [
            "self",
            "file_obj",
            "line"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get scope context (function, class, etc.).",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_get_imports_context",
          "line": 411,
          "args": [
            "self",
            "file_obj"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get imports context from the file.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "_get_imported_symbols",
          "line": 426,
          "args": [
            "self",
            "import_info"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get symbols from an import.",
          "returns": "List[Symbol]"
        },
        {
          "name": "_symbol_to_completion_kind",
          "line": 431,
          "args": [
            "self",
            "symbol"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Convert symbol type to completion kind.",
          "returns": "str"
        },
        {
          "name": "_get_symbol_detail",
          "line": 448,
          "args": [
            "self",
            "symbol"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get detail information for a symbol.",
          "returns": "Optional[str]"
        },
        {
          "name": "_get_symbol_documentation",
          "line": 460,
          "args": [
            "self",
            "symbol"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get documentation for a symbol.",
          "returns": "Optional[str]"
        },
        {
          "name": "_calculate_symbol_score",
          "line": 470,
          "args": [
            "self",
            "symbol",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Calculate relevance score for a symbol.",
          "returns": "float"
        },
        {
          "name": "_get_language_keywords",
          "line": 494,
          "args": [
            "self",
            "language"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get keywords for a programming language.",
          "returns": "List[str]"
        },
        {
          "name": "_get_language_snippets",
          "line": 524,
          "args": [
            "self",
            "language"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get code snippets for a programming language.",
          "returns": "Dict[str, Dict[str, str]]"
        },
        {
          "name": "_generate_contextual_suggestions",
          "line": 566,
          "args": [
            "self",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate contextual AI suggestions.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "_get_cached_completions",
          "line": 595,
          "args": [
            "self",
            "cache_key"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get cached completions if still valid.",
          "returns": "Optional[List[Dict[str, Any]]]"
        },
        {
          "name": "_cache_completions",
          "line": 606,
          "args": [
            "self",
            "cache_key",
            "completions"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Cache completions result.",
          "returns": "None"
        },
        {
          "name": "invalidate_cache",
          "line": 622,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Invalidate completion cache.",
          "returns": "None"
        },
        {
          "name": "get_status",
          "line": 634,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get status information.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "shutdown",
          "line": 647,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Shutdown the completion provider.",
          "returns": "None"
        }
      ],
      "classes": [
        {
          "name": "CompletionItem",
          "line": 24,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "to_dict",
              "line": 36,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Represents a code completion item."
        },
        {
          "name": "CompletionProvider",
          "line": 51,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 58,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_completions",
              "line": 74,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_completion_context",
              "line": 128,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_lsp_completions",
              "line": 170,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_symbol_completions",
              "line": 184,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_keyword_completions",
              "line": 242,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_snippet_completions",
              "line": 270,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_ai_completions",
              "line": 296,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_process_completions",
              "line": 325,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_build_symbol_index",
              "line": 359,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_detect_language",
              "line": 373,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_is_in_string",
              "line": 388,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_is_in_comment",
              "line": 395,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_extract_word_prefix",
              "line": 400,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_scope_context",
              "line": 406,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_imports_context",
              "line": 411,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_imported_symbols",
              "line": 426,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_symbol_to_completion_kind",
              "line": 431,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_symbol_detail",
              "line": 448,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_symbol_documentation",
              "line": 460,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_calculate_symbol_score",
              "line": 470,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_language_keywords",
              "line": 494,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_language_snippets",
              "line": 524,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_generate_contextual_suggestions",
              "line": 566,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_cached_completions",
              "line": 595,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_cache_completions",
              "line": 606,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "invalidate_cache",
              "line": 622,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_status",
              "line": 634,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "shutdown",
              "line": 647,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Provides intelligent code completions.\n\nCombines LSP completions with semantic analysis and AI-powered suggestions."
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "re",
          "alias": null,
          "line": 7
        },
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Set",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Tuple",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "collections",
          "name": "defaultdict",
          "alias": null,
          "line": 12
        },
        {
          "type": "import",
          "module": "threading",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "graph_sitter.shared.logging.get_logger",
          "name": "get_logger",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.codebase",
          "name": "Codebase",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "mcp_bridge",
          "name": "SerenaMCPBridge",
          "alias": null,
          "line": 17
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.symbol",
          "name": "Symbol",
          "alias": null,
          "line": 18
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nCompletion Provider\n\nProvides context-aware code completions using LSP and semantic analysis.\n",
      "lines_of_code": 652,
      "complexity_score": 112,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/intelligence/__init__.py",
      "file_name": "__init__.py",
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "code_intelligence",
          "name": "CodeIntelligence",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "completions",
          "name": "CompletionProvider",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "hover",
          "name": "HoverProvider",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "signatures",
          "name": "SignatureProvider",
          "alias": null,
          "line": 11
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nCode Intelligence Module\n\nProvides real-time code intelligence features including completions,\nhover information, and signature help.\n",
      "lines_of_code": 19,
      "complexity_score": 4,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/refactoring/refactoring_engine.py",
      "file_name": "refactoring_engine.py",
      "functions": [
        {
          "name": "create_refactoring_change",
          "line": 414,
          "args": [
            "file_path",
            "start_line",
            "start_char",
            "end_line",
            "end_char",
            "old_text",
            "new_text",
            "change_type",
            "description"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Create a RefactoringChange instance.",
          "returns": "RefactoringChange"
        },
        {
          "name": "create_refactoring_conflict",
          "line": 439,
          "args": [
            "file_path",
            "line_number",
            "character",
            "conflict_type",
            "description",
            "severity",
            "suggested_resolution"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Create a RefactoringConflict instance.",
          "returns": "RefactoringConflict"
        },
        {
          "name": "__init__",
          "line": 55,
          "args": [
            "self",
            "codebase_path",
            "serena_core",
            "config"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "get_operation_status",
          "line": 285,
          "args": [
            "self",
            "operation_id"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get status of a refactoring operation.",
          "returns": "Optional[Dict[str, Any]]"
        },
        {
          "name": "get_operation_history",
          "line": 301,
          "args": [
            "self",
            "limit"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get history of refactoring operations.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "get_supported_refactoring_types",
          "line": 318,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get list of supported refactoring types.",
          "returns": "List[str]"
        },
        {
          "name": "get_performance_metrics",
          "line": 322,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get performance metrics for refactoring operations.",
          "returns": "List[Dict[str, Any]]"
        }
      ],
      "classes": [
        {
          "name": "RefactoringConfig",
          "line": 29,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Configuration for refactoring operations."
        },
        {
          "name": "RefactoringEngine",
          "line": 40,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 55,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_operation_status",
              "line": 285,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_operation_history",
              "line": 301,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_supported_refactoring_types",
              "line": 318,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_performance_metrics",
              "line": 322,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Comprehensive refactoring engine.\n\nProvides safe refactoring operations with conflict detection,\npreview capabilities, and undo/redo support.\n\nFeatures:\n- Multiple refactoring types (rename, extract, inline, move)\n- Safety checks and conflict detection\n- Preview mode for all operations\n- Performance monitoring\n- Integration with LSP workspace edits"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "asyncio",
          "alias": null,
          "line": 8
        },
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 9
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Set",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Tuple",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringType",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringResult",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringChange",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringConflict",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "ChangeType",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "ConflictType",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "PerformanceMetrics",
          "alias": null,
          "line": 15
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nRefactoring Engine\n\nMain orchestrator for all refactoring operations with safety checks,\nconflict detection, and preview capabilities.\n",
      "lines_of_code": 458,
      "complexity_score": 43,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/refactoring/extract_refactor.py",
      "file_name": "extract_refactor.py",
      "functions": [
        {
          "name": "__init__",
          "line": 26,
          "args": [
            "self",
            "codebase_path",
            "serena_core",
            "config"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        }
      ],
      "classes": [
        {
          "name": "ExtractRefactor",
          "line": 23,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 26,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Handles extract method and extract variable operations."
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringType",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringResult",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringChange",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringConflict",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "ChangeType",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "refactoring_engine",
          "name": "create_refactoring_change",
          "alias": null,
          "line": 18
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nExtract Refactoring\n\nProvides extract method and extract variable refactoring operations.\n",
      "lines_of_code": 192,
      "complexity_score": 18,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/refactoring/move_refactor.py",
      "file_name": "move_refactor.py",
      "functions": [
        {
          "name": "__init__",
          "line": 25,
          "args": [
            "self",
            "codebase_path",
            "serena_core",
            "config"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        }
      ],
      "classes": [
        {
          "name": "MoveRefactor",
          "line": 22,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 25,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Handles move symbol and move file operations."
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringType",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringResult",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringChange",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "ChangeType",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "refactoring_engine",
          "name": "create_refactoring_change",
          "alias": null,
          "line": 17
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nMove Refactoring\n\nProvides move symbol and move file refactoring operations.\n",
      "lines_of_code": 212,
      "complexity_score": 17,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/refactoring/rename_refactor.py",
      "file_name": "rename_refactor.py",
      "functions": [
        {
          "name": "__init__",
          "line": 37,
          "args": [
            "self",
            "codebase_path",
            "serena_core",
            "config"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "_validate_new_name",
          "line": 154,
          "args": [
            "self",
            "new_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Validate the new symbol name.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_determine_context",
          "line": 289,
          "args": [
            "self",
            "line_content",
            "character_pos"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Determine the context of a symbol occurrence.",
          "returns": "str"
        },
        {
          "name": "_is_valid_identifier_in_context",
          "line": 395,
          "args": [
            "self",
            "name",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check if name is valid in the given context.",
          "returns": "bool"
        }
      ],
      "classes": [
        {
          "name": "RenameRefactor",
          "line": 26,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 37,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_validate_new_name",
              "line": 154,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_determine_context",
              "line": 289,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_is_valid_identifier_in_context",
              "line": 395,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Handles symbol renaming operations.\n\nFeatures:\n- Symbol scope analysis\n- Reference finding and validation\n- Conflict detection (name collisions, scope conflicts)\n- Safe renaming with preview"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "asyncio",
          "alias": null,
          "line": 7
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Set",
          "alias": null,
          "line": 10
        },
        {
          "type": "import",
          "module": "re",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringType",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringResult",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringChange",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringConflict",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "ChangeType",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "ConflictType",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "refactoring_engine",
          "name": "create_refactoring_change",
          "alias": null,
          "line": 21
        },
        {
          "type": "from_import",
          "module": "refactoring_engine",
          "name": "create_refactoring_conflict",
          "alias": null,
          "line": 21
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nRename Refactoring\n\nProvides safe symbol renaming with conflict detection and scope analysis.\n",
      "lines_of_code": 491,
      "complexity_score": 32,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/refactoring/__init__.py",
      "file_name": "__init__.py",
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "refactoring_engine",
          "name": "RefactoringEngine",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "refactoring_engine",
          "name": "RefactoringConfig",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "rename_refactor",
          "name": "RenameRefactor",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "extract_refactor",
          "name": "ExtractRefactor",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "inline_refactor",
          "name": "InlineRefactor",
          "alias": null,
          "line": 17
        },
        {
          "type": "from_import",
          "module": "move_refactor",
          "name": "MoveRefactor",
          "alias": null,
          "line": 18
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nRefactoring System for Serena LSP Integration\n\nThis module provides comprehensive refactoring capabilities including:\n- Rename refactoring\n- Extract method/variable\n- Inline method/variable  \n- Move symbol/file\n- Organize imports\n\nAll refactoring operations include safety checks, conflict detection, and preview capabilities.\n",
      "lines_of_code": 28,
      "complexity_score": 6,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/refactoring/inline_refactor.py",
      "file_name": "inline_refactor.py",
      "functions": [
        {
          "name": "__init__",
          "line": 25,
          "args": [
            "self",
            "codebase_path",
            "serena_core",
            "config"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "_find_symbol_definition",
          "line": 125,
          "args": [
            "self",
            "lines",
            "symbol_name",
            "inline_type"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find symbol definition in file lines.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_extract_method_body",
          "line": 141,
          "args": [
            "self",
            "lines",
            "start_index"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Extract method body content.",
          "returns": "str"
        },
        {
          "name": "_find_symbol_usages",
          "line": 153,
          "args": [
            "self",
            "lines",
            "symbol_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find all usages of a symbol.",
          "returns": "List[int]"
        },
        {
          "name": "_create_definition_removal_change",
          "line": 163,
          "args": [
            "self",
            "file_path",
            "lines",
            "definition_info",
            "inline_type",
            "symbol_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Create change to remove symbol definition.",
          "returns": "List[RefactoringChange]"
        },
        {
          "name": "_create_usage_replacement_changes",
          "line": 186,
          "args": [
            "self",
            "file_path",
            "lines",
            "usages",
            "definition_info",
            "inline_type",
            "symbol_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Create changes to replace symbol usages with inline content.",
          "returns": "List[RefactoringChange]"
        },
        {
          "name": "_replace_symbol_usage",
          "line": 221,
          "args": [
            "self",
            "line",
            "symbol_name",
            "content",
            "inline_type"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Replace symbol usage with inline content.",
          "returns": "str"
        }
      ],
      "classes": [
        {
          "name": "InlineRefactor",
          "line": 22,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 25,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_symbol_definition",
              "line": 125,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_extract_method_body",
              "line": 141,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_symbol_usages",
              "line": 153,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_create_definition_removal_change",
              "line": 163,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_create_usage_replacement_changes",
              "line": 186,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_replace_symbol_usage",
              "line": 221,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Handles inline method and inline variable operations."
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringType",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringResult",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "RefactoringChange",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "ChangeType",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "refactoring_engine",
          "name": "create_refactoring_change",
          "alias": null,
          "line": 17
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nInline Refactoring\n\nProvides inline method and inline variable refactoring operations.\n",
      "lines_of_code": 230,
      "complexity_score": 35,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/actions/code_actions.py",
      "file_name": "code_actions.py",
      "functions": [
        {
          "name": "__init__",
          "line": 30,
          "args": [
            "self",
            "codebase_path",
            "serena_core"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "clear_cache",
          "line": 200,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Clear action cache for a file or all files.",
          "returns": "None"
        },
        {
          "name": "_clear_cache_for_file",
          "line": 227,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Clear cache entries for a specific file.",
          "returns": "None"
        },
        {
          "name": "get_supported_kinds",
          "line": 241,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get supported action kinds.",
          "returns": "List[str]"
        },
        {
          "name": "can_handle_action",
          "line": 245,
          "args": [
            "self",
            "action_id"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check if this provider can handle the action.",
          "returns": "bool"
        },
        {
          "name": "_find_missing_imports",
          "line": 317,
          "args": [
            "self",
            "code_section",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find missing imports in code section.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "_find_unused_imports",
          "line": 346,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find unused imports in file.",
          "returns": "List[str]"
        },
        {
          "name": "_extract_imported_names",
          "line": 381,
          "args": [
            "self",
            "import_line"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Extract imported names from import statement.",
          "returns": "List[str]"
        },
        {
          "name": "_is_name_used",
          "line": 401,
          "args": [
            "self",
            "name",
            "content",
            "import_line"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check if a name is used in the content.",
          "returns": "bool"
        },
        {
          "name": "get_supported_kinds",
          "line": 527,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "List[str]"
        },
        {
          "name": "can_handle_action",
          "line": 530,
          "args": [
            "self",
            "action_id"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "bool"
        },
        {
          "name": "__init__",
          "line": 566,
          "args": [
            "self",
            "serena_core"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "get_supported_kinds",
          "line": 569,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "List[str]"
        },
        {
          "name": "can_handle_action",
          "line": 572,
          "args": [
            "self",
            "action_id"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "bool"
        },
        {
          "name": "get_supported_kinds",
          "line": 656,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "List[str]"
        },
        {
          "name": "can_handle_action",
          "line": 659,
          "args": [
            "self",
            "action_id"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "bool"
        }
      ],
      "classes": [
        {
          "name": "CodeActions",
          "line": 18,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 30,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "clear_cache",
              "line": 200,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_clear_cache_for_file",
              "line": 227,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Provides code actions and quick fixes.\n\nFeatures:\n- Automated code fixes (imports, formatting, etc.)\n- Quick refactoring actions\n- Code improvement suggestions\n- Integration with LSP code actions\n- Context-aware action discovery"
        },
        {
          "name": "ImportActionProvider",
          "line": 238,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "get_supported_kinds",
              "line": 241,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "can_handle_action",
              "line": 245,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_missing_imports",
              "line": 317,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_find_unused_imports",
              "line": 346,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_extract_imported_names",
              "line": 381,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_is_name_used",
              "line": 401,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Provides import-related code actions."
        },
        {
          "name": "FormattingActionProvider",
          "line": 524,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "get_supported_kinds",
              "line": 527,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "can_handle_action",
              "line": 530,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Provides formatting-related code actions."
        },
        {
          "name": "RefactoringActionProvider",
          "line": 563,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 566,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_supported_kinds",
              "line": 569,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "can_handle_action",
              "line": 572,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Provides refactoring-related code actions."
        },
        {
          "name": "QuickFixActionProvider",
          "line": 653,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "get_supported_kinds",
              "line": 656,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "can_handle_action",
              "line": 659,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Provides quick fix code actions."
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "asyncio",
          "alias": null,
          "line": 7
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 8
        },
        {
          "type": "import",
          "module": "re",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "types",
          "name": "CodeAction",
          "alias": null,
          "line": 13
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nCode Actions\n\nProvides automated code fixes, improvements, and quick actions.\n",
      "lines_of_code": 722,
      "complexity_score": 72,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/actions/__init__.py",
      "file_name": "__init__.py",
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "code_actions",
          "name": "CodeActions",
          "alias": null,
          "line": 8
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nCode Actions System for Serena LSP Integration\n\nThis module provides automated code fixes, improvements, and quick actions\nintegrated with LSP code actions protocol.\n",
      "lines_of_code": 11,
      "complexity_score": 1,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/generation/__init__.py",
      "file_name": "__init__.py",
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "code_generator",
          "name": "CodeGenerator",
          "alias": null,
          "line": 7
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nCode Generation Module\n\nProvides intelligent code generation capabilities.\n",
      "lines_of_code": 10,
      "complexity_score": 1,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/generation/code_generator.py",
      "file_name": "code_generator.py",
      "functions": [
        {
          "name": "__init__",
          "line": 19,
          "args": [
            "self",
            "codebase",
            "lsp_bridge"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "generate_code",
          "line": 23,
          "args": [
            "self",
            "prompt",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate code based on prompt and context.",
          "returns": "CodeGenerationResult"
        },
        {
          "name": "_generate_from_prompt",
          "line": 61,
          "args": [
            "self",
            "prompt",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate code from prompt with enhanced templates.",
          "returns": "str"
        },
        {
          "name": "_extract_imports",
          "line": 140,
          "args": [
            "self",
            "code"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Extract imports needed for the generated code.",
          "returns": "List[str]"
        },
        {
          "name": "generate_boilerplate",
          "line": 157,
          "args": [
            "self",
            "template",
            "context",
            "target_file"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate boilerplate code from template.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "generate_tests",
          "line": 166,
          "args": [
            "self",
            "target_function",
            "test_types"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate tests for the specified function.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "generate_documentation",
          "line": 175,
          "args": [
            "self",
            "target",
            "format"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate documentation for the specified target.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "get_status",
          "line": 184,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get status information.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "shutdown",
          "line": 188,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Shutdown code generator.",
          "returns": "None"
        }
      ],
      "classes": [
        {
          "name": "CodeGenerator",
          "line": 16,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 19,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "generate_code",
              "line": 23,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_generate_from_prompt",
              "line": 61,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_extract_imports",
              "line": 140,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "generate_boilerplate",
              "line": 157,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "generate_tests",
              "line": 166,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "generate_documentation",
              "line": 175,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_status",
              "line": 184,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "shutdown",
              "line": 188,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Provides code generation capabilities."
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "graph_sitter.shared.logging.get_logger",
          "name": "get_logger",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.codebase",
          "name": "Codebase",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "graph_sitter.extensions.lsp.serena_bridge",
          "name": "SerenaLSPBridge",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "graph_sitter.extensions.serena.serena_types",
          "name": "CodeGenerationResult",
          "alias": null,
          "line": 11
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nCode Generator\n\nProvides intelligent code generation from templates and context.\n",
      "lines_of_code": 190,
      "complexity_score": 38,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/lsp/protocol.py",
      "file_name": "protocol.py",
      "functions": [
        {
          "name": "to_dict",
          "line": 50,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "Dict[str, Any]"
        },
        {
          "name": "to_dict",
          "line": 62,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "Dict[str, Any]"
        },
        {
          "name": "to_json",
          "line": 65,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "str"
        },
        {
          "name": "create",
          "line": 77,
          "args": [
            "cls",
            "method",
            "params"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": null,
          "returns": "'LSPRequest'"
        },
        {
          "name": "to_dict",
          "line": 93,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": "Dict[str, Any]"
        },
        {
          "name": "__init__",
          "line": 121,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "generate_message_id",
          "line": 127,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Generate a unique message ID.",
          "returns": "str"
        },
        {
          "name": "parse_message",
          "line": 132,
          "args": [
            "self",
            "raw_message"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Parse a raw LSP message string into appropriate message object.\n\nArgs:\n    raw_message: Raw JSON string message\n    \nReturns:\n    Parsed LSP message object\n    \nRaises:\n    ValueError: If message is invalid or malformed",
          "returns": "Union[LSPRequest, LSPResponse, LSPNotification]"
        },
        {
          "name": "create_request",
          "line": 192,
          "args": [
            "self",
            "method",
            "params"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Create a new LSP request with unique ID.",
          "returns": "LSPRequest"
        },
        {
          "name": "create_response",
          "line": 201,
          "args": [
            "self",
            "request_id",
            "result",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Create an LSP response for a given request.",
          "returns": "LSPResponse"
        },
        {
          "name": "create_notification",
          "line": 212,
          "args": [
            "self",
            "method",
            "params"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Create an LSP notification.",
          "returns": "LSPNotification"
        },
        {
          "name": "create_error_response",
          "line": 221,
          "args": [
            "self",
            "request_id",
            "code",
            "message",
            "data"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Create an error response.",
          "returns": "LSPResponse"
        },
        {
          "name": "register_request_handler",
          "line": 228,
          "args": [
            "self",
            "method",
            "handler"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Register a handler for incoming requests.",
          "returns": null
        },
        {
          "name": "register_notification_handler",
          "line": 232,
          "args": [
            "self",
            "method",
            "handler"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Register a handler for incoming notifications.",
          "returns": null
        },
        {
          "name": "track_request",
          "line": 310,
          "args": [
            "self",
            "request"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Track a request for response correlation.",
          "returns": "asyncio.Future"
        },
        {
          "name": "cancel_request",
          "line": 316,
          "args": [
            "self",
            "request_id"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Cancel a pending request.",
          "returns": null
        },
        {
          "name": "get_pending_requests",
          "line": 323,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get list of pending request IDs.",
          "returns": "List[Union[str, int]]"
        },
        {
          "name": "cleanup_completed_requests",
          "line": 327,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Clean up completed or cancelled requests.",
          "returns": null
        },
        {
          "name": "create_analyze_file_request",
          "line": 359,
          "args": [
            "file_path",
            "content"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "Create parameters for file analysis request.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "create_get_errors_request",
          "line": 367,
          "args": [
            "file_path",
            "severity_filter"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "Create parameters for error retrieval request.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "create_comprehensive_errors_request",
          "line": 378,
          "args": [
            "include_context",
            "include_suggestions",
            "max_errors"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "Create parameters for comprehensive error analysis request.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "create_analyze_codebase_request",
          "line": 391,
          "args": [
            "root_path",
            "file_patterns",
            "exclude_patterns"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "Create parameters for codebase analysis request.",
          "returns": "Dict[str, Any]"
        }
      ],
      "classes": [
        {
          "name": "MessageType",
          "line": 20,
          "bases": [
            "Enum"
          ],
          "decorators": [],
          "methods": [],
          "docstring": "LSP message types."
        },
        {
          "name": "ErrorCode",
          "line": 28,
          "bases": [
            "Enum"
          ],
          "decorators": [],
          "methods": [],
          "docstring": "LSP error codes."
        },
        {
          "name": "LSPError",
          "line": 44,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "to_dict",
              "line": 50,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "LSP error representation."
        },
        {
          "name": "LSPMessage",
          "line": 58,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "to_dict",
              "line": 62,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "to_json",
              "line": 65,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Base LSP message."
        },
        {
          "name": "LSPRequest",
          "line": 70,
          "bases": [
            "LSPMessage"
          ],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "create",
              "line": 77,
              "is_property": false,
              "is_static": false,
              "is_class": true
            }
          ],
          "docstring": "LSP request message."
        },
        {
          "name": "LSPResponse",
          "line": 87,
          "bases": [
            "LSPMessage"
          ],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "to_dict",
              "line": 93,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "LSP response message."
        },
        {
          "name": "LSPNotification",
          "line": 103,
          "bases": [
            "LSPMessage"
          ],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "LSP notification message."
        },
        {
          "name": "ProtocolHandler",
          "line": 109,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 121,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "generate_message_id",
              "line": 127,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "parse_message",
              "line": 132,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "create_request",
              "line": 192,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "create_response",
              "line": 201,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "create_notification",
              "line": 212,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "create_error_response",
              "line": 221,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "register_request_handler",
              "line": 228,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "register_notification_handler",
              "line": 232,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "track_request",
              "line": 310,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "cancel_request",
              "line": 316,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_pending_requests",
              "line": 323,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "cleanup_completed_requests",
              "line": 327,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Handles LSP protocol message parsing, validation, and routing.\n\nFeatures:\n- Message parsing and validation\n- Request/response correlation\n- Notification handling\n- Error handling and reporting\n- Protocol compliance checking"
        },
        {
          "name": "SerenaProtocolExtensions",
          "line": 338,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "create_analyze_file_request",
              "line": 359,
              "is_property": false,
              "is_static": true,
              "is_class": false
            },
            {
              "name": "create_get_errors_request",
              "line": 367,
              "is_property": false,
              "is_static": true,
              "is_class": false
            },
            {
              "name": "create_comprehensive_errors_request",
              "line": 378,
              "is_property": false,
              "is_static": true,
              "is_class": false
            },
            {
              "name": "create_analyze_codebase_request",
              "line": 391,
              "is_property": false,
              "is_static": true,
              "is_class": false
            }
          ],
          "docstring": "Serena-specific LSP protocol extensions.\n\nDefines custom methods and capabilities specific to Serena analysis servers."
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 9
        },
        {
          "type": "import",
          "module": "uuid",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "asdict",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "enum",
          "name": "Enum",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Union",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Callable",
          "alias": null,
          "line": 13
        },
        {
          "type": "import",
          "module": "asyncio",
          "alias": null,
          "line": 14
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 15
        }
      ],
      "constants": [
        {
          "name": "REQUEST",
          "line": 22,
          "value": "'request'"
        },
        {
          "name": "RESPONSE",
          "line": 23,
          "value": "'response'"
        },
        {
          "name": "NOTIFICATION",
          "line": 24,
          "value": "'notification'"
        },
        {
          "name": "ERROR",
          "line": 25,
          "value": "'error'"
        },
        {
          "name": "PARSE_ERROR",
          "line": 30,
          "value": "-32700"
        },
        {
          "name": "INVALID_REQUEST",
          "line": 31,
          "value": "-32600"
        },
        {
          "name": "METHOD_NOT_FOUND",
          "line": 32,
          "value": "-32601"
        },
        {
          "name": "INVALID_PARAMS",
          "line": 33,
          "value": "-32602"
        },
        {
          "name": "INTERNAL_ERROR",
          "line": 34,
          "value": "-32603"
        },
        {
          "name": "SERVER_ERROR_START",
          "line": 35,
          "value": "-32099"
        },
        {
          "name": "SERVER_ERROR_END",
          "line": 36,
          "value": "-32000"
        },
        {
          "name": "SERVER_NOT_INITIALIZED",
          "line": 37,
          "value": "-32002"
        },
        {
          "name": "UNKNOWN_ERROR_CODE",
          "line": 38,
          "value": "-32001"
        },
        {
          "name": "REQUEST_CANCELLED",
          "line": 39,
          "value": "-32800"
        },
        {
          "name": "CONTENT_MODIFIED",
          "line": 40,
          "value": "-32801"
        },
        {
          "name": "SERENA_ANALYZE_FILE",
          "line": 346,
          "value": "'serena/analyzeFile'"
        },
        {
          "name": "SERENA_GET_ERRORS",
          "line": 347,
          "value": "'serena/getErrors'"
        },
        {
          "name": "SERENA_GET_COMPREHENSIVE_ERRORS",
          "line": 348,
          "value": "'serena/getComprehensiveErrors'"
        },
        {
          "name": "SERENA_ANALYZE_CODEBASE",
          "line": 349,
          "value": "'serena/analyzeCodebase'"
        },
        {
          "name": "SERENA_GET_CONTEXT",
          "line": 350,
          "value": "'serena/getContext'"
        },
        {
          "name": "SERENA_REFRESH_ANALYSIS",
          "line": 351,
          "value": "'serena/refreshAnalysis'"
        },
        {
          "name": "SERENA_ANALYSIS_COMPLETE",
          "line": 354,
          "value": "'serena/analysisComplete'"
        },
        {
          "name": "SERENA_ERROR_UPDATED",
          "line": 355,
          "value": "'serena/errorUpdated'"
        },
        {
          "name": "SERENA_PROGRESS",
          "line": 356,
          "value": "'serena/progress'"
        }
      ],
      "decorators": [
        "classmethod",
        "staticmethod"
      ],
      "docstring": "\nLSP Protocol Implementation for Serena Server Communication\n\nThis module implements the Language Server Protocol (LSP) for communication\nwith Serena analysis servers, providing structured message handling and\nprotocol compliance.\n",
      "lines_of_code": 400,
      "complexity_score": 106,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/lsp/server_manager.py",
      "file_name": "server_manager.py",
      "functions": [
        {
          "name": "to_dict",
          "line": 53,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Convert to dictionary.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "from_dict",
          "line": 72,
          "args": [
            "cls",
            "data"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "Create from dictionary.",
          "returns": "'ServerConfig'"
        },
        {
          "name": "uptime",
          "line": 90,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Get server uptime in seconds.",
          "returns": "Optional[float]"
        },
        {
          "name": "is_healthy",
          "line": 97,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Check if server is healthy.",
          "returns": "bool"
        },
        {
          "name": "_is_process_running",
          "line": 105,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check if the process is still running.",
          "returns": "bool"
        },
        {
          "name": "__init__",
          "line": 130,
          "args": [
            "self",
            "config_dir"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "register_server",
          "line": 145,
          "args": [
            "self",
            "config"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Register a new server configuration.\n\nArgs:\n    config: Server configuration\n    \nReturns:\n    True if registration successful",
          "returns": "bool"
        },
        {
          "name": "unregister_server",
          "line": 172,
          "args": [
            "self",
            "server_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Unregister a server.\n\nArgs:\n    server_name: Name of server to unregister\n    \nReturns:\n    True if unregistration successful",
          "returns": "bool"
        },
        {
          "name": "get_server_info",
          "line": 396,
          "args": [
            "self",
            "server_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get information about a server.",
          "returns": "Optional[ServerInfo]"
        },
        {
          "name": "get_all_servers",
          "line": 400,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get information about all servers.",
          "returns": "Dict[str, ServerInfo]"
        },
        {
          "name": "get_running_servers",
          "line": 404,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get information about running servers.",
          "returns": "Dict[str, ServerInfo]"
        },
        {
          "name": "get_server_client",
          "line": 411,
          "args": [
            "self",
            "server_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get LSP client for a server.",
          "returns": "Optional[SerenaLSPClient]"
        },
        {
          "name": "add_status_listener",
          "line": 416,
          "args": [
            "self",
            "listener"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Add listener for server status changes.",
          "returns": null
        },
        {
          "name": "remove_status_listener",
          "line": 420,
          "args": [
            "self",
            "listener"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Remove status listener.",
          "returns": null
        },
        {
          "name": "discover_servers",
          "line": 425,
          "args": [
            "self",
            "search_paths"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Discover available Serena LSP servers.\n\nArgs:\n    search_paths: Paths to search for servers\n    \nReturns:\n    List of discovered server configurations",
          "returns": "List[ServerConfig]"
        },
        {
          "name": "_start_health_monitoring",
          "line": 471,
          "args": [
            "self",
            "server_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Start health monitoring for a server.",
          "returns": null
        },
        {
          "name": "_stop_health_monitoring",
          "line": 479,
          "args": [
            "self",
            "server_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Stop health monitoring for a server.",
          "returns": null
        },
        {
          "name": "_load_configurations",
          "line": 578,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Load server configurations from disk.",
          "returns": null
        },
        {
          "name": "_save_configuration",
          "line": 601,
          "args": [
            "self",
            "config"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Save server configuration to disk.",
          "returns": null
        }
      ],
      "classes": [
        {
          "name": "ServerStatus",
          "line": 26,
          "bases": [
            "Enum"
          ],
          "decorators": [],
          "methods": [],
          "docstring": "Server status states."
        },
        {
          "name": "ServerConfig",
          "line": 37,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "to_dict",
              "line": 53,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "from_dict",
              "line": 72,
              "is_property": false,
              "is_static": false,
              "is_class": true
            }
          ],
          "docstring": "Configuration for a Serena LSP server."
        },
        {
          "name": "ServerInfo",
          "line": 78,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "uptime",
              "line": 90,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "is_healthy",
              "line": 97,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_is_process_running",
              "line": 105,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Information about a running server."
        },
        {
          "name": "SerenaServerManager",
          "line": 117,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 130,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "register_server",
              "line": 145,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "unregister_server",
              "line": 172,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_server_info",
              "line": 396,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_all_servers",
              "line": 400,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_running_servers",
              "line": 404,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_server_client",
              "line": 411,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "add_status_listener",
              "line": 416,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "remove_status_listener",
              "line": 420,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "discover_servers",
              "line": 425,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_start_health_monitoring",
              "line": 471,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_stop_health_monitoring",
              "line": 479,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_load_configurations",
              "line": 578,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_save_configuration",
              "line": 601,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Comprehensive server management for Serena LSP servers.\n\nFeatures:\n- Server discovery and configuration\n- Lifecycle management (start, stop, restart)\n- Health monitoring and auto-recovery\n- Multiple server support\n- Configuration persistence\n- Resource monitoring"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "asyncio",
          "alias": null,
          "line": 8
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 9
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 10
        },
        {
          "type": "import",
          "module": "os",
          "alias": null,
          "line": 11
        },
        {
          "type": "import",
          "module": "shutil",
          "alias": null,
          "line": 12
        },
        {
          "type": "import",
          "module": "subprocess",
          "alias": null,
          "line": 13
        },
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "field",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "enum",
          "name": "Enum",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 17
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 18
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 18
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 18
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 18
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Set",
          "alias": null,
          "line": 18
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Callable",
          "alias": null,
          "line": 18
        },
        {
          "type": "import",
          "module": "psutil",
          "alias": null,
          "line": 19
        },
        {
          "type": "from_import",
          "module": "client",
          "name": "SerenaLSPClient",
          "alias": null,
          "line": 21
        },
        {
          "type": "from_import",
          "module": "client",
          "name": "ConnectionType",
          "alias": null,
          "line": 21
        }
      ],
      "constants": [
        {
          "name": "STOPPED",
          "line": 28,
          "value": "'stopped'"
        },
        {
          "name": "STARTING",
          "line": 29,
          "value": "'starting'"
        },
        {
          "name": "RUNNING",
          "line": 30,
          "value": "'running'"
        },
        {
          "name": "STOPPING",
          "line": 31,
          "value": "'stopping'"
        },
        {
          "name": "ERROR",
          "line": 32,
          "value": "'error'"
        },
        {
          "name": "UNKNOWN",
          "line": 33,
          "value": "'unknown'"
        }
      ],
      "decorators": [
        "classmethod",
        "property"
      ],
      "docstring": "\nSerena LSP Server Management\n\nThis module provides server management capabilities for Serena LSP servers,\nincluding server discovery, configuration, lifecycle management, and health monitoring.\n",
      "lines_of_code": 624,
      "complexity_score": 89,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/lsp/error_retrieval.py",
      "file_name": "error_retrieval.py",
      "functions": [
        {
          "name": "range_text",
          "line": 52,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Get human-readable range text.",
          "returns": "str"
        },
        {
          "name": "file_name",
          "line": 59,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Get just the filename.",
          "returns": "str"
        },
        {
          "name": "is_critical",
          "line": 80,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Check if error is critical (error severity).",
          "returns": "bool"
        },
        {
          "name": "display_text",
          "line": 85,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Get formatted display text for the error.",
          "returns": "str"
        },
        {
          "name": "to_dict",
          "line": 89,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Convert error to dictionary representation.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "from_lsp_diagnostic",
          "line": 112,
          "args": [
            "cls",
            "diagnostic",
            "file_path"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "Create CodeError from LSP diagnostic data.",
          "returns": "'CodeError'"
        },
        {
          "name": "_determine_category",
          "line": 151,
          "args": [
            "diagnostic"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "Determine error category from diagnostic data.",
          "returns": "ErrorCategory"
        },
        {
          "name": "__post_init__",
          "line": 188,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Calculate counts after initialization.",
          "returns": null
        },
        {
          "name": "_update_counts",
          "line": 192,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Update error counts.",
          "returns": null
        },
        {
          "name": "add_error",
          "line": 200,
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Add an error to the list.",
          "returns": null
        },
        {
          "name": "add_errors",
          "line": 205,
          "args": [
            "self",
            "errors"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Add multiple errors to the list.",
          "returns": null
        },
        {
          "name": "get_errors_by_severity",
          "line": 210,
          "args": [
            "self",
            "severity"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get errors filtered by severity.",
          "returns": "List[CodeError]"
        },
        {
          "name": "get_errors_by_category",
          "line": 214,
          "args": [
            "self",
            "category"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get errors filtered by category.",
          "returns": "List[CodeError]"
        },
        {
          "name": "get_errors_by_file",
          "line": 218,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get errors for a specific file.",
          "returns": "List[CodeError]"
        },
        {
          "name": "get_critical_errors",
          "line": 222,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get only critical errors.",
          "returns": "List[CodeError]"
        },
        {
          "name": "get_summary",
          "line": 226,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get summary statistics.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "to_dict",
          "line": 243,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Convert to dictionary representation.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "__init__",
          "line": 263,
          "args": [
            "self",
            "protocol_handler"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "add_error_listener",
          "line": 422,
          "args": [
            "self",
            "listener"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Add a listener for error updates.",
          "returns": null
        },
        {
          "name": "remove_error_listener",
          "line": 426,
          "args": [
            "self",
            "listener"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Remove an error listener.",
          "returns": null
        },
        {
          "name": "get_cached_errors",
          "line": 431,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get cached errors for a file or all cached errors.",
          "returns": "List[CodeError]"
        },
        {
          "name": "clear_cache",
          "line": 441,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Clear error cache for a file or all files.",
          "returns": null
        },
        {
          "name": "_update_error_cache",
          "line": 495,
          "args": [
            "self",
            "errors"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Update error cache with new errors.",
          "returns": null
        }
      ],
      "classes": [
        {
          "name": "ErrorSeverity",
          "line": 21,
          "bases": [
            "Enum"
          ],
          "decorators": [],
          "methods": [],
          "docstring": "Error severity levels."
        },
        {
          "name": "ErrorCategory",
          "line": 29,
          "bases": [
            "Enum"
          ],
          "decorators": [],
          "methods": [],
          "docstring": "Error categories for classification."
        },
        {
          "name": "ErrorLocation",
          "line": 43,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "range_text",
              "line": 52,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "file_name",
              "line": 59,
              "is_property": true,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Represents the location of an error in code."
        },
        {
          "name": "CodeError",
          "line": 65,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "is_critical",
              "line": 80,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "display_text",
              "line": 85,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "to_dict",
              "line": 89,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "from_lsp_diagnostic",
              "line": 112,
              "is_property": false,
              "is_static": false,
              "is_class": true
            },
            {
              "name": "_determine_category",
              "line": 151,
              "is_property": false,
              "is_static": true,
              "is_class": false
            }
          ],
          "docstring": "Represents a comprehensive code error with context."
        },
        {
          "name": "ComprehensiveErrorList",
          "line": 177,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "__post_init__",
              "line": 188,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_update_counts",
              "line": 192,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "add_error",
              "line": 200,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "add_errors",
              "line": 205,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_errors_by_severity",
              "line": 210,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_errors_by_category",
              "line": 214,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_errors_by_file",
              "line": 218,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_critical_errors",
              "line": 222,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_summary",
              "line": 226,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "to_dict",
              "line": 243,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Comprehensive list of code errors with metadata and analysis."
        },
        {
          "name": "ErrorRetriever",
          "line": 251,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 263,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "add_error_listener",
              "line": 422,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "remove_error_listener",
              "line": 426,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_cached_errors",
              "line": 431,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "clear_cache",
              "line": 441,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_update_error_cache",
              "line": 495,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Comprehensive error retrieval system for Serena LSP servers.\n\nFeatures:\n- Real-time error retrieval from LSP servers\n- Error categorization and analysis\n- Batch error processing\n- Error filtering and sorting\n- Live error monitoring"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "asyncio",
          "alias": null,
          "line": 8
        },
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "field",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "enum",
          "name": "Enum",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Set",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Callable",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Union",
          "alias": null,
          "line": 13
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "protocol",
          "name": "ProtocolHandler",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "protocol",
          "name": "SerenaProtocolExtensions",
          "alias": null,
          "line": 16
        }
      ],
      "constants": [
        {
          "name": "ERROR",
          "line": 23,
          "value": "'error'"
        },
        {
          "name": "WARNING",
          "line": 24,
          "value": "'warning'"
        },
        {
          "name": "INFO",
          "line": 25,
          "value": "'info'"
        },
        {
          "name": "HINT",
          "line": 26,
          "value": "'hint'"
        },
        {
          "name": "SYNTAX",
          "line": 31,
          "value": "'syntax'"
        },
        {
          "name": "TYPE",
          "line": 32,
          "value": "'type'"
        },
        {
          "name": "LOGIC",
          "line": 33,
          "value": "'logic'"
        },
        {
          "name": "PERFORMANCE",
          "line": 34,
          "value": "'performance'"
        },
        {
          "name": "SECURITY",
          "line": 35,
          "value": "'security'"
        },
        {
          "name": "STYLE",
          "line": 36,
          "value": "'style'"
        },
        {
          "name": "COMPATIBILITY",
          "line": 37,
          "value": "'compatibility'"
        },
        {
          "name": "DEPENDENCY",
          "line": 38,
          "value": "'dependency'"
        },
        {
          "name": "UNKNOWN",
          "line": 39,
          "value": "'unknown'"
        }
      ],
      "decorators": [
        "property",
        "classmethod",
        "staticmethod"
      ],
      "docstring": "\nComprehensive Error Retrieval System for Serena LSP Integration\n\nThis module provides comprehensive error retrieval capabilities from Serena LSP servers,\nincluding real-time error monitoring, categorization, and analysis.\n",
      "lines_of_code": 536,
      "complexity_score": 103,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/lsp/diagnostics.py",
      "file_name": "diagnostics.py",
      "functions": [
        {
          "name": "matches",
          "line": 41,
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check if error matches filter criteria.",
          "returns": "bool"
        },
        {
          "name": "update_from_errors",
          "line": 91,
          "args": [
            "self",
            "errors"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Update statistics from error list.",
          "returns": null
        },
        {
          "name": "__init__",
          "line": 128,
          "args": [
            "self",
            "history_size"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "add_error",
          "line": 138,
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Add a single error to aggregation.",
          "returns": null
        },
        {
          "name": "add_errors",
          "line": 144,
          "args": [
            "self",
            "errors"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Add multiple errors to aggregation.",
          "returns": null
        },
        {
          "name": "get_current_stats",
          "line": 153,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get current diagnostic statistics.",
          "returns": "DiagnosticStats"
        },
        {
          "name": "get_error_rate",
          "line": 157,
          "args": [
            "self",
            "time_window"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get error rate (errors per minute) over time window.\n\nArgs:\n    time_window: Time window in seconds (default: 5 minutes)\n    \nReturns:\n    Error rate per minute",
          "returns": "float"
        },
        {
          "name": "get_trend_analysis",
          "line": 177,
          "args": [
            "self",
            "time_window"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get trend analysis over time window.\n\nArgs:\n    time_window: Time window in seconds (default: 1 hour)\n    \nReturns:\n    Trend analysis data",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "get_historical_stats",
          "line": 228,
          "args": [
            "self",
            "count"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get historical statistics.",
          "returns": "List[DiagnosticStats]"
        },
        {
          "name": "clear_history",
          "line": 232,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Clear historical data.",
          "returns": null
        },
        {
          "name": "_update_current_stats",
          "line": 239,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Update current statistics.",
          "returns": null
        },
        {
          "name": "__init__",
          "line": 276,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "add_filter",
          "line": 299,
          "args": [
            "self",
            "filter_config"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Add diagnostic filter.",
          "returns": null
        },
        {
          "name": "remove_filter",
          "line": 303,
          "args": [
            "self",
            "filter_config"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Remove diagnostic filter.",
          "returns": null
        },
        {
          "name": "add_event_listener",
          "line": 308,
          "args": [
            "self",
            "event",
            "listener"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Add event listener.",
          "returns": null
        },
        {
          "name": "remove_event_listener",
          "line": 312,
          "args": [
            "self",
            "event",
            "listener"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Remove event listener.",
          "returns": null
        },
        {
          "name": "get_filtered_errors",
          "line": 335,
          "args": [
            "self",
            "additional_filter"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get errors filtered by current filters.\n\nArgs:\n    additional_filter: Additional filter to apply\n    \nReturns:\n    Filtered list of errors",
          "returns": "List[CodeError]"
        },
        {
          "name": "get_aggregated_stats",
          "line": 357,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get aggregated diagnostic statistics.",
          "returns": "DiagnosticStats"
        },
        {
          "name": "get_trend_analysis",
          "line": 361,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get trend analysis.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "get_processing_stats",
          "line": 365,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get processing performance statistics.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_start_processing",
          "line": 369,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Start the processing loop.",
          "returns": null
        },
        {
          "name": "__init__",
          "line": 521,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "add_error_handler",
          "line": 565,
          "args": [
            "self",
            "handler"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Add handler for new errors.",
          "returns": null
        },
        {
          "name": "add_stats_handler",
          "line": 569,
          "args": [
            "self",
            "handler"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Add handler for statistics updates.",
          "returns": null
        },
        {
          "name": "add_filter",
          "line": 573,
          "args": [
            "self",
            "filter_config"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Add diagnostic filter.",
          "returns": null
        },
        {
          "name": "get_current_errors",
          "line": 577,
          "args": [
            "self",
            "filter_config"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get current filtered errors.",
          "returns": "List[CodeError]"
        },
        {
          "name": "get_current_stats",
          "line": 581,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get current statistics.",
          "returns": "DiagnosticStats"
        },
        {
          "name": "get_trend_analysis",
          "line": 585,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get trend analysis.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "get_comprehensive_report",
          "line": 589,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get comprehensive diagnostic report.",
          "returns": "Dict[str, Any]"
        }
      ],
      "classes": [
        {
          "name": "DiagnosticEvent",
          "line": 21,
          "bases": [
            "Enum"
          ],
          "decorators": [],
          "methods": [],
          "docstring": "Diagnostic event types."
        },
        {
          "name": "DiagnosticFilter",
          "line": 31,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "matches",
              "line": 41,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Filter configuration for diagnostics."
        },
        {
          "name": "DiagnosticStats",
          "line": 79,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [
            {
              "name": "update_from_errors",
              "line": 91,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Diagnostic statistics."
        },
        {
          "name": "DiagnosticAggregator",
          "line": 117,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 128,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "add_error",
              "line": 138,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "add_errors",
              "line": 144,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_current_stats",
              "line": 153,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_error_rate",
              "line": 157,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_trend_analysis",
              "line": 177,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_historical_stats",
              "line": 228,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "clear_history",
              "line": 232,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_update_current_stats",
              "line": 239,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Aggregates and analyzes diagnostic data over time.\n\nFeatures:\n- Time-based aggregation\n- Trend analysis\n- Error rate calculation\n- Historical data tracking"
        },
        {
          "name": "DiagnosticProcessor",
          "line": 264,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 276,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "add_filter",
              "line": 299,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "remove_filter",
              "line": 303,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "add_event_listener",
              "line": 308,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "remove_event_listener",
              "line": 312,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_filtered_errors",
              "line": 335,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_aggregated_stats",
              "line": 357,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_trend_analysis",
              "line": 361,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_processing_stats",
              "line": 365,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_start_processing",
              "line": 369,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Main diagnostic processor for real-time error analysis.\n\nFeatures:\n- Real-time error processing\n- Filtering and categorization\n- Event-driven notifications\n- Batch processing\n- Performance monitoring"
        },
        {
          "name": "RealTimeDiagnostics",
          "line": 509,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 521,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "add_error_handler",
              "line": 565,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "add_stats_handler",
              "line": 569,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "add_filter",
              "line": 573,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_current_errors",
              "line": 577,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_current_stats",
              "line": 581,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_trend_analysis",
              "line": 585,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_comprehensive_report",
              "line": 589,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Real-time diagnostics system combining all diagnostic components.\n\nFeatures:\n- Real-time error monitoring\n- Comprehensive filtering and analysis\n- Event-driven architecture\n- Performance monitoring\n- Historical tracking"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "asyncio",
          "alias": null,
          "line": 8
        },
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "collections",
          "name": "defaultdict",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "collections",
          "name": "deque",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "field",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "enum",
          "name": "Enum",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Set",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Callable",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Deque",
          "alias": null,
          "line": 13
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "error_retrieval",
          "name": "CodeError",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "error_retrieval",
          "name": "ErrorSeverity",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "error_retrieval",
          "name": "ErrorCategory",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "error_retrieval",
          "name": "ComprehensiveErrorList",
          "alias": null,
          "line": 16
        },
        {
          "type": "import",
          "module": "fnmatch",
          "alias": null,
          "line": 53
        },
        {
          "type": "import",
          "module": "fnmatch",
          "alias": null,
          "line": 60
        }
      ],
      "constants": [
        {
          "name": "ERROR_ADDED",
          "line": 23,
          "value": "'error_added'"
        },
        {
          "name": "ERROR_REMOVED",
          "line": 24,
          "value": "'error_removed'"
        },
        {
          "name": "ERROR_UPDATED",
          "line": 25,
          "value": "'error_updated'"
        },
        {
          "name": "BATCH_PROCESSED",
          "line": 26,
          "value": "'batch_processed'"
        },
        {
          "name": "ANALYSIS_COMPLETE",
          "line": 27,
          "value": "'analysis_complete'"
        }
      ],
      "decorators": [],
      "docstring": "\nReal-time Diagnostics Processing for Serena LSP Integration\n\nThis module provides comprehensive diagnostic processing capabilities,\nincluding real-time error monitoring, filtering, aggregation, and analysis.\n",
      "lines_of_code": 641,
      "complexity_score": 126,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/lsp/client.py",
      "file_name": "client.py",
      "functions": [
        {
          "name": "__init__",
          "line": 61,
          "args": [
            "self",
            "server_command",
            "server_host",
            "server_port",
            "connection_type",
            "timeout",
            "auto_reconnect",
            "max_reconnect_attempts"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "add_error_listener",
          "line": 224,
          "args": [
            "self",
            "listener"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Add listener for error updates.",
          "returns": null
        },
        {
          "name": "add_connection_listener",
          "line": 228,
          "args": [
            "self",
            "listener"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Add listener for connection status changes.",
          "returns": null
        },
        {
          "name": "add_message_handler",
          "line": 232,
          "args": [
            "self",
            "handler"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Add custom message handler.",
          "returns": null
        },
        {
          "name": "is_connected",
          "line": 237,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Check if client is connected.",
          "returns": "bool"
        },
        {
          "name": "server_capabilities",
          "line": 242,
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "Get server capabilities.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_get_client_capabilities",
          "line": 563,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get client capabilities.",
          "returns": "Dict[str, Any]"
        }
      ],
      "classes": [
        {
          "name": "LSPError",
          "line": 25,
          "bases": [
            "Exception"
          ],
          "decorators": [],
          "methods": [],
          "docstring": "Base LSP error."
        },
        {
          "name": "LSPConnectionError",
          "line": 30,
          "bases": [
            "LSPError"
          ],
          "decorators": [],
          "methods": [],
          "docstring": "LSP connection error."
        },
        {
          "name": "LSPTimeoutError",
          "line": 35,
          "bases": [
            "LSPError"
          ],
          "decorators": [],
          "methods": [],
          "docstring": "LSP timeout error."
        },
        {
          "name": "ConnectionType",
          "line": 40,
          "bases": [],
          "decorators": [],
          "methods": [],
          "docstring": "LSP connection types."
        },
        {
          "name": "SerenaLSPClient",
          "line": 48,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 61,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "add_error_listener",
              "line": 224,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "add_connection_listener",
              "line": 228,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "add_message_handler",
              "line": 232,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "is_connected",
              "line": 237,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "server_capabilities",
              "line": 242,
              "is_property": true,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_get_client_capabilities",
              "line": 563,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Comprehensive LSP client for Serena language servers.\n\nFeatures:\n- Multiple connection types (stdio, TCP, WebSocket, HTTP)\n- Automatic reconnection and error recovery\n- Real-time error monitoring\n- Request/response correlation\n- Notification handling\n- Connection health monitoring"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "asyncio",
          "alias": null,
          "line": 9
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 10
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 11
        },
        {
          "type": "import",
          "module": "subprocess",
          "alias": null,
          "line": 12
        },
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Callable",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Union",
          "alias": null,
          "line": 15
        },
        {
          "type": "import",
          "module": "websockets",
          "alias": null,
          "line": 16
        },
        {
          "type": "import",
          "module": "aiohttp",
          "alias": null,
          "line": 17
        },
        {
          "type": "from_import",
          "module": "protocol",
          "name": "ProtocolHandler",
          "alias": null,
          "line": 19
        },
        {
          "type": "from_import",
          "module": "protocol",
          "name": "LSPRequest",
          "alias": null,
          "line": 19
        },
        {
          "type": "from_import",
          "module": "protocol",
          "name": "LSPResponse",
          "alias": null,
          "line": 19
        },
        {
          "type": "from_import",
          "module": "protocol",
          "name": "LSPNotification",
          "alias": null,
          "line": 19
        },
        {
          "type": "from_import",
          "module": "protocol",
          "name": "SerenaProtocolExtensions",
          "alias": null,
          "line": 19
        },
        {
          "type": "from_import",
          "module": "error_retrieval",
          "name": "ErrorRetriever",
          "alias": null,
          "line": 20
        },
        {
          "type": "from_import",
          "module": "error_retrieval",
          "name": "ComprehensiveErrorList",
          "alias": null,
          "line": 20
        },
        {
          "type": "from_import",
          "module": "error_retrieval",
          "name": "CodeError",
          "alias": null,
          "line": 20
        }
      ],
      "constants": [
        {
          "name": "STDIO",
          "line": 42,
          "value": "'stdio'"
        },
        {
          "name": "TCP",
          "line": 43,
          "value": "'tcp'"
        },
        {
          "name": "WEBSOCKET",
          "line": 44,
          "value": "'websocket'"
        },
        {
          "name": "HTTP",
          "line": 45,
          "value": "'http'"
        }
      ],
      "decorators": [
        "property"
      ],
      "docstring": "\nSerena LSP Client Implementation\n\nThis module provides a comprehensive LSP client for communicating with Serena\nlanguage servers, handling connection management, message routing, and\nreal-time error retrieval.\n",
      "lines_of_code": 588,
      "complexity_score": 58,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/lsp/__init__.py",
      "file_name": "__init__.py",
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "client",
          "name": "SerenaLSPClient",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "client",
          "name": "LSPError",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "client",
          "name": "LSPConnectionError",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "client",
          "name": "LSPTimeoutError",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "server_manager",
          "name": "SerenaServerManager",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "server_manager",
          "name": "ServerConfig",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "server_manager",
          "name": "ServerStatus",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "error_retrieval",
          "name": "ErrorRetriever",
          "alias": null,
          "line": 21
        },
        {
          "type": "from_import",
          "module": "error_retrieval",
          "name": "CodeError",
          "alias": null,
          "line": 21
        },
        {
          "type": "from_import",
          "module": "error_retrieval",
          "name": "ErrorSeverity",
          "alias": null,
          "line": 21
        },
        {
          "type": "from_import",
          "module": "error_retrieval",
          "name": "ErrorCategory",
          "alias": null,
          "line": 21
        },
        {
          "type": "from_import",
          "module": "error_retrieval",
          "name": "ErrorLocation",
          "alias": null,
          "line": 21
        },
        {
          "type": "from_import",
          "module": "error_retrieval",
          "name": "ComprehensiveErrorList",
          "alias": null,
          "line": 21
        },
        {
          "type": "from_import",
          "module": "diagnostics",
          "name": "DiagnosticProcessor",
          "alias": null,
          "line": 30
        },
        {
          "type": "from_import",
          "module": "diagnostics",
          "name": "DiagnosticFilter",
          "alias": null,
          "line": 30
        },
        {
          "type": "from_import",
          "module": "diagnostics",
          "name": "DiagnosticAggregator",
          "alias": null,
          "line": 30
        },
        {
          "type": "from_import",
          "module": "diagnostics",
          "name": "RealTimeDiagnostics",
          "alias": null,
          "line": 30
        },
        {
          "type": "from_import",
          "module": "protocol",
          "name": "LSPMessage",
          "alias": null,
          "line": 37
        },
        {
          "type": "from_import",
          "module": "protocol",
          "name": "LSPRequest",
          "alias": null,
          "line": 37
        },
        {
          "type": "from_import",
          "module": "protocol",
          "name": "LSPResponse",
          "alias": null,
          "line": 37
        },
        {
          "type": "from_import",
          "module": "protocol",
          "name": "LSPNotification",
          "alias": null,
          "line": 37
        },
        {
          "type": "from_import",
          "module": "protocol",
          "name": "ProtocolHandler",
          "alias": null,
          "line": 37
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nLSP (Language Server Protocol) Integration for Serena Analysis\n\nThis module provides LSP client capabilities to communicate with Serena language servers\nfor real-time code analysis, error detection, and comprehensive code intelligence.\n",
      "lines_of_code": 78,
      "complexity_score": 22,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/realtime/__init__.py",
      "file_name": "__init__.py",
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "realtime_analyzer",
          "name": "RealtimeAnalyzer",
          "alias": null,
          "line": 8
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nReal-time Analysis System for Serena LSP Integration\n\nThis module provides file monitoring and incremental analysis capabilities\nfor real-time code intelligence.\n",
      "lines_of_code": 11,
      "complexity_score": 1,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/realtime/realtime_analyzer.py",
      "file_name": "realtime_analyzer.py",
      "functions": [
        {
          "name": "__init__",
          "line": 30,
          "args": [
            "self",
            "codebase_path",
            "serena_core"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "get_status",
          "line": 234,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get real-time analyzer status.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_should_monitor_file",
          "line": 276,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check if a file should be monitored.",
          "returns": "bool"
        },
        {
          "name": "_analyze_imports",
          "line": 426,
          "args": [
            "self",
            "content"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Analyze import statements in file content.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "_calculate_code_metrics",
          "line": 442,
          "args": [
            "self",
            "content",
            "lines"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Calculate basic code metrics.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "__init__",
          "line": 482,
          "args": [
            "self",
            "analyzer"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "on_modified",
          "line": 486,
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Handle file modification events.",
          "returns": null
        },
        {
          "name": "on_created",
          "line": 493,
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Handle file creation events.",
          "returns": null
        },
        {
          "name": "on_deleted",
          "line": 500,
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Handle file deletion events.",
          "returns": null
        },
        {
          "name": "on_moved",
          "line": 512,
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Handle file move events.",
          "returns": null
        }
      ],
      "classes": [
        {
          "name": "RealtimeAnalyzer",
          "line": 18,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 30,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_status",
              "line": 234,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_should_monitor_file",
              "line": 276,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_analyze_imports",
              "line": 426,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_calculate_code_metrics",
              "line": 442,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Provides real-time analysis capabilities.\n\nFeatures:\n- File system monitoring\n- Incremental analysis on file changes\n- Debounced change processing\n- Background analysis tasks\n- Integration with symbol intelligence and diagnostics"
        },
        {
          "name": "RealtimeFileHandler",
          "line": 479,
          "bases": [
            "FileSystemEventHandler"
          ],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 482,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "on_modified",
              "line": 486,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "on_created",
              "line": 493,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "on_deleted",
              "line": 500,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "on_moved",
              "line": 512,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "File system event handler for real-time monitoring."
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "asyncio",
          "alias": null,
          "line": 7
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 8
        },
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Set",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "watchdog.observers",
          "name": "Observer",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "watchdog.events",
          "name": "FileSystemEventHandler",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "watchdog.events",
          "name": "FileModifiedEvent",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "watchdog.events",
          "name": "FileCreatedEvent",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "watchdog.events",
          "name": "FileDeletedEvent",
          "alias": null,
          "line": 13
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nReal-time Analyzer\n\nProvides file watching and incremental analysis capabilities.\n",
      "lines_of_code": 526,
      "complexity_score": 50,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/analysis/realtime_analyzer.py",
      "file_name": "realtime_analyzer.py",
      "functions": [
        {
          "name": "__init__",
          "line": 53,
          "args": [
            "self",
            "codebase",
            "lsp_bridge",
            "config"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "start",
          "line": 81,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Start the real-time analysis engine.",
          "returns": "None"
        },
        {
          "name": "stop",
          "line": 97,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Stop the real-time analysis engine.",
          "returns": "None"
        },
        {
          "name": "analyze_file",
          "line": 108,
          "args": [
            "self",
            "file_path",
            "force"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Analyze a specific file.\n\nArgs:\n    file_path: Path to the file to analyze\n    force: Force analysis even if file hasn't changed\n\nReturns:\n    Analysis result or None if analysis failed",
          "returns": "Optional[AnalysisResult]"
        },
        {
          "name": "get_analysis_results",
          "line": 195,
          "args": [
            "self",
            "file_paths"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get analysis results for specified files or all analyzed files.",
          "returns": "Dict[str, AnalysisResult]"
        },
        {
          "name": "queue_analysis",
          "line": 205,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Queue a file for analysis.",
          "returns": "None"
        },
        {
          "name": "get_status",
          "line": 209,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get analyzer status.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_analysis_loop",
          "line": 219,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Main analysis loop running in background thread.",
          "returns": "None"
        },
        {
          "name": "_should_analyze_file",
          "line": 252,
          "args": [
            "self",
            "file_path",
            "force"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check if file should be analyzed.",
          "returns": "bool"
        },
        {
          "name": "_check_syntax_errors",
          "line": 273,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check for syntax errors using LSP diagnostics.",
          "returns": "List[CodeIssue]"
        },
        {
          "name": "_check_unused_imports",
          "line": 294,
          "args": [
            "self",
            "file_obj"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check for unused imports.",
          "returns": "List[CodeIssue]"
        },
        {
          "name": "_check_undefined_variables",
          "line": 326,
          "args": [
            "self",
            "file_obj"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check for undefined variables.",
          "returns": "List[CodeIssue]"
        },
        {
          "name": "_analyze_complexity",
          "line": 339,
          "args": [
            "self",
            "file_obj"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Analyze code complexity metrics.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "_check_style_violations",
          "line": 375,
          "args": [
            "self",
            "file_obj"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Check for style violations.",
          "returns": "List[CodeIssue]"
        },
        {
          "name": "_calculate_complexity_score",
          "line": 415,
          "args": [
            "self",
            "metrics"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Calculate complexity score (0-1, lower is better).",
          "returns": "float"
        },
        {
          "name": "_calculate_maintainability_score",
          "line": 429,
          "args": [
            "self",
            "issues",
            "metrics"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Calculate maintainability score (0-1, higher is better).",
          "returns": "float"
        }
      ],
      "classes": [
        {
          "name": "AnalysisResult",
          "line": 22,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Result of real-time analysis."
        },
        {
          "name": "CodeIssue",
          "line": 34,
          "bases": [],
          "decorators": [
            "dataclass"
          ],
          "methods": [],
          "docstring": "Represents a code issue found during analysis."
        },
        {
          "name": "RealtimeAnalyzer",
          "line": 45,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 53,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "start",
              "line": 81,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "stop",
              "line": 97,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "analyze_file",
              "line": 108,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_analysis_results",
              "line": 195,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "queue_analysis",
              "line": 205,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_status",
              "line": 209,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_analysis_loop",
              "line": 219,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_should_analyze_file",
              "line": 252,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_check_syntax_errors",
              "line": 273,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_check_unused_imports",
              "line": 294,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_check_undefined_variables",
              "line": 326,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_analyze_complexity",
              "line": 339,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_check_style_violations",
              "line": 375,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_calculate_complexity_score",
              "line": 415,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "_calculate_maintainability_score",
              "line": 429,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Real-time code analysis engine.\n\nContinuously monitors code changes and provides instant feedback\non code quality, potential issues, and improvement suggestions."
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 7
        },
        {
          "type": "import",
          "module": "threading",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Set",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "concurrent.futures",
          "name": "ThreadPoolExecutor",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "concurrent.futures",
          "name": "as_completed",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "graph_sitter.shared.logging.get_logger",
          "name": "get_logger",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.codebase",
          "name": "Codebase",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "graph_sitter.extensions.lsp.serena_bridge",
          "name": "SerenaLSPBridge",
          "alias": null,
          "line": 16
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nReal-time Analysis Engine\n\nProvides continuous code analysis and quality monitoring.\n",
      "lines_of_code": 451,
      "complexity_score": 71,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/analysis/__init__.py",
      "file_name": "__init__.py",
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "realtime_analyzer",
          "name": "RealtimeAnalyzer",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "realtime_analyzer",
          "name": "AnalysisResult",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "realtime_analyzer",
          "name": "CodeIssue",
          "alias": null,
          "line": 7
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nSerena Analysis Module\n\nReal-time code analysis and quality monitoring.\n",
      "lines_of_code": 14,
      "complexity_score": 3,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/search/__init__.py",
      "file_name": "__init__.py",
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "semantic_search",
          "name": "SemanticSearch",
          "alias": null,
          "line": 7
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nSemantic Search Module\n\nProvides enhanced search capabilities with natural language processing.\n",
      "lines_of_code": 10,
      "complexity_score": 1,
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/graph-sitter/src/graph_sitter/extensions/serena/search/semantic_search.py",
      "file_name": "semantic_search.py",
      "functions": [
        {
          "name": "__init__",
          "line": 18,
          "args": [
            "self",
            "codebase",
            "lsp_bridge"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "returns": null
        },
        {
          "name": "semantic_search",
          "line": 22,
          "args": [
            "self",
            "query",
            "language"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Perform semantic search across the codebase.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "find_code_patterns",
          "line": 64,
          "args": [
            "self",
            "pattern",
            "suggest_improvements"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find code patterns matching the specified pattern.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "find_similar_code",
          "line": 75,
          "args": [
            "self",
            "reference_code",
            "similarity_threshold"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Find code similar to the reference code.",
          "returns": "List[Dict[str, Any]]"
        },
        {
          "name": "get_status",
          "line": 85,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Get status information.",
          "returns": "Dict[str, Any]"
        },
        {
          "name": "shutdown",
          "line": 89,
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Shutdown semantic search.",
          "returns": "None"
        }
      ],
      "classes": [
        {
          "name": "SemanticSearch",
          "line": 15,
          "bases": [],
          "decorators": [],
          "methods": [
            {
              "name": "__init__",
              "line": 18,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "semantic_search",
              "line": 22,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "find_code_patterns",
              "line": 64,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "find_similar_code",
              "line": 75,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "get_status",
              "line": 85,
              "is_property": false,
              "is_static": false,
              "is_class": false
            },
            {
              "name": "shutdown",
              "line": 89,
              "is_property": false,
              "is_static": false,
              "is_class": false
            }
          ],
          "docstring": "Provides semantic search capabilities."
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "graph_sitter.shared.logging.get_logger",
          "name": "get_logger",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "graph_sitter.core.codebase",
          "name": "Codebase",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "graph_sitter.extensions.lsp.serena_bridge",
          "name": "SerenaLSPBridge",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "intelligence.code_intelligence",
          "name": "CodeIntelligence",
          "alias": null,
          "line": 27
        }
      ],
      "constants": [],
      "decorators": [],
      "docstring": "\nSemantic Search\n\nProvides enhanced search with natural language queries and pattern matching.\n",
      "lines_of_code": 91,
      "complexity_score": 29,
      "issues": []
    }
  ],
  "serena_patterns": {
    "serena_classes": [
      {
        "file": "serena_bridge.py",
        "class": "SerenaLSPBridge",
        "methods": 15,
        "bases": []
      },
      {
        "file": "core.py",
        "class": "SerenaCore",
        "methods": 10,
        "bases": []
      },
      {
        "file": "lsp_integration.py",
        "class": "SerenaLSPIntegration",
        "methods": 12,
        "bases": []
      },
      {
        "file": "types.py",
        "class": "SerenaCapability",
        "methods": 0,
        "bases": [
          "Enum"
        ]
      },
      {
        "file": "types.py",
        "class": "SerenaConfig",
        "methods": 0,
        "bases": []
      },
      {
        "file": "types.py",
        "class": "CodeGenerationResult",
        "methods": 1,
        "bases": []
      },
      {
        "file": "types.py",
        "class": "AnalysisContext",
        "methods": 2,
        "bases": []
      },
      {
        "file": "serena_types.py",
        "class": "CodeGenerationResult",
        "methods": 0,
        "bases": []
      },
      {
        "file": "serena_types.py",
        "class": "SerenaCapability",
        "methods": 0,
        "bases": [
          "Enum"
        ]
      },
      {
        "file": "serena_types.py",
        "class": "SerenaConfig",
        "methods": 4,
        "bases": []
      },
      {
        "file": "integration.py",
        "class": "SerenaIntegration",
        "methods": 23,
        "bases": []
      },
      {
        "file": "api.py",
        "class": "SerenaAPI",
        "methods": 17,
        "bases": []
      },
      {
        "file": "mcp_bridge.py",
        "class": "SerenaMCPBridge",
        "methods": 14,
        "bases": []
      },
      {
        "file": "protocol.py",
        "class": "SerenaProtocolExtensions",
        "methods": 4,
        "bases": []
      },
      {
        "file": "server_manager.py",
        "class": "SerenaServerManager",
        "methods": 14,
        "bases": []
      },
      {
        "file": "client.py",
        "class": "SerenaLSPClient",
        "methods": 7,
        "bases": []
      },
      {
        "file": "realtime_analyzer.py",
        "class": "AnalysisResult",
        "methods": 0,
        "bases": []
      }
    ],
    "serena_functions": [
      {
        "file": "deep_analysis.py",
        "function": "analyze_comprehensive_metrics",
        "args": 1,
        "decorators": []
      },
      {
        "file": "deep_analysis.py",
        "function": "analyze_hotspots",
        "args": 1,
        "decorators": []
      },
      {
        "file": "deep_analysis.py",
        "function": "generate_visualization_data",
        "args": 1,
        "decorators": []
      },
      {
        "file": "deep_analysis.py",
        "function": "_generate_hierarchy_data",
        "args": 4,
        "decorators": []
      },
      {
        "file": "deep_analysis.py",
        "function": "_generate_chart_data",
        "args": 4,
        "decorators": []
      },
      {
        "file": "deep_analysis.py",
        "function": "_generate_heatmap_data",
        "args": 4,
        "decorators": []
      },
      {
        "file": "code_generator.py",
        "function": "generate_code",
        "args": 3,
        "decorators": []
      },
      {
        "file": "code_generator.py",
        "function": "_generate_from_prompt",
        "args": 3,
        "decorators": []
      },
      {
        "file": "code_generator.py",
        "function": "generate_boilerplate",
        "args": 4,
        "decorators": []
      },
      {
        "file": "code_generator.py",
        "function": "generate_tests",
        "args": 3,
        "decorators": []
      },
      {
        "file": "code_generator.py",
        "function": "generate_documentation",
        "args": 3,
        "decorators": []
      },
      {
        "file": "codebase_ai.py",
        "function": "generate_system_prompt",
        "args": 2,
        "decorators": []
      },
      {
        "file": "codebase_ai.py",
        "function": "generate_flag_system_prompt",
        "args": 2,
        "decorators": []
      },
      {
        "file": "codebase_ai.py",
        "function": "generate_context",
        "args": 1,
        "decorators": []
      },
      {
        "file": "codebase_ai.py",
        "function": "generate_tools",
        "args": 0,
        "decorators": []
      },
      {
        "file": "codebase_ai.py",
        "function": "generate_flag_tools",
        "args": 0,
        "decorators": []
      },
      {
        "file": "serena_bridge.py",
        "function": "get_completions",
        "args": 4,
        "decorators": []
      },
      {
        "file": "python_server.py",
        "function": "_get_mock_completions",
        "args": 4,
        "decorators": []
      },
      {
        "file": "base.py",
        "function": "_check_server_availability",
        "args": 1,
        "decorators": []
      },
      {
        "file": "base.py",
        "function": "get_completions",
        "args": 4,
        "decorators": []
      },
      {
        "file": "base.py",
        "function": "_get_mock_completions",
        "args": 4,
        "decorators": []
      },
      {
        "file": "advanced_error_viewer.py",
        "function": "_generate_quick_summary",
        "args": 2,
        "decorators": []
      },
      {
        "file": "advanced_error_viewer.py",
        "function": "_generate_implementation_guide",
        "args": 2,
        "decorators": []
      },
      {
        "file": "advanced_error_viewer.py",
        "function": "_analyze_dependency_impact",
        "args": 2,
        "decorators": []
      },
      {
        "file": "advanced_error_viewer.py",
        "function": "_generate_code_annotations",
        "args": 2,
        "decorators": []
      },
      {
        "file": "auto_init.py",
        "function": "initialize_serena_integration",
        "args": 0,
        "decorators": []
      },
      {
        "file": "auto_init.py",
        "function": "add_serena_to_codebase",
        "args": 1,
        "decorators": []
      },
      {
        "file": "error_analysis.py",
        "function": "analyze_codebase_errors",
        "args": 2,
        "decorators": []
      },
      {
        "file": "error_analysis.py",
        "function": "_initialize_serena_components",
        "args": 1,
        "decorators": []
      },
      {
        "file": "error_analysis.py",
        "function": "analyze_error_context",
        "args": 2,
        "decorators": []
      },
      {
        "file": "error_analysis.py",
        "function": "_analyze_parameter_issues",
        "args": 3,
        "decorators": []
      },
      {
        "file": "error_analysis.py",
        "function": "_build_dependency_chain",
        "args": 2,
        "decorators": []
      },
      {
        "file": "error_analysis.py",
        "function": "_generate_fix_suggestions",
        "args": 3,
        "decorators": []
      },
      {
        "file": "error_analysis.py",
        "function": "_analyze_parameters_via_ast",
        "args": 3,
        "decorators": []
      },
      {
        "file": "lsp_integration.py",
        "function": "_requires_serena_core",
        "args": 1,
        "decorators": []
      },
      {
        "file": "lsp_integration.py",
        "function": "get_serena_core",
        "args": 1,
        "decorators": []
      },
      {
        "file": "semantic_tools.py",
        "function": "get_completions",
        "args": 4,
        "decorators": []
      },
      {
        "file": "semantic_tools.py",
        "function": "analyze_code_quality",
        "args": 2,
        "decorators": []
      },
      {
        "file": "semantic_tools.py",
        "function": "get_available_tools",
        "args": 1,
        "decorators": []
      },
      {
        "file": "semantic_tools.py",
        "function": "_parse_completion_results",
        "args": 2,
        "decorators": []
      },
      {
        "file": "types.py",
        "function": "is_available",
        "args": 1,
        "decorators": [
          "property"
        ]
      },
      {
        "file": "integration.py",
        "function": "add_serena_to_codebase",
        "args": 1,
        "decorators": []
      },
      {
        "file": "integration.py",
        "function": "_ensure_serena_initialized",
        "args": 1,
        "decorators": []
      },
      {
        "file": "integration.py",
        "function": "get_completions",
        "args": 4,
        "decorators": []
      },
      {
        "file": "integration.py",
        "function": "generate_boilerplate",
        "args": 4,
        "decorators": []
      },
      {
        "file": "integration.py",
        "function": "generate_tests",
        "args": 3,
        "decorators": []
      },
      {
        "file": "integration.py",
        "function": "generate_documentation",
        "args": 3,
        "decorators": []
      },
      {
        "file": "integration.py",
        "function": "analyze_symbol_impact",
        "args": 3,
        "decorators": []
      },
      {
        "file": "integration.py",
        "function": "get_serena_status",
        "args": 1,
        "decorators": []
      },
      {
        "file": "integration.py",
        "function": "shutdown_serena",
        "args": 1,
        "decorators": []
      },
      {
        "file": "integration.py",
        "function": "_get_serena_integration",
        "args": 1,
        "decorators": []
      },
      {
        "file": "advanced_context.py",
        "function": "_analyze_control_flow",
        "args": 2,
        "decorators": []
      },
      {
        "file": "advanced_context.py",
        "function": "_analyze_class_methods",
        "args": 2,
        "decorators": []
      },
      {
        "file": "advanced_context.py",
        "function": "_analyze_class_attributes",
        "args": 2,
        "decorators": []
      },
      {
        "file": "advanced_context.py",
        "function": "_analyze_module_dependencies",
        "args": 2,
        "decorators": []
      },
      {
        "file": "advanced_context.py",
        "function": "_analyze_technology_stack",
        "args": 1,
        "decorators": []
      },
      {
        "file": "advanced_context.py",
        "function": "_build_dependency_chain",
        "args": 2,
        "decorators": []
      },
      {
        "file": "api.py",
        "function": "create_serena_api",
        "args": 2,
        "decorators": []
      },
      {
        "file": "api.py",
        "function": "analyze_file_errors",
        "args": 2,
        "decorators": []
      },
      {
        "file": "knowledge_integration.py",
        "function": "_initialize_serena_components",
        "args": 1,
        "decorators": []
      },
      {
        "file": "mcp_bridge.py",
        "function": "_get_default_serena_command",
        "args": 1,
        "decorators": []
      },
      {
        "file": "mcp_bridge.py",
        "function": "_setup_local_serena",
        "args": 1,
        "decorators": []
      },
      {
        "file": "mcp_bridge.py",
        "function": "get_available_tools",
        "args": 1,
        "decorators": []
      },
      {
        "file": "mcp_bridge.py",
        "function": "is_tool_available",
        "args": 2,
        "decorators": []
      },
      {
        "file": "symbol_intelligence.py",
        "function": "_generate_impact_recommendations",
        "args": 4,
        "decorators": []
      },
      {
        "file": "code_intelligence.py",
        "function": "get_completions",
        "args": 4,
        "decorators": []
      },
      {
        "file": "code_intelligence.py",
        "function": "generate_code",
        "args": 3,
        "decorators": []
      },
      {
        "file": "code_intelligence.py",
        "function": "_generate_code_from_prompt",
        "args": 3,
        "decorators": []
      },
      {
        "file": "signatures.py",
        "function": "_analyze_function_call",
        "args": 4,
        "decorators": []
      },
      {
        "file": "completions.py",
        "function": "get_completions",
        "args": 4,
        "decorators": []
      },
      {
        "file": "completions.py",
        "function": "_get_completion_context",
        "args": 4,
        "decorators": []
      },
      {
        "file": "completions.py",
        "function": "_get_lsp_completions",
        "args": 5,
        "decorators": []
      },
      {
        "file": "completions.py",
        "function": "_get_symbol_completions",
        "args": 5,
        "decorators": []
      },
      {
        "file": "completions.py",
        "function": "_get_keyword_completions",
        "args": 3,
        "decorators": []
      },
      {
        "file": "completions.py",
        "function": "_get_snippet_completions",
        "args": 3,
        "decorators": []
      },
      {
        "file": "completions.py",
        "function": "_get_ai_completions",
        "args": 5,
        "decorators": []
      },
      {
        "file": "completions.py",
        "function": "_process_completions",
        "args": 3,
        "decorators": []
      },
      {
        "file": "completions.py",
        "function": "_symbol_to_completion_kind",
        "args": 2,
        "decorators": []
      },
      {
        "file": "completions.py",
        "function": "_get_symbol_detail",
        "args": 2,
        "decorators": []
      },
      {
        "file": "completions.py",
        "function": "_generate_contextual_suggestions",
        "args": 2,
        "decorators": []
      },
      {
        "file": "completions.py",
        "function": "_get_cached_completions",
        "args": 2,
        "decorators": []
      },
      {
        "file": "completions.py",
        "function": "_cache_completions",
        "args": 3,
        "decorators": []
      },
      {
        "file": "code_generator.py",
        "function": "generate_code",
        "args": 3,
        "decorators": []
      },
      {
        "file": "code_generator.py",
        "function": "_generate_from_prompt",
        "args": 3,
        "decorators": []
      },
      {
        "file": "code_generator.py",
        "function": "generate_boilerplate",
        "args": 4,
        "decorators": []
      },
      {
        "file": "code_generator.py",
        "function": "generate_tests",
        "args": 3,
        "decorators": []
      },
      {
        "file": "code_generator.py",
        "function": "generate_documentation",
        "args": 3,
        "decorators": []
      },
      {
        "file": "protocol.py",
        "function": "generate_message_id",
        "args": 1,
        "decorators": []
      },
      {
        "file": "protocol.py",
        "function": "create_analyze_file_request",
        "args": 2,
        "decorators": [
          "staticmethod"
        ]
      },
      {
        "file": "protocol.py",
        "function": "create_analyze_codebase_request",
        "args": 3,
        "decorators": [
          "staticmethod"
        ]
      },
      {
        "file": "realtime_analyzer.py",
        "function": "_analyze_imports",
        "args": 2,
        "decorators": []
      },
      {
        "file": "realtime_analyzer.py",
        "function": "analyze_file",
        "args": 3,
        "decorators": []
      },
      {
        "file": "realtime_analyzer.py",
        "function": "_should_analyze_file",
        "args": 3,
        "decorators": []
      },
      {
        "file": "realtime_analyzer.py",
        "function": "_analyze_complexity",
        "args": 2,
        "decorators": []
      },
      {
        "file": "realtime_analyzer.py",
        "function": "_calculate_maintainability_score",
        "args": 3,
        "decorators": []
      }
    ],
    "ai_integration_points": [
      {
        "file": "core.py",
        "import": {
          "type": "from_import",
          "module": "intelligence.completions",
          "name": "CompletionProvider",
          "alias": null,
          "line": 375
        }
      },
      {
        "file": "code_intelligence.py",
        "import": {
          "type": "from_import",
          "module": "completions",
          "name": "CompletionProvider",
          "alias": null,
          "line": 28
        }
      },
      {
        "file": "__init__.py",
        "import": {
          "type": "from_import",
          "module": "completions",
          "name": "CompletionProvider",
          "alias": null,
          "line": 9
        }
      }
    ],
    "lsp_integration_points": [
      {
        "file": "code_generator.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.extensions.lsp.serena_bridge",
          "name": "SerenaLSPBridge",
          "alias": null,
          "line": 10
        }
      },
      {
        "file": "codebase.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_methods",
          "name": "LSPMethodsMixin",
          "alias": null,
          "line": 11
        }
      },
      {
        "file": "codebase.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "ErrorInfo",
          "alias": null,
          "line": 12
        }
      },
      {
        "file": "codebase.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "ErrorCollection",
          "alias": null,
          "line": 12
        }
      },
      {
        "file": "codebase.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "ErrorSummary",
          "alias": null,
          "line": 12
        }
      },
      {
        "file": "codebase.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "ErrorContext",
          "alias": null,
          "line": 12
        }
      },
      {
        "file": "codebase.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "QuickFix",
          "alias": null,
          "line": 12
        }
      },
      {
        "file": "codebase.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "CompletionItem",
          "alias": null,
          "line": 12
        }
      },
      {
        "file": "codebase.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "HoverInfo",
          "alias": null,
          "line": 12
        }
      },
      {
        "file": "codebase.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "SignatureHelp",
          "alias": null,
          "line": 12
        }
      },
      {
        "file": "codebase.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "SymbolInfo",
          "alias": null,
          "line": 12
        }
      },
      {
        "file": "codebase.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "LSPCapabilities",
          "alias": null,
          "line": 12
        }
      },
      {
        "file": "codebase.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "LSPStatus",
          "alias": null,
          "line": 12
        }
      },
      {
        "file": "codebase.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "HealthCheck",
          "alias": null,
          "line": 12
        }
      },
      {
        "file": "codebase.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "ErrorSeverity",
          "alias": null,
          "line": 12
        }
      },
      {
        "file": "codebase.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "ErrorType",
          "alias": null,
          "line": 12
        }
      },
      {
        "file": "codebase.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "Position",
          "alias": null,
          "line": 12
        }
      },
      {
        "file": "codebase.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.core.lsp_types",
          "name": "Range",
          "alias": null,
          "line": 12
        }
      },
      {
        "file": "diagnostics.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.extensions.lsp.transaction_manager",
          "name": "get_lsp_manager",
          "alias": null,
          "line": 20
        }
      },
      {
        "file": "diagnostics.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.extensions.lsp.transaction_manager",
          "name": "TransactionAwareLSPManager",
          "alias": null,
          "line": 20
        }
      },
      {
        "file": "diagnostics.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.extensions.lsp.serena_bridge",
          "name": "ErrorInfo",
          "alias": null,
          "line": 21
        }
      },
      {
        "file": "serena_bridge.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "DiagnosticSeverity",
          "alias": null,
          "line": 19
        }
      },
      {
        "file": "serena_bridge.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Diagnostic",
          "alias": null,
          "line": 19
        }
      },
      {
        "file": "serena_bridge.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Position",
          "alias": null,
          "line": 19
        }
      },
      {
        "file": "serena_bridge.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Range",
          "alias": null,
          "line": 19
        }
      },
      {
        "file": "serena_bridge.py",
        "import": {
          "type": "from_import",
          "module": "language_servers.base",
          "name": "BaseLanguageServer",
          "alias": null,
          "line": 20
        }
      },
      {
        "file": "serena_bridge.py",
        "import": {
          "type": "from_import",
          "module": "language_servers.python_server",
          "name": "PythonLanguageServer",
          "alias": null,
          "line": 21
        }
      },
      {
        "file": "python_server.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Diagnostic",
          "alias": null,
          "line": 14
        }
      },
      {
        "file": "python_server.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "CompletionItem",
          "alias": null,
          "line": 14
        }
      },
      {
        "file": "python_server.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "CompletionItemKind",
          "alias": null,
          "line": 14
        }
      },
      {
        "file": "python_server.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Hover",
          "alias": null,
          "line": 14
        }
      },
      {
        "file": "python_server.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "SignatureHelp",
          "alias": null,
          "line": 14
        }
      },
      {
        "file": "python_server.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Position",
          "alias": null,
          "line": 14
        }
      },
      {
        "file": "python_server.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Range",
          "alias": null,
          "line": 14
        }
      },
      {
        "file": "python_server.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "DiagnosticSeverity",
          "alias": null,
          "line": 14
        }
      },
      {
        "file": "python_server.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "MarkupContent",
          "alias": null,
          "line": 14
        }
      },
      {
        "file": "python_server.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "SignatureHelp",
          "alias": null,
          "line": 266
        }
      },
      {
        "file": "python_server.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "SignatureInformation",
          "alias": null,
          "line": 266
        }
      },
      {
        "file": "python_server.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "ParameterInformation",
          "alias": null,
          "line": 266
        }
      },
      {
        "file": "base.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Diagnostic",
          "alias": null,
          "line": 16
        }
      },
      {
        "file": "base.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "CompletionItem",
          "alias": null,
          "line": 16
        }
      },
      {
        "file": "base.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Hover",
          "alias": null,
          "line": 16
        }
      },
      {
        "file": "base.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "SignatureHelp",
          "alias": null,
          "line": 16
        }
      },
      {
        "file": "base.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Position",
          "alias": null,
          "line": 16
        }
      },
      {
        "file": "base.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Range",
          "alias": null,
          "line": 16
        }
      },
      {
        "file": "base.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "TextEdit",
          "alias": null,
          "line": 16
        }
      },
      {
        "file": "base.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "WorkspaceEdit",
          "alias": null,
          "line": 16
        }
      },
      {
        "file": "base.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "CompletionItem",
          "alias": null,
          "line": 230
        }
      },
      {
        "file": "base.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "CompletionItemKind",
          "alias": null,
          "line": 230
        }
      },
      {
        "file": "base.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "Hover",
          "alias": null,
          "line": 249
        }
      },
      {
        "file": "base.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "MarkupContent",
          "alias": null,
          "line": 249
        }
      },
      {
        "file": "base.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "SignatureHelp",
          "alias": null,
          "line": 260
        }
      },
      {
        "file": "base.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "SignatureInformation",
          "alias": null,
          "line": 260
        }
      },
      {
        "file": "base.py",
        "import": {
          "type": "from_import",
          "module": "protocol.lsp_types",
          "name": "ParameterInformation",
          "alias": null,
          "line": 260
        }
      },
      {
        "file": "auto_init.py",
        "import": {
          "type": "from_import",
          "module": "lsp_integration",
          "name": "SerenaLSPIntegration",
          "alias": null,
          "line": 42
        }
      },
      {
        "file": "auto_init.py",
        "import": {
          "type": "from_import",
          "module": "lsp_integration",
          "name": "SerenaLSPIntegration",
          "alias": null,
          "line": 65
        }
      },
      {
        "file": "core.py",
        "import": {
          "type": "from_import",
          "module": "intelligence.hover",
          "name": "HoverProvider",
          "alias": null,
          "line": 369
        }
      },
      {
        "file": "core.py",
        "import": {
          "type": "from_import",
          "module": "intelligence.completions",
          "name": "CompletionProvider",
          "alias": null,
          "line": 375
        }
      },
      {
        "file": "error_analysis.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.core.diagnostics",
          "name": "CodebaseDiagnostics",
          "alias": null,
          "line": 18
        }
      },
      {
        "file": "error_analysis.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.core.diagnostics",
          "name": "add_diagnostic_capabilities",
          "alias": null,
          "line": 18
        }
      },
      {
        "file": "error_analysis.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.extensions.lsp.serena_bridge",
          "name": "ErrorInfo",
          "alias": null,
          "line": 19
        }
      },
      {
        "file": "error_analysis.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.extensions.lsp.serena_bridge",
          "name": "SerenaLSPBridge",
          "alias": null,
          "line": 19
        }
      },
      {
        "file": "lsp_integration.py",
        "import": {
          "type": "from_import",
          "module": "lsp",
          "name": "SerenaLSPClient",
          "alias": null,
          "line": 15
        }
      },
      {
        "file": "lsp_integration.py",
        "import": {
          "type": "from_import",
          "module": "lsp",
          "name": "SerenaServerManager",
          "alias": null,
          "line": 15
        }
      },
      {
        "file": "lsp_integration.py",
        "import": {
          "type": "from_import",
          "module": "lsp",
          "name": "ServerConfig",
          "alias": null,
          "line": 15
        }
      },
      {
        "file": "lsp_integration.py",
        "import": {
          "type": "from_import",
          "module": "lsp",
          "name": "ErrorRetriever",
          "alias": null,
          "line": 15
        }
      },
      {
        "file": "lsp_integration.py",
        "import": {
          "type": "from_import",
          "module": "lsp",
          "name": "ComprehensiveErrorList",
          "alias": null,
          "line": 15
        }
      },
      {
        "file": "lsp_integration.py",
        "import": {
          "type": "from_import",
          "module": "lsp",
          "name": "CodeError",
          "alias": null,
          "line": 15
        }
      },
      {
        "file": "lsp_integration.py",
        "import": {
          "type": "from_import",
          "module": "lsp",
          "name": "ErrorSeverity",
          "alias": null,
          "line": 15
        }
      },
      {
        "file": "lsp_integration.py",
        "import": {
          "type": "from_import",
          "module": "lsp",
          "name": "ErrorCategory",
          "alias": null,
          "line": 15
        }
      },
      {
        "file": "lsp_integration.py",
        "import": {
          "type": "from_import",
          "module": "lsp",
          "name": "RealTimeDiagnostics",
          "alias": null,
          "line": 15
        }
      },
      {
        "file": "lsp_integration.py",
        "import": {
          "type": "from_import",
          "module": "lsp",
          "name": "DiagnosticFilter",
          "alias": null,
          "line": 15
        }
      },
      {
        "file": "lsp_integration.py",
        "import": {
          "type": "from_import",
          "module": "lsp",
          "name": "DiagnosticStats",
          "alias": null,
          "line": 15
        }
      },
      {
        "file": "lsp_integration.py",
        "import": {
          "type": "from_import",
          "module": "lsp",
          "name": "ConnectionType",
          "alias": null,
          "line": 15
        }
      },
      {
        "file": "__init__.py",
        "import": {
          "type": "from_import",
          "module": "lsp_integration",
          "name": "SerenaLSPIntegration",
          "alias": null,
          "line": 130
        }
      },
      {
        "file": "__init__.py",
        "import": {
          "type": "from_import",
          "module": "lsp_integration",
          "name": "create_serena_lsp_integration",
          "alias": null,
          "line": 130
        }
      },
      {
        "file": "__init__.py",
        "import": {
          "type": "from_import",
          "module": "lsp_integration",
          "name": "get_comprehensive_code_errors",
          "alias": null,
          "line": 130
        }
      },
      {
        "file": "__init__.py",
        "import": {
          "type": "from_import",
          "module": "lsp_integration",
          "name": "analyze_file_errors",
          "alias": "lsp_analyze_file_errors",
          "line": 130
        }
      },
      {
        "file": "__init__.py",
        "import": {
          "type": "from_import",
          "module": "lsp",
          "name": "SerenaLSPClient",
          "alias": null,
          "line": 137
        }
      },
      {
        "file": "__init__.py",
        "import": {
          "type": "from_import",
          "module": "lsp",
          "name": "SerenaServerManager",
          "alias": null,
          "line": 137
        }
      },
      {
        "file": "__init__.py",
        "import": {
          "type": "from_import",
          "module": "lsp",
          "name": "ServerConfig",
          "alias": null,
          "line": 137
        }
      },
      {
        "file": "__init__.py",
        "import": {
          "type": "from_import",
          "module": "lsp",
          "name": "ErrorRetriever",
          "alias": null,
          "line": 137
        }
      },
      {
        "file": "__init__.py",
        "import": {
          "type": "from_import",
          "module": "lsp",
          "name": "ComprehensiveErrorList",
          "alias": null,
          "line": 137
        }
      },
      {
        "file": "__init__.py",
        "import": {
          "type": "from_import",
          "module": "lsp",
          "name": "CodeError",
          "alias": null,
          "line": 137
        }
      },
      {
        "file": "__init__.py",
        "import": {
          "type": "from_import",
          "module": "lsp",
          "name": "RealTimeDiagnostics",
          "alias": null,
          "line": 137
        }
      },
      {
        "file": "__init__.py",
        "import": {
          "type": "from_import",
          "module": "lsp",
          "name": "DiagnosticFilter",
          "alias": null,
          "line": 137
        }
      },
      {
        "file": "__init__.py",
        "import": {
          "type": "from_import",
          "module": "lsp",
          "name": "DiagnosticStats",
          "alias": null,
          "line": 137
        }
      },
      {
        "file": "__init__.py",
        "import": {
          "type": "from_import",
          "module": "lsp",
          "name": "ConnectionType",
          "alias": null,
          "line": 137
        }
      },
      {
        "file": "code_intelligence.py",
        "import": {
          "type": "from_import",
          "module": "completions",
          "name": "CompletionProvider",
          "alias": null,
          "line": 28
        }
      },
      {
        "file": "code_intelligence.py",
        "import": {
          "type": "from_import",
          "module": "hover",
          "name": "HoverProvider",
          "alias": null,
          "line": 29
        }
      },
      {
        "file": "code_intelligence.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.extensions.lsp.serena_bridge",
          "name": "SerenaLSPBridge",
          "alias": null,
          "line": 23
        }
      },
      {
        "file": "__init__.py",
        "import": {
          "type": "from_import",
          "module": "completions",
          "name": "CompletionProvider",
          "alias": null,
          "line": 9
        }
      },
      {
        "file": "__init__.py",
        "import": {
          "type": "from_import",
          "module": "hover",
          "name": "HoverProvider",
          "alias": null,
          "line": 10
        }
      },
      {
        "file": "code_generator.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.extensions.lsp.serena_bridge",
          "name": "SerenaLSPBridge",
          "alias": null,
          "line": 10
        }
      },
      {
        "file": "__init__.py",
        "import": {
          "type": "from_import",
          "module": "diagnostics",
          "name": "DiagnosticProcessor",
          "alias": null,
          "line": 30
        }
      },
      {
        "file": "__init__.py",
        "import": {
          "type": "from_import",
          "module": "diagnostics",
          "name": "DiagnosticFilter",
          "alias": null,
          "line": 30
        }
      },
      {
        "file": "__init__.py",
        "import": {
          "type": "from_import",
          "module": "diagnostics",
          "name": "DiagnosticAggregator",
          "alias": null,
          "line": 30
        }
      },
      {
        "file": "__init__.py",
        "import": {
          "type": "from_import",
          "module": "diagnostics",
          "name": "RealTimeDiagnostics",
          "alias": null,
          "line": 30
        }
      },
      {
        "file": "realtime_analyzer.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.extensions.lsp.serena_bridge",
          "name": "SerenaLSPBridge",
          "alias": null,
          "line": 16
        }
      },
      {
        "file": "semantic_search.py",
        "import": {
          "type": "from_import",
          "module": "graph_sitter.extensions.lsp.serena_bridge",
          "name": "SerenaLSPBridge",
          "alias": null,
          "line": 10
        }
      }
    ],
    "code_generation_features": [],
    "analysis_features": [],
    "common_imports": {
      "sys": 2,
      "json": 8,
      "traceback": 2,
      "pathlib": 33,
      "typing": 213,
      "datetime": 1,
      "collections": 10,
      "logging": 21,
      "graph_sitter.shared.logging.get_logger": 20,
      "graph_sitter.core.codebase": 18,
      "graph_sitter.extensions.lsp.serena_bridge": 8,
      "graph_sitter.extensions.serena.serena_types": 2,
      "graph_sitter.core.lsp_methods": 1,
      "graph_sitter.core.lsp_types": 16,
      "graph_sitter.extensions.serena.auto_init": 1,
      "graph_sitter.extensions.serena": 7,
      "graph_sitter.extensions.lsp.transaction_manager": 2,
      "graph_sitter.core.file": 4,
      "graph_sitter.core.interfaces.editable": 1,
      "graph_sitter.core.class_definition": 3,
      "graph_sitter.core.external_module": 1,
      "graph_sitter.core.function": 3,
      "graph_sitter.core.import_resolution": 1,
      "graph_sitter.core.symbol": 5,
      "graph_sitter.enums": 2,
      "threading": 9,
      "time": 19,
      "weakref": 1,
      "serena_bridge": 3,
      "os": 5,
      "dataclasses": 29,
      "enum": 10,
      "protocol.lsp_types": 31,
      "language_servers.base": 1,
      "language_servers.python_server": 1,
      "shutil": 2,
      "base": 1,
      "subprocess": 4,
      "abc": 4,
      "asyncio": 17,
      "advanced_context": 5,
      "knowledge_integration": 5,
      "core": 9,
      "types": 71,
      "lsp_integration": 6,
      "refactoring.refactoring_engine": 2,
      "symbols.symbol_intelligence": 3,
      "actions.code_actions": 1,
      "realtime.realtime_analyzer": 1,
      "search.semantic_search": 3,
      "generation.code_generator": 1,
      "intelligence.hover": 1,
      "intelligence.completions": 1,
      "ast": 1,
      "inspect": 1,
      "graph_sitter.core.diagnostics": 2,
      "mcp_bridge": 13,
      "semantic_tools": 4,
      "intelligence.code_intelligence": 3,
      "lsp": 22,
      "error_analysis": 14,
      "api": 5,
      "advanced_error_viewer": 4,
      "refactoring": 1,
      "refactoring.rename_refactor": 1,
      "refactoring.extract_refactor": 1,
      "refactoring.inline_refactor": 1,
      "refactoring.move_refactor": 1,
      "symbols": 1,
      "actions": 1,
      "realtime": 1,
      "auto_init": 2,
      "intelligence": 1,
      "generation": 1,
      "search": 1,
      "re": 7,
      "concurrent.futures": 7,
      "code_intelligence": 2,
      "symbol_intelligence": 2,
      "semantic_search": 2,
      "tempfile": 1,
      "fnmatch": 3,
      "serena_types": 6,
      "completions": 2,
      "hover": 2,
      "signatures": 2,
      "refactoring_engine": 7,
      "rename_refactor": 1,
      "extract_refactor": 1,
      "inline_refactor": 1,
      "move_refactor": 1,
      "code_actions": 1,
      "code_generator": 1,
      "uuid": 1,
      "psutil": 1,
      "client": 6,
      "protocol": 12,
      "error_retrieval": 13,
      "websockets": 1,
      "aiohttp": 1,
      "server_manager": 3,
      "diagnostics": 4,
      "realtime_analyzer": 4,
      "watchdog.observers": 1,
      "watchdog.events": 4
    },
    "decorator_patterns": {
      "property": 9,
      "abstractmethod": 2,
      "classmethod": 4,
      "staticmethod": 2
    },
    "naming_conventions": {}
  },
  "consolidation_opportunities": {
    "duplicate_functions": [
      {
        "function_name": "__init__",
        "occurrences": [
          {
            "file": "deep_analysis.py",
            "line": 27,
            "args": [
              "self",
              "codebase"
            ]
          },
          {
            "file": "code_generator.py",
            "line": 19,
            "args": [
              "self",
              "codebase",
              "lsp_bridge"
            ]
          },
          {
            "file": "codebase.py",
            "line": 54,
            "args": [
              "self"
            ]
          },
          {
            "file": "diagnostics.py",
            "line": 38,
            "args": [
              "self",
              "codebase",
              "enable_lsp"
            ]
          },
          {
            "file": "diagnostics.py",
            "line": 28,
            "args": [
              "self"
            ]
          },
          {
            "file": "diagnostics.py",
            "line": 31,
            "args": [
              "self"
            ]
          },
          {
            "file": "transaction_manager.py",
            "line": 30,
            "args": [
              "self",
              "repo_path",
              "enable_lsp"
            ]
          },
          {
            "file": "serena_bridge.py",
            "line": 71,
            "args": [
              "self",
              "repo_path"
            ]
          },
          {
            "file": "python_server.py",
            "line": 25,
            "args": [
              "self",
              "workspace_path"
            ]
          },
          {
            "file": "base.py",
            "line": 27,
            "args": [
              "self",
              "workspace_path",
              "language"
            ]
          },
          {
            "file": "advanced_error_viewer.py",
            "line": 61,
            "args": [
              "self",
              "codebase",
              "knowledge_integration",
              "config"
            ]
          },
          {
            "file": "core.py",
            "line": 51,
            "args": [
              "self",
              "codebase_path",
              "config"
            ]
          },
          {
            "file": "error_analysis.py",
            "line": 78,
            "args": [
              "self",
              "codebase",
              "enable_lsp"
            ]
          },
          {
            "file": "lsp_integration.py",
            "line": 69,
            "args": [
              "self",
              "codebase_path",
              "config_dir",
              "auto_discover_servers",
              "enable_real_time_diagnostics",
              "serena_config"
            ]
          },
          {
            "file": "semantic_tools.py",
            "line": 21,
            "args": [
              "self",
              "mcp_bridge"
            ]
          },
          {
            "file": "integration.py",
            "line": 25,
            "args": [
              "self",
              "codebase"
            ]
          },
          {
            "file": "advanced_context.py",
            "line": 73,
            "args": [
              "self",
              "codebase",
              "knowledge_integration"
            ]
          },
          {
            "file": "api.py",
            "line": 39,
            "args": [
              "self",
              "codebase",
              "enable_lsp"
            ]
          },
          {
            "file": "knowledge_integration.py",
            "line": 114,
            "args": [
              "self",
              "semantic_tools"
            ]
          },
          {
            "file": "knowledge_integration.py",
            "line": 195,
            "args": [
              "self",
              "code_intelligence"
            ]
          },
          {
            "file": "knowledge_integration.py",
            "line": 266,
            "args": [
              "self",
              "symbol_intelligence"
            ]
          },
          {
            "file": "knowledge_integration.py",
            "line": 339,
            "args": [
              "self",
              "codebase",
              "enable_serena",
              "enable_caching",
              "max_workers"
            ]
          },
          {
            "file": "mcp_bridge.py",
            "line": 43,
            "args": [
              "self",
              "repo_path",
              "serena_command"
            ]
          },
          {
            "file": "mcp_bridge.py",
            "line": 318,
            "args": [
              "self",
              "file_path",
              "line",
              "character",
              "message",
              "severity",
              "source",
              "code",
              "end_line",
              "end_character"
            ]
          },
          {
            "file": "symbol_intelligence.py",
            "line": 30,
            "args": [
              "self",
              "codebase_path",
              "serena_core"
            ]
          },
          {
            "file": "hover.py",
            "line": 58,
            "args": [
              "self",
              "codebase",
              "mcp_bridge",
              "config"
            ]
          },
          {
            "file": "code_intelligence.py",
            "line": 56,
            "args": [
              "self",
              "codebase",
              "bridge",
              "config"
            ]
          },
          {
            "file": "signatures.py",
            "line": 69,
            "args": [
              "self",
              "codebase",
              "mcp_bridge",
              "config"
            ]
          },
          {
            "file": "completions.py",
            "line": 58,
            "args": [
              "self",
              "codebase",
              "mcp_bridge",
              "config"
            ]
          },
          {
            "file": "refactoring_engine.py",
            "line": 55,
            "args": [
              "self",
              "codebase_path",
              "serena_core",
              "config"
            ]
          },
          {
            "file": "extract_refactor.py",
            "line": 26,
            "args": [
              "self",
              "codebase_path",
              "serena_core",
              "config"
            ]
          },
          {
            "file": "move_refactor.py",
            "line": 25,
            "args": [
              "self",
              "codebase_path",
              "serena_core",
              "config"
            ]
          },
          {
            "file": "rename_refactor.py",
            "line": 37,
            "args": [
              "self",
              "codebase_path",
              "serena_core",
              "config"
            ]
          },
          {
            "file": "inline_refactor.py",
            "line": 25,
            "args": [
              "self",
              "codebase_path",
              "serena_core",
              "config"
            ]
          },
          {
            "file": "code_actions.py",
            "line": 30,
            "args": [
              "self",
              "codebase_path",
              "serena_core"
            ]
          },
          {
            "file": "code_actions.py",
            "line": 566,
            "args": [
              "self",
              "serena_core"
            ]
          },
          {
            "file": "code_generator.py",
            "line": 19,
            "args": [
              "self",
              "codebase",
              "lsp_bridge"
            ]
          },
          {
            "file": "protocol.py",
            "line": 121,
            "args": [
              "self"
            ]
          },
          {
            "file": "server_manager.py",
            "line": 130,
            "args": [
              "self",
              "config_dir"
            ]
          },
          {
            "file": "error_retrieval.py",
            "line": 263,
            "args": [
              "self",
              "protocol_handler"
            ]
          },
          {
            "file": "diagnostics.py",
            "line": 128,
            "args": [
              "self",
              "history_size"
            ]
          },
          {
            "file": "diagnostics.py",
            "line": 276,
            "args": [
              "self"
            ]
          },
          {
            "file": "diagnostics.py",
            "line": 521,
            "args": [
              "self"
            ]
          },
          {
            "file": "client.py",
            "line": 61,
            "args": [
              "self",
              "server_command",
              "server_host",
              "server_port",
              "connection_type",
              "timeout",
              "auto_reconnect",
              "max_reconnect_attempts"
            ]
          },
          {
            "file": "realtime_analyzer.py",
            "line": 30,
            "args": [
              "self",
              "codebase_path",
              "serena_core"
            ]
          },
          {
            "file": "realtime_analyzer.py",
            "line": 482,
            "args": [
              "self",
              "analyzer"
            ]
          },
          {
            "file": "realtime_analyzer.py",
            "line": 53,
            "args": [
              "self",
              "codebase",
              "lsp_bridge",
              "config"
            ]
          },
          {
            "file": "semantic_search.py",
            "line": 18,
            "args": [
              "self",
              "codebase",
              "lsp_bridge"
            ]
          }
        ],
        "count": 48
      },
      {
        "function_name": "generate_code",
        "occurrences": [
          {
            "file": "code_generator.py",
            "line": 23,
            "args": [
              "self",
              "prompt",
              "context"
            ]
          },
          {
            "file": "code_intelligence.py",
            "line": 431,
            "args": [
              "self",
              "prompt",
              "context"
            ]
          },
          {
            "file": "code_generator.py",
            "line": 23,
            "args": [
              "self",
              "prompt",
              "context"
            ]
          }
        ],
        "count": 3
      },
      {
        "function_name": "_generate_from_prompt",
        "occurrences": [
          {
            "file": "code_generator.py",
            "line": 61,
            "args": [
              "self",
              "prompt",
              "context"
            ]
          },
          {
            "file": "code_generator.py",
            "line": 61,
            "args": [
              "self",
              "prompt",
              "context"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "_extract_imports",
        "occurrences": [
          {
            "file": "code_generator.py",
            "line": 140,
            "args": [
              "self",
              "code"
            ]
          },
          {
            "file": "code_generator.py",
            "line": 140,
            "args": [
              "self",
              "code"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "generate_boilerplate",
        "occurrences": [
          {
            "file": "code_generator.py",
            "line": 157,
            "args": [
              "self",
              "template",
              "context",
              "target_file"
            ]
          },
          {
            "file": "integration.py",
            "line": 267,
            "args": [
              "self",
              "template",
              "context",
              "target_file"
            ]
          },
          {
            "file": "code_generator.py",
            "line": 157,
            "args": [
              "self",
              "template",
              "context",
              "target_file"
            ]
          }
        ],
        "count": 3
      },
      {
        "function_name": "generate_tests",
        "occurrences": [
          {
            "file": "code_generator.py",
            "line": 166,
            "args": [
              "self",
              "target_function",
              "test_types"
            ]
          },
          {
            "file": "integration.py",
            "line": 292,
            "args": [
              "self",
              "target_function",
              "test_types"
            ]
          },
          {
            "file": "code_generator.py",
            "line": 166,
            "args": [
              "self",
              "target_function",
              "test_types"
            ]
          }
        ],
        "count": 3
      },
      {
        "function_name": "generate_documentation",
        "occurrences": [
          {
            "file": "code_generator.py",
            "line": 175,
            "args": [
              "self",
              "target",
              "format"
            ]
          },
          {
            "file": "integration.py",
            "line": 315,
            "args": [
              "self",
              "target",
              "format"
            ]
          },
          {
            "file": "code_generator.py",
            "line": 175,
            "args": [
              "self",
              "target",
              "format"
            ]
          }
        ],
        "count": 3
      },
      {
        "function_name": "get_status",
        "occurrences": [
          {
            "file": "code_generator.py",
            "line": 184,
            "args": [
              "self"
            ]
          },
          {
            "file": "serena_bridge.py",
            "line": 331,
            "args": [
              "self"
            ]
          },
          {
            "file": "python_server.py",
            "line": 379,
            "args": [
              "self"
            ]
          },
          {
            "file": "base.py",
            "line": 216,
            "args": [
              "self"
            ]
          },
          {
            "file": "core.py",
            "line": 304,
            "args": [
              "self"
            ]
          },
          {
            "file": "api.py",
            "line": 290,
            "args": [
              "self"
            ]
          },
          {
            "file": "hover.py",
            "line": 557,
            "args": [
              "self"
            ]
          },
          {
            "file": "code_intelligence.py",
            "line": 315,
            "args": [
              "self"
            ]
          },
          {
            "file": "signatures.py",
            "line": 543,
            "args": [
              "self"
            ]
          },
          {
            "file": "completions.py",
            "line": 634,
            "args": [
              "self"
            ]
          },
          {
            "file": "code_generator.py",
            "line": 184,
            "args": [
              "self"
            ]
          },
          {
            "file": "realtime_analyzer.py",
            "line": 234,
            "args": [
              "self"
            ]
          },
          {
            "file": "realtime_analyzer.py",
            "line": 209,
            "args": [
              "self"
            ]
          },
          {
            "file": "semantic_search.py",
            "line": 85,
            "args": [
              "self"
            ]
          }
        ],
        "count": 14
      },
      {
        "function_name": "shutdown",
        "occurrences": [
          {
            "file": "code_generator.py",
            "line": 188,
            "args": [
              "self"
            ]
          },
          {
            "file": "diagnostics.py",
            "line": 132,
            "args": [
              "self"
            ]
          },
          {
            "file": "transaction_manager.py",
            "line": 240,
            "args": [
              "self"
            ]
          },
          {
            "file": "serena_bridge.py",
            "line": 274,
            "args": [
              "self"
            ]
          },
          {
            "file": "base.py",
            "line": 182,
            "args": [
              "self"
            ]
          },
          {
            "file": "error_analysis.py",
            "line": 618,
            "args": [
              "self"
            ]
          },
          {
            "file": "api.py",
            "line": 306,
            "args": [
              "self"
            ]
          },
          {
            "file": "knowledge_integration.py",
            "line": 777,
            "args": [
              "self"
            ]
          },
          {
            "file": "mcp_bridge.py",
            "line": 280,
            "args": [
              "self"
            ]
          },
          {
            "file": "hover.py",
            "line": 570,
            "args": [
              "self"
            ]
          },
          {
            "file": "code_intelligence.py",
            "line": 627,
            "args": [
              "self"
            ]
          },
          {
            "file": "signatures.py",
            "line": 555,
            "args": [
              "self"
            ]
          },
          {
            "file": "completions.py",
            "line": 647,
            "args": [
              "self"
            ]
          },
          {
            "file": "code_generator.py",
            "line": 188,
            "args": [
              "self"
            ]
          },
          {
            "file": "semantic_search.py",
            "line": 89,
            "args": [
              "self"
            ]
          }
        ],
        "count": 15
      },
      {
        "function_name": "errors",
        "occurrences": [
          {
            "file": "diagnostics.py",
            "line": 74,
            "args": [
              "self"
            ]
          },
          {
            "file": "transaction_manager.py",
            "line": 88,
            "args": [
              "self"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "warnings",
        "occurrences": [
          {
            "file": "diagnostics.py",
            "line": 81,
            "args": [
              "self"
            ]
          },
          {
            "file": "transaction_manager.py",
            "line": 100,
            "args": [
              "self"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "hints",
        "occurrences": [
          {
            "file": "diagnostics.py",
            "line": 88,
            "args": [
              "self"
            ]
          },
          {
            "file": "transaction_manager.py",
            "line": 112,
            "args": [
              "self"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "diagnostics",
        "occurrences": [
          {
            "file": "diagnostics.py",
            "line": 95,
            "args": [
              "self"
            ]
          },
          {
            "file": "transaction_manager.py",
            "line": 124,
            "args": [
              "self"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "get_file_errors",
        "occurrences": [
          {
            "file": "diagnostics.py",
            "line": 101,
            "args": [
              "self",
              "file_path"
            ]
          },
          {
            "file": "transaction_manager.py",
            "line": 135,
            "args": [
              "self",
              "file_path"
            ]
          },
          {
            "file": "error_analysis.py",
            "line": 144,
            "args": [
              "self",
              "file_path"
            ]
          },
          {
            "file": "api.py",
            "line": 104,
            "args": [
              "self",
              "file_path"
            ]
          }
        ],
        "count": 4
      },
      {
        "function_name": "get_file_diagnostics",
        "occurrences": [
          {
            "file": "diagnostics.py",
            "line": 107,
            "args": [
              "self",
              "file_path"
            ]
          },
          {
            "file": "transaction_manager.py",
            "line": 143,
            "args": [
              "self",
              "file_path"
            ]
          },
          {
            "file": "serena_bridge.py",
            "line": 142,
            "args": [
              "self",
              "file_path"
            ]
          },
          {
            "file": "base.py",
            "line": 162,
            "args": [
              "self",
              "file_path"
            ]
          }
        ],
        "count": 4
      },
      {
        "function_name": "refresh_diagnostics",
        "occurrences": [
          {
            "file": "diagnostics.py",
            "line": 113,
            "args": [
              "self"
            ]
          },
          {
            "file": "transaction_manager.py",
            "line": 205,
            "args": [
              "self"
            ]
          },
          {
            "file": "serena_bridge.py",
            "line": 260,
            "args": [
              "self"
            ]
          },
          {
            "file": "base.py",
            "line": 170,
            "args": [
              "self"
            ]
          }
        ],
        "count": 4
      },
      {
        "function_name": "get_lsp_status",
        "occurrences": [
          {
            "file": "diagnostics.py",
            "line": 123,
            "args": [
              "self"
            ]
          },
          {
            "file": "transaction_manager.py",
            "line": 222,
            "args": [
              "self"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "is_error",
        "occurrences": [
          {
            "file": "serena_bridge.py",
            "line": 43,
            "args": [
              "self"
            ]
          },
          {
            "file": "mcp_bridge.py",
            "line": 333,
            "args": [
              "self"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "is_warning",
        "occurrences": [
          {
            "file": "serena_bridge.py",
            "line": 48,
            "args": [
              "self"
            ]
          },
          {
            "file": "mcp_bridge.py",
            "line": 337,
            "args": [
              "self"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "is_hint",
        "occurrences": [
          {
            "file": "serena_bridge.py",
            "line": 53,
            "args": [
              "self"
            ]
          },
          {
            "file": "mcp_bridge.py",
            "line": 341,
            "args": [
              "self"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "__str__",
        "occurrences": [
          {
            "file": "serena_bridge.py",
            "line": 57,
            "args": [
              "self"
            ]
          },
          {
            "file": "lsp_types.py",
            "line": 56,
            "args": [
              "self"
            ]
          },
          {
            "file": "lsp_types.py",
            "line": 66,
            "args": [
              "self"
            ]
          },
          {
            "file": "lsp_types.py",
            "line": 76,
            "args": [
              "self"
            ]
          },
          {
            "file": "lsp_types.py",
            "line": 90,
            "args": [
              "self"
            ]
          },
          {
            "file": "mcp_bridge.py",
            "line": 33,
            "args": [
              "self"
            ]
          },
          {
            "file": "mcp_bridge.py",
            "line": 344,
            "args": [
              "self"
            ]
          }
        ],
        "count": 7
      },
      {
        "function_name": "get_diagnostics",
        "occurrences": [
          {
            "file": "serena_bridge.py",
            "line": 115,
            "args": [
              "self"
            ]
          },
          {
            "file": "base.py",
            "line": 151,
            "args": [
              "self"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "get_all_diagnostics",
        "occurrences": [
          {
            "file": "serena_bridge.py",
            "line": 167,
            "args": [
              "self"
            ]
          },
          {
            "file": "error_analysis.py",
            "line": 140,
            "args": [
              "self"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "get_completions",
        "occurrences": [
          {
            "file": "serena_bridge.py",
            "line": 288,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          },
          {
            "file": "base.py",
            "line": 112,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          },
          {
            "file": "semantic_tools.py",
            "line": 152,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          },
          {
            "file": "integration.py",
            "line": 48,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          },
          {
            "file": "code_intelligence.py",
            "line": 86,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          },
          {
            "file": "completions.py",
            "line": 74,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          }
        ],
        "count": 6
      },
      {
        "function_name": "get_hover_info",
        "occurrences": [
          {
            "file": "serena_bridge.py",
            "line": 300,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          },
          {
            "file": "base.py",
            "line": 125,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          },
          {
            "file": "semantic_tools.py",
            "line": 182,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          },
          {
            "file": "integration.py",
            "line": 71,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          },
          {
            "file": "hover.py",
            "line": 73,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          },
          {
            "file": "code_intelligence.py",
            "line": 122,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          }
        ],
        "count": 6
      },
      {
        "function_name": "get_signature_help",
        "occurrences": [
          {
            "file": "serena_bridge.py",
            "line": 312,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          },
          {
            "file": "base.py",
            "line": 138,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          },
          {
            "file": "integration.py",
            "line": 95,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          },
          {
            "file": "code_intelligence.py",
            "line": 155,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          },
          {
            "file": "signatures.py",
            "line": 81,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          }
        ],
        "count": 5
      },
      {
        "function_name": "get_server_command",
        "occurrences": [
          {
            "file": "python_server.py",
            "line": 29,
            "args": [
              "self"
            ]
          },
          {
            "file": "base.py",
            "line": 36,
            "args": [
              "self"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "supports_file",
        "occurrences": [
          {
            "file": "python_server.py",
            "line": 46,
            "args": [
              "self",
              "file_path"
            ]
          },
          {
            "file": "base.py",
            "line": 41,
            "args": [
              "self",
              "file_path"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "_get_mock_completions",
        "occurrences": [
          {
            "file": "python_server.py",
            "line": 50,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          },
          {
            "file": "base.py",
            "line": 228,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "_get_mock_hover",
        "occurrences": [
          {
            "file": "python_server.py",
            "line": 222,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          },
          {
            "file": "base.py",
            "line": 247,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "_get_mock_signature_help",
        "occurrences": [
          {
            "file": "python_server.py",
            "line": 264,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          },
          {
            "file": "base.py",
            "line": 258,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "_update_diagnostics_cache",
        "occurrences": [
          {
            "file": "python_server.py",
            "line": 332,
            "args": [
              "self"
            ]
          },
          {
            "file": "base.py",
            "line": 283,
            "args": [
              "self"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "_detect_language",
        "occurrences": [
          {
            "file": "advanced_error_viewer.py",
            "line": 635,
            "args": [
              "self",
              "file_path"
            ]
          },
          {
            "file": "completions.py",
            "line": 373,
            "args": [
              "self",
              "file_path"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "add_serena_to_codebase",
        "occurrences": [
          {
            "file": "auto_init.py",
            "line": 36,
            "args": [
              "codebase_class"
            ]
          },
          {
            "file": "integration.py",
            "line": 530,
            "args": [
              "codebase_class"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "is_capability_enabled",
        "occurrences": [
          {
            "file": "core.py",
            "line": 165,
            "args": [
              "self",
              "capability"
            ]
          },
          {
            "file": "serena_types.py",
            "line": 218,
            "args": [
              "self",
              "capability"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "get_performance_metrics",
        "occurrences": [
          {
            "file": "core.py",
            "line": 296,
            "args": [
              "self"
            ]
          },
          {
            "file": "refactoring_engine.py",
            "line": 322,
            "args": [
              "self"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "_initialize_serena_components",
        "occurrences": [
          {
            "file": "error_analysis.py",
            "line": 103,
            "args": [
              "self"
            ]
          },
          {
            "file": "knowledge_integration.py",
            "line": 376,
            "args": [
              "self"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "get_all_errors",
        "occurrences": [
          {
            "file": "error_analysis.py",
            "line": 132,
            "args": [
              "self"
            ]
          },
          {
            "file": "api.py",
            "line": 64,
            "args": [
              "self"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "_build_dependency_chain",
        "occurrences": [
          {
            "file": "error_analysis.py",
            "line": 309,
            "args": [
              "self",
              "file_path"
            ]
          },
          {
            "file": "advanced_context.py",
            "line": 565,
            "args": [
              "self",
              "func"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "get_error_summary",
        "occurrences": [
          {
            "file": "error_analysis.py",
            "line": 542,
            "args": [
              "self"
            ]
          },
          {
            "file": "api.py",
            "line": 144,
            "args": [
              "self"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "refresh_analysis",
        "occurrences": [
          {
            "file": "error_analysis.py",
            "line": 602,
            "args": [
              "self"
            ]
          },
          {
            "file": "api.py",
            "line": 286,
            "args": [
              "self"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "get_trend_analysis",
        "occurrences": [
          {
            "file": "lsp_integration.py",
            "line": 333,
            "args": [
              "self"
            ]
          },
          {
            "file": "diagnostics.py",
            "line": 177,
            "args": [
              "self",
              "time_window"
            ]
          },
          {
            "file": "diagnostics.py",
            "line": 361,
            "args": [
              "self"
            ]
          },
          {
            "file": "diagnostics.py",
            "line": 585,
            "args": [
              "self"
            ]
          }
        ],
        "count": 4
      },
      {
        "function_name": "get_comprehensive_report",
        "occurrences": [
          {
            "file": "lsp_integration.py",
            "line": 340,
            "args": [
              "self"
            ]
          },
          {
            "file": "diagnostics.py",
            "line": 589,
            "args": [
              "self"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "add_error_listener",
        "occurrences": [
          {
            "file": "lsp_integration.py",
            "line": 368,
            "args": [
              "self",
              "listener"
            ]
          },
          {
            "file": "error_retrieval.py",
            "line": 422,
            "args": [
              "self",
              "listener"
            ]
          },
          {
            "file": "client.py",
            "line": 224,
            "args": [
              "self",
              "listener"
            ]
          }
        ],
        "count": 3
      },
      {
        "function_name": "add_connection_listener",
        "occurrences": [
          {
            "file": "lsp_integration.py",
            "line": 376,
            "args": [
              "self",
              "listener"
            ]
          },
          {
            "file": "client.py",
            "line": 228,
            "args": [
              "self",
              "listener"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "semantic_search",
        "occurrences": [
          {
            "file": "semantic_tools.py",
            "line": 24,
            "args": [
              "self",
              "query",
              "file_pattern",
              "max_results"
            ]
          },
          {
            "file": "integration.py",
            "line": 338,
            "args": [
              "self",
              "query",
              "language"
            ]
          },
          {
            "file": "code_intelligence.py",
            "line": 390,
            "args": [
              "self",
              "query",
              "max_results"
            ]
          },
          {
            "file": "semantic_search.py",
            "line": 22,
            "args": [
              "self",
              "query",
              "language"
            ]
          }
        ],
        "count": 4
      },
      {
        "function_name": "get_symbol_context",
        "occurrences": [
          {
            "file": "semantic_tools.py",
            "line": 84,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          },
          {
            "file": "integration.py",
            "line": 406,
            "args": [
              "self",
              "symbol",
              "include_dependencies"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "get_available_tools",
        "occurrences": [
          {
            "file": "semantic_tools.py",
            "line": 271,
            "args": [
              "self"
            ]
          },
          {
            "file": "mcp_bridge.py",
            "line": 272,
            "args": [
              "self"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "has_conflicts",
        "occurrences": [
          {
            "file": "types.py",
            "line": 158,
            "args": [
              "self"
            ]
          },
          {
            "file": "serena_types.py",
            "line": 63,
            "args": [
              "self"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "files_changed",
        "occurrences": [
          {
            "file": "types.py",
            "line": 168,
            "args": [
              "self"
            ]
          },
          {
            "file": "serena_types.py",
            "line": 68,
            "args": [
              "self"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "to_dict",
        "occurrences": [
          {
            "file": "types.py",
            "line": 177,
            "args": [
              "self"
            ]
          },
          {
            "file": "types.py",
            "line": 279,
            "args": [
              "self"
            ]
          },
          {
            "file": "types.py",
            "line": 301,
            "args": [
              "self"
            ]
          },
          {
            "file": "types.py",
            "line": 319,
            "args": [
              "self"
            ]
          },
          {
            "file": "types.py",
            "line": 340,
            "args": [
              "self"
            ]
          },
          {
            "file": "types.py",
            "line": 404,
            "args": [
              "self"
            ]
          },
          {
            "file": "serena_types.py",
            "line": 72,
            "args": [
              "self"
            ]
          },
          {
            "file": "hover.py",
            "line": 36,
            "args": [
              "self"
            ]
          },
          {
            "file": "signatures.py",
            "line": 31,
            "args": [
              "self"
            ]
          },
          {
            "file": "signatures.py",
            "line": 51,
            "args": [
              "self"
            ]
          },
          {
            "file": "completions.py",
            "line": 36,
            "args": [
              "self"
            ]
          },
          {
            "file": "protocol.py",
            "line": 50,
            "args": [
              "self"
            ]
          },
          {
            "file": "protocol.py",
            "line": 62,
            "args": [
              "self"
            ]
          },
          {
            "file": "protocol.py",
            "line": 93,
            "args": [
              "self"
            ]
          },
          {
            "file": "server_manager.py",
            "line": 53,
            "args": [
              "self"
            ]
          },
          {
            "file": "error_retrieval.py",
            "line": 89,
            "args": [
              "self"
            ]
          },
          {
            "file": "error_retrieval.py",
            "line": 243,
            "args": [
              "self"
            ]
          }
        ],
        "count": 17
      },
      {
        "function_name": "__post_init__",
        "occurrences": [
          {
            "file": "types.py",
            "line": 430,
            "args": [
              "self"
            ]
          },
          {
            "file": "serena_types.py",
            "line": 205,
            "args": [
              "self"
            ]
          },
          {
            "file": "error_retrieval.py",
            "line": 188,
            "args": [
              "self"
            ]
          }
        ],
        "count": 3
      },
      {
        "function_name": "find_code_patterns",
        "occurrences": [
          {
            "file": "integration.py",
            "line": 360,
            "args": [
              "self",
              "pattern",
              "suggest_improvements"
            ]
          },
          {
            "file": "semantic_search.py",
            "line": 64,
            "args": [
              "self",
              "pattern",
              "suggest_improvements"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "find_similar_code",
        "occurrences": [
          {
            "file": "integration.py",
            "line": 383,
            "args": [
              "self",
              "reference_code",
              "similarity_threshold"
            ]
          },
          {
            "file": "semantic_search.py",
            "line": 75,
            "args": [
              "self",
              "reference_code",
              "similarity_threshold"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "_get_file_object",
        "occurrences": [
          {
            "file": "advanced_context.py",
            "line": 350,
            "args": [
              "self",
              "file_path"
            ]
          },
          {
            "file": "knowledge_integration.py",
            "line": 494,
            "args": [
              "self",
              "file_path"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "get_extractor_type",
        "occurrences": [
          {
            "file": "knowledge_integration.py",
            "line": 106,
            "args": [
              "self"
            ]
          },
          {
            "file": "knowledge_integration.py",
            "line": 188,
            "args": [
              "self"
            ]
          },
          {
            "file": "knowledge_integration.py",
            "line": 259,
            "args": [
              "self"
            ]
          },
          {
            "file": "knowledge_integration.py",
            "line": 329,
            "args": [
              "self"
            ]
          }
        ],
        "count": 4
      },
      {
        "function_name": "_find_symbol_at_position",
        "occurrences": [
          {
            "file": "hover.py",
            "line": 112,
            "args": [
              "self",
              "file_path",
              "line",
              "character"
            ]
          },
          {
            "file": "code_intelligence.py",
            "line": 467,
            "args": [
              "self",
              "file",
              "line",
              "character"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "_get_symbol_signature",
        "occurrences": [
          {
            "file": "hover.py",
            "line": 275,
            "args": [
              "self",
              "symbol"
            ]
          },
          {
            "file": "code_intelligence.py",
            "line": 542,
            "args": [
              "self",
              "symbol"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "_get_symbol_documentation",
        "occurrences": [
          {
            "file": "hover.py",
            "line": 318,
            "args": [
              "self",
              "symbol"
            ]
          },
          {
            "file": "code_intelligence.py",
            "line": 531,
            "args": [
              "self",
              "symbol"
            ]
          },
          {
            "file": "completions.py",
            "line": 460,
            "args": [
              "self",
              "symbol"
            ]
          }
        ],
        "count": 3
      },
      {
        "function_name": "invalidate_cache",
        "occurrences": [
          {
            "file": "hover.py",
            "line": 541,
            "args": [
              "self",
              "file_path"
            ]
          },
          {
            "file": "code_intelligence.py",
            "line": 221,
            "args": [
              "self",
              "file_path"
            ]
          },
          {
            "file": "signatures.py",
            "line": 531,
            "args": [
              "self",
              "file_path"
            ]
          },
          {
            "file": "completions.py",
            "line": 622,
            "args": [
              "self",
              "file_path"
            ]
          }
        ],
        "count": 4
      },
      {
        "function_name": "clear_cache",
        "occurrences": [
          {
            "file": "code_actions.py",
            "line": 200,
            "args": [
              "self",
              "file_path"
            ]
          },
          {
            "file": "error_retrieval.py",
            "line": 441,
            "args": [
              "self",
              "file_path"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "get_supported_kinds",
        "occurrences": [
          {
            "file": "code_actions.py",
            "line": 241,
            "args": [
              "self"
            ]
          },
          {
            "file": "code_actions.py",
            "line": 527,
            "args": [
              "self"
            ]
          },
          {
            "file": "code_actions.py",
            "line": 569,
            "args": [
              "self"
            ]
          },
          {
            "file": "code_actions.py",
            "line": 656,
            "args": [
              "self"
            ]
          }
        ],
        "count": 4
      },
      {
        "function_name": "can_handle_action",
        "occurrences": [
          {
            "file": "code_actions.py",
            "line": 245,
            "args": [
              "self",
              "action_id"
            ]
          },
          {
            "file": "code_actions.py",
            "line": 530,
            "args": [
              "self",
              "action_id"
            ]
          },
          {
            "file": "code_actions.py",
            "line": 572,
            "args": [
              "self",
              "action_id"
            ]
          },
          {
            "file": "code_actions.py",
            "line": 659,
            "args": [
              "self",
              "action_id"
            ]
          }
        ],
        "count": 4
      },
      {
        "function_name": "add_error",
        "occurrences": [
          {
            "file": "error_retrieval.py",
            "line": 200,
            "args": [
              "self",
              "error"
            ]
          },
          {
            "file": "diagnostics.py",
            "line": 138,
            "args": [
              "self",
              "error"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "add_errors",
        "occurrences": [
          {
            "file": "error_retrieval.py",
            "line": 205,
            "args": [
              "self",
              "errors"
            ]
          },
          {
            "file": "diagnostics.py",
            "line": 144,
            "args": [
              "self",
              "errors"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "get_current_stats",
        "occurrences": [
          {
            "file": "diagnostics.py",
            "line": 153,
            "args": [
              "self"
            ]
          },
          {
            "file": "diagnostics.py",
            "line": 581,
            "args": [
              "self"
            ]
          }
        ],
        "count": 2
      },
      {
        "function_name": "add_filter",
        "occurrences": [
          {
            "file": "diagnostics.py",
            "line": 299,
            "args": [
              "self",
              "filter_config"
            ]
          },
          {
            "file": "diagnostics.py",
            "line": 573,
            "args": [
              "self",
              "filter_config"
            ]
          }
        ],
        "count": 2
      }
    ],
    "similar_classes": [
      {
        "class_name": "CodeGenerator",
        "occurrences": [
          {
            "file": "code_generator.py",
            "line": 16,
            "methods": 9,
            "bases": []
          },
          {
            "file": "code_generator.py",
            "line": 16,
            "methods": 9,
            "bases": []
          }
        ],
        "count": 2
      },
      {
        "class_name": "ErrorInfo",
        "occurrences": [
          {
            "file": "diagnostics.py",
            "line": 27,
            "methods": 1,
            "bases": []
          },
          {
            "file": "serena_bridge.py",
            "line": 30,
            "methods": 4,
            "bases": []
          },
          {
            "file": "mcp_bridge.py",
            "line": 315,
            "methods": 5,
            "bases": []
          }
        ],
        "count": 3
      },
      {
        "class_name": "TransactionAwareLSPManager",
        "occurrences": [
          {
            "file": "diagnostics.py",
            "line": 30,
            "methods": 1,
            "bases": []
          },
          {
            "file": "transaction_manager.py",
            "line": 24,
            "methods": 14,
            "bases": []
          }
        ],
        "count": 2
      },
      {
        "class_name": "CompletionItem",
        "occurrences": [
          {
            "file": "lsp_types.py",
            "line": 116,
            "methods": 0,
            "bases": []
          },
          {
            "file": "types.py",
            "line": 329,
            "methods": 1,
            "bases": []
          },
          {
            "file": "completions.py",
            "line": 24,
            "methods": 1,
            "bases": []
          }
        ],
        "count": 3
      },
      {
        "class_name": "SerenaCapability",
        "occurrences": [
          {
            "file": "types.py",
            "line": 15,
            "methods": 0,
            "bases": [
              "Enum"
            ]
          },
          {
            "file": "serena_types.py",
            "line": 176,
            "methods": 0,
            "bases": [
              "Enum"
            ]
          }
        ],
        "count": 2
      },
      {
        "class_name": "RefactoringType",
        "occurrences": [
          {
            "file": "types.py",
            "line": 28,
            "methods": 0,
            "bases": [
              "Enum"
            ]
          },
          {
            "file": "serena_types.py",
            "line": 14,
            "methods": 0,
            "bases": [
              "Enum"
            ]
          }
        ],
        "count": 2
      },
      {
        "class_name": "SerenaConfig",
        "occurrences": [
          {
            "file": "types.py",
            "line": 58,
            "methods": 0,
            "bases": []
          },
          {
            "file": "serena_types.py",
            "line": 195,
            "methods": 4,
            "bases": []
          }
        ],
        "count": 2
      },
      {
        "class_name": "RefactoringChange",
        "occurrences": [
          {
            "file": "types.py",
            "line": 96,
            "methods": 3,
            "bases": []
          },
          {
            "file": "serena_types.py",
            "line": 27,
            "methods": 0,
            "bases": []
          }
        ],
        "count": 2
      },
      {
        "class_name": "RefactoringConflict",
        "occurrences": [
          {
            "file": "types.py",
            "line": 127,
            "methods": 1,
            "bases": []
          },
          {
            "file": "serena_types.py",
            "line": 40,
            "methods": 0,
            "bases": []
          }
        ],
        "count": 2
      },
      {
        "class_name": "RefactoringResult",
        "occurrences": [
          {
            "file": "types.py",
            "line": 144,
            "methods": 5,
            "bases": []
          },
          {
            "file": "serena_types.py",
            "line": 50,
            "methods": 3,
            "bases": []
          }
        ],
        "count": 2
      },
      {
        "class_name": "SymbolInfo",
        "occurrences": [
          {
            "file": "types.py",
            "line": 222,
            "methods": 1,
            "bases": []
          },
          {
            "file": "serena_types.py",
            "line": 132,
            "methods": 0,
            "bases": []
          }
        ],
        "count": 2
      },
      {
        "class_name": "CodeGenerationResult",
        "occurrences": [
          {
            "file": "types.py",
            "line": 269,
            "methods": 1,
            "bases": []
          },
          {
            "file": "serena_types.py",
            "line": 109,
            "methods": 0,
            "bases": []
          }
        ],
        "count": 2
      },
      {
        "class_name": "SemanticSearchResult",
        "occurrences": [
          {
            "file": "types.py",
            "line": 293,
            "methods": 1,
            "bases": []
          },
          {
            "file": "serena_types.py",
            "line": 119,
            "methods": 0,
            "bases": []
          }
        ],
        "count": 2
      },
      {
        "class_name": "HoverInfo",
        "occurrences": [
          {
            "file": "types.py",
            "line": 313,
            "methods": 1,
            "bases": []
          },
          {
            "file": "hover.py",
            "line": 24,
            "methods": 1,
            "bases": []
          }
        ],
        "count": 2
      },
      {
        "class_name": "LSPError",
        "occurrences": [
          {
            "file": "protocol.py",
            "line": 44,
            "methods": 1,
            "bases": []
          },
          {
            "file": "client.py",
            "line": 25,
            "methods": 0,
            "bases": [
              "Exception"
            ]
          }
        ],
        "count": 2
      },
      {
        "class_name": "RealtimeAnalyzer",
        "occurrences": [
          {
            "file": "realtime_analyzer.py",
            "line": 18,
            "methods": 5,
            "bases": []
          },
          {
            "file": "realtime_analyzer.py",
            "line": 45,
            "methods": 16,
            "bases": []
          }
        ],
        "count": 2
      }
    ],
    "redundant_imports": [],
    "consolidation_candidates": [
      {
        "file": "deep_analysis.py",
        "reason": "High complexity",
        "complexity_score": 77,
        "functions": 20,
        "classes": 1
      },
      {
        "file": "codebase.py",
        "reason": "Too many imports",
        "import_count": 29
      },
      {
        "file": "diagnostics.py",
        "reason": "High complexity",
        "complexity_score": 89,
        "functions": 28,
        "classes": 3
      },
      {
        "file": "transaction_manager.py",
        "reason": "High complexity",
        "complexity_score": 64,
        "functions": 17,
        "classes": 1
      },
      {
        "file": "serena_bridge.py",
        "reason": "High complexity",
        "complexity_score": 82,
        "functions": 19,
        "classes": 2
      },
      {
        "file": "lsp_types.py",
        "reason": "High complexity",
        "complexity_score": 67,
        "functions": 7,
        "classes": 14
      },
      {
        "file": "python_server.py",
        "reason": "High complexity",
        "complexity_score": 51,
        "functions": 9,
        "classes": 1
      },
      {
        "file": "python_server.py",
        "reason": "Too many imports",
        "import_count": 21
      },
      {
        "file": "base.py",
        "reason": "High complexity",
        "complexity_score": 88,
        "functions": 19,
        "classes": 1
      },
      {
        "file": "base.py",
        "reason": "Too many imports",
        "import_count": 28
      },
      {
        "file": "advanced_error_viewer.py",
        "reason": "High complexity",
        "complexity_score": 80,
        "functions": 17,
        "classes": 4
      },
      {
        "file": "core.py",
        "reason": "High complexity",
        "complexity_score": 71,
        "functions": 12,
        "classes": 1
      },
      {
        "file": "core.py",
        "reason": "Too many imports",
        "import_count": 34
      },
      {
        "file": "error_analysis.py",
        "reason": "High complexity",
        "complexity_score": 113,
        "functions": 26,
        "classes": 4
      },
      {
        "file": "error_analysis.py",
        "reason": "Too many imports",
        "import_count": 26
      },
      {
        "file": "lsp_integration.py",
        "reason": "High complexity",
        "complexity_score": 72,
        "functions": 12,
        "classes": 1
      },
      {
        "file": "lsp_integration.py",
        "reason": "Too many imports",
        "import_count": 33
      },
      {
        "file": "semantic_tools.py",
        "reason": "High complexity",
        "complexity_score": 52,
        "functions": 13,
        "classes": 1
      },
      {
        "file": "types.py",
        "reason": "High complexity",
        "complexity_score": 134,
        "functions": 25,
        "classes": 17
      },
      {
        "file": "serena_types.py",
        "reason": "High complexity",
        "complexity_score": 65,
        "functions": 7,
        "classes": 12
      },
      {
        "file": "__init__.py",
        "reason": "High complexity",
        "complexity_score": 70,
        "functions": 0,
        "classes": 0
      },
      {
        "file": "__init__.py",
        "reason": "Too many imports",
        "import_count": 70
      },
      {
        "file": "integration.py",
        "reason": "High complexity",
        "complexity_score": 89,
        "functions": 27,
        "classes": 1
      },
      {
        "file": "advanced_context.py",
        "reason": "High complexity",
        "complexity_score": 107,
        "functions": 27,
        "classes": 3
      },
      {
        "file": "api.py",
        "reason": "High complexity",
        "complexity_score": 84,
        "functions": 21,
        "classes": 1
      },
      {
        "file": "api.py",
        "reason": "Too many imports",
        "import_count": 22
      },
      {
        "file": "knowledge_integration.py",
        "reason": "High complexity",
        "complexity_score": 93,
        "functions": 13,
        "classes": 8
      },
      {
        "file": "knowledge_integration.py",
        "reason": "Too many imports",
        "import_count": 30
      },
      {
        "file": "mcp_bridge.py",
        "reason": "High complexity",
        "complexity_score": 86,
        "functions": 20,
        "classes": 3
      },
      {
        "file": "symbol_intelligence.py",
        "reason": "High complexity",
        "complexity_score": 61,
        "functions": 15,
        "classes": 1
      },
      {
        "file": "hover.py",
        "reason": "High complexity",
        "complexity_score": 92,
        "functions": 24,
        "classes": 2
      },
      {
        "file": "code_intelligence.py",
        "reason": "High complexity",
        "complexity_score": 102,
        "functions": 24,
        "classes": 2
      },
      {
        "file": "code_intelligence.py",
        "reason": "Too many imports",
        "import_count": 24
      },
      {
        "file": "signatures.py",
        "reason": "High complexity",
        "complexity_score": 83,
        "functions": 20,
        "classes": 3
      },
      {
        "file": "completions.py",
        "reason": "High complexity",
        "complexity_score": 112,
        "functions": 30,
        "classes": 2
      },
      {
        "file": "code_actions.py",
        "reason": "High complexity",
        "complexity_score": 72,
        "functions": 16,
        "classes": 5
      },
      {
        "file": "protocol.py",
        "reason": "High complexity",
        "complexity_score": 106,
        "functions": 22,
        "classes": 9
      },
      {
        "file": "server_manager.py",
        "reason": "High complexity",
        "complexity_score": 89,
        "functions": 19,
        "classes": 4
      },
      {
        "file": "error_retrieval.py",
        "reason": "High complexity",
        "complexity_score": 103,
        "functions": 23,
        "classes": 6
      },
      {
        "file": "diagnostics.py",
        "reason": "High complexity",
        "complexity_score": 126,
        "functions": 29,
        "classes": 6
      },
      {
        "file": "diagnostics.py",
        "reason": "Too many imports",
        "import_count": 21
      },
      {
        "file": "client.py",
        "reason": "High complexity",
        "complexity_score": 58,
        "functions": 7,
        "classes": 5
      },
      {
        "file": "client.py",
        "reason": "Too many imports",
        "import_count": 22
      },
      {
        "file": "__init__.py",
        "reason": "Too many imports",
        "import_count": 22
      },
      {
        "file": "realtime_analyzer.py",
        "reason": "High complexity",
        "complexity_score": 71,
        "functions": 16,
        "classes": 3
      }
    ],
    "architectural_issues": []
  },
  "summary": {
    "total_files": 57,
    "serena_files": 44,
    "total_functions": 652,
    "total_classes": 140,
    "total_lines": 20142
  }
}