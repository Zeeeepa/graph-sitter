{
  "files_analyzed": 31,
  "files_with_errors": 0,
  "total_functions": 105,
  "total_classes": 74,
  "total_methods": 296,
  "import_errors": [
    {
      "file": "./github_integration.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "./consolidated_init.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "./api.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "./consolidated_dashboard.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "./consolidated_api.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "./dashboard.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "./database.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "./test_consolidated_system.py",
      "error": "No module named 'dotenv'"
    },
    {
      "file": "./codegen_integration.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "./__init__.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "./services/strands_orchestrator.py",
      "error": "attempted relative import beyond top-level package"
    },
    {
      "file": "./services/monitoring_service.py",
      "error": "attempted relative import beyond top-level package"
    },
    {
      "file": "./services/quality_service.py",
      "error": "attempted relative import beyond top-level package"
    },
    {
      "file": "./services/codegen_service.py",
      "error": "attempted relative import beyond top-level package"
    },
    {
      "file": "./services/__init__.py",
      "error": "attempted relative import beyond top-level package"
    },
    {
      "file": "./services/project_service.py",
      "error": "attempted relative import beyond top-level package"
    },
    {
      "file": "./workflows/__init__.py",
      "error": "attempted relative import beyond top-level package"
    },
    {
      "file": "./workflows/mcp_integration.py",
      "error": "attempted relative import beyond top-level package"
    },
    {
      "file": "./workflows/controlflow_integration.py",
      "error": "attempted relative import beyond top-level package"
    },
    {
      "file": "./workflows/orchestrator.py",
      "error": "attempted relative import beyond top-level package"
    },
    {
      "file": "./workflows/prefect_integration.py",
      "error": "attempted relative import beyond top-level package"
    }
  ],
  "syntax_errors": [],
  "file_details": {
    "./github_integration.py": {
      "path": "./github_integration.py",
      "exists": true,
      "size_bytes": 14442,
      "lines": 397,
      "functions": [
        {
          "name": "__init__",
          "line_number": 29,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "token",
              "annotation": "Optional[str]"
            }
          ],
          "decorators": [],
          "docstring": "Initialize GitHub project manager.\n\nArgs:\n    token: GitHub access token. If None, uses environment variable.",
          "returns_annotation": null
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectManager",
          "line_number": 26,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 29,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "token",
                  "annotation": "Optional[str]"
                }
              ],
              "decorators": [],
              "docstring": "Initialize GitHub project manager.\n\nArgs:\n    token: GitHub access token. If None, uses environment variable.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "initialize",
              "line_number": 42,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize the GitHub manager.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "get_user_repositories",
              "line_number": 56,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "per_page",
                  "annotation": "int"
                }
              ],
              "decorators": [],
              "docstring": "Get all repositories for the authenticated user.\n\nArgs:\n    per_page: Number of repositories per page (max 100)\n    \nReturns:\n    List of repository data dictionaries",
              "returns_annotation": "List[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "get_repository_details",
              "line_number": 124,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "owner",
                  "annotation": "str"
                },
                {
                  "name": "repo",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get detailed information about a specific repository.\n\nArgs:\n    owner: Repository owner\n    repo: Repository name\n    \nReturns:\n    Repository details dictionary or None if not found",
              "returns_annotation": "Optional[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "get_repository_prs",
              "line_number": 151,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "owner",
                  "annotation": "str"
                },
                {
                  "name": "repo",
                  "annotation": "str"
                },
                {
                  "name": "state",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get pull requests for a repository.\n\nArgs:\n    owner: Repository owner\n    repo: Repository name\n    state: PR state ('open', 'closed', 'all')\n    \nReturns:\n    List of pull request data dictionaries",
              "returns_annotation": "List[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "create_pull_request",
              "line_number": 206,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "owner",
                  "annotation": "str"
                },
                {
                  "name": "repo",
                  "annotation": "str"
                },
                {
                  "name": "title",
                  "annotation": "str"
                },
                {
                  "name": "body",
                  "annotation": "str"
                },
                {
                  "name": "head",
                  "annotation": "str"
                },
                {
                  "name": "base",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Create a new pull request.\n\nArgs:\n    owner: Repository owner\n    repo: Repository name\n    title: PR title\n    body: PR description\n    head: Source branch\n    base: Target branch\n    \nReturns:\n    Created PR data dictionary or None if failed",
              "returns_annotation": "Optional[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "create_issue",
              "line_number": 254,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "owner",
                  "annotation": "str"
                },
                {
                  "name": "repo",
                  "annotation": "str"
                },
                {
                  "name": "title",
                  "annotation": "str"
                },
                {
                  "name": "body",
                  "annotation": "str"
                },
                {
                  "name": "labels",
                  "annotation": "Optional[List[str]]"
                },
                {
                  "name": "assignees",
                  "annotation": "Optional[List[str]]"
                }
              ],
              "decorators": [],
              "docstring": "Create a new issue.\n\nArgs:\n    owner: Repository owner\n    repo: Repository name\n    title: Issue title\n    body: Issue description\n    labels: List of label names\n    assignees: List of assignee usernames\n    \nReturns:\n    Created issue data dictionary or None if failed",
              "returns_annotation": "Optional[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "get_repository_branches",
              "line_number": 305,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "owner",
                  "annotation": "str"
                },
                {
                  "name": "repo",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get branches for a repository.\n\nArgs:\n    owner: Repository owner\n    repo: Repository name\n    \nReturns:\n    List of branch data dictionaries",
              "returns_annotation": "List[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "handle_event",
              "line_number": 340,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "event_type",
                  "annotation": "str"
                },
                {
                  "name": "payload",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Handle GitHub webhook events.\n\nArgs:\n    event_type: Type of GitHub event\n    payload: Event payload data",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_handle_pr_event",
              "line_number": 362,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "payload",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Handle pull request events.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_handle_issue_event",
              "line_number": 372,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "payload",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Handle issue events.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_handle_push_event",
              "line_number": 382,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "payload",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Handle push events.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "cleanup",
              "line_number": 392,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Cleanup GitHub manager resources.",
              "returns_annotation": null,
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "GitHub project management for the dashboard."
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "os",
          "alias": null
        },
        {
          "type": "import",
          "name": "logging",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "Project",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "PRInfo",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "PRStatus",
          "alias": null
        },
        {
          "type": "import",
          "name": "aiohttp",
          "alias": null
        },
        {
          "type": "import",
          "name": "asyncio",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": false,
        "error": "attempted relative import with no known parent package"
      },
      "errors": []
    },
    "./test_both_launchers.py": {
      "path": "./test_both_launchers.py",
      "exists": true,
      "size_bytes": 3337,
      "lines": 115,
      "functions": [
        {
          "name": "test_launcher",
          "line_number": 12,
          "is_async": false,
          "parameters": [
            {
              "name": "script_name",
              "annotation": null
            },
            {
              "name": "description",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Test a dashboard launcher script.",
          "returns_annotation": null
        },
        {
          "name": "main",
          "line_number": 64,
          "is_async": false,
          "parameters": [],
          "decorators": [],
          "docstring": "Run tests for both launchers.",
          "returns_annotation": null
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "name": "subprocess",
          "alias": null
        },
        {
          "type": "import",
          "name": "sys",
          "alias": null
        },
        {
          "type": "import",
          "name": "time",
          "alias": null
        },
        {
          "type": "import",
          "name": "requests",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "type": "import",
          "name": "os",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": true,
        "error": null
      },
      "errors": []
    },
    "./consolidated_init.py": {
      "path": "./consolidated_init.py",
      "exists": true,
      "size_bytes": 2468,
      "lines": 91,
      "functions": [
        {
          "name": "setup_dashboard",
          "line_number": 67,
          "is_async": false,
          "parameters": [
            {
              "name": "contexten_app",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Setup function for easy integration with Contexten.\n\nArgs:\n    contexten_app: Optional Contexten application instance\n    **kwargs: Additional configuration options\n    \nReturns:\n    ConsolidatedDashboard: Configured dashboard instance",
          "returns_annotation": null
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "consolidated_dashboard",
          "name": "ConsolidatedDashboard",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_dashboard",
          "name": "create_consolidated_dashboard",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_api",
          "name": "ConsolidatedDashboardAPI",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_api",
          "name": "create_dashboard_app",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "Project",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "Flow",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "Task",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "UserSettings",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "QualityGate",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "FlowStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "TaskStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "ServiceStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "ProjectStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "QualityGateStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "ServiceStatusResponse",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "ProjectCreateRequest",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "ProjectUpdateRequest",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "FlowStartRequest",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "PlanGenerateRequest",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "CodegenTaskRequest",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "SystemHealthResponse",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "DashboardResponse",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "WebSocketEvent",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "services",
          "name": "StrandsOrchestrator",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "services",
          "name": "ProjectService",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "services",
          "name": "CodegenService",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "services",
          "name": "QualityService",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "services",
          "name": "MonitoringService",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": false,
        "error": "attempted relative import with no known parent package"
      },
      "errors": []
    },
    "./models.py": {
      "path": "./models.py",
      "exists": true,
      "size_bytes": 8989,
      "lines": 271,
      "functions": [],
      "classes": [
        {
          "name": "ProjectStatus",
          "line_number": 15,
          "base_classes": [
            "str",
            "Enum"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Project status enumeration."
        },
        {
          "name": "FlowStatus",
          "line_number": 23,
          "base_classes": [
            "str",
            "Enum"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Workflow flow status enumeration."
        },
        {
          "name": "WorkflowStatus",
          "line_number": 31,
          "base_classes": [
            "str",
            "Enum"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Workflow execution status enumeration."
        },
        {
          "name": "TaskStatus",
          "line_number": 40,
          "base_classes": [
            "str",
            "Enum"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Task status enumeration."
        },
        {
          "name": "QualityGateStatus",
          "line_number": 50,
          "base_classes": [
            "str",
            "Enum"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Quality gate status enumeration."
        },
        {
          "name": "PRStatus",
          "line_number": 58,
          "base_classes": [
            "str",
            "Enum"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Pull request status enumeration."
        },
        {
          "name": "Project",
          "line_number": 67,
          "base_classes": [],
          "methods": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": "Project data model."
        },
        {
          "name": "ProjectPin",
          "line_number": 83,
          "base_classes": [],
          "methods": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": "Project pin data model for dashboard."
        },
        {
          "name": "ProjectSettings",
          "line_number": 95,
          "base_classes": [],
          "methods": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": "Project-specific settings and configuration."
        },
        {
          "name": "WorkflowPlan",
          "line_number": 110,
          "base_classes": [],
          "methods": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": "Workflow plan generated from requirements."
        },
        {
          "name": "WorkflowTask",
          "line_number": 129,
          "base_classes": [],
          "methods": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": "Individual task within a workflow plan."
        },
        {
          "name": "WorkflowExecution",
          "line_number": 152,
          "base_classes": [],
          "methods": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": "Workflow execution tracking."
        },
        {
          "name": "QualityGate",
          "line_number": 168,
          "base_classes": [],
          "methods": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": "Quality gate for code validation."
        },
        {
          "name": "PRInfo",
          "line_number": 184,
          "base_classes": [],
          "methods": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": "Pull request information."
        },
        {
          "name": "EventLog",
          "line_number": 205,
          "base_classes": [],
          "methods": [],
          "decorators": [
            "dataclass"
          ],
          "docstring": "Event log for tracking dashboard activities."
        },
        {
          "name": "ProjectCreateRequest",
          "line_number": 218,
          "base_classes": [
            "BaseModel"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Request model for creating a new project."
        },
        {
          "name": "ProjectPinRequest",
          "line_number": 228,
          "base_classes": [
            "BaseModel"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Request model for pinning a project."
        },
        {
          "name": "WorkflowPlanRequest",
          "line_number": 234,
          "base_classes": [
            "BaseModel"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Request model for creating a workflow plan."
        },
        {
          "name": "SettingsUpdateRequest",
          "line_number": 242,
          "base_classes": [
            "BaseModel"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Request model for updating project settings."
        },
        {
          "name": "EnvironmentVariablesRequest",
          "line_number": 255,
          "base_classes": [
            "BaseModel"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Request model for updating environment variables."
        },
        {
          "name": "DashboardResponse",
          "line_number": 265,
          "base_classes": [
            "BaseModel"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Base response model for dashboard API."
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "enum",
          "name": "Enum",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "field",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "pydantic",
          "name": "BaseModel",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "pydantic",
          "name": "Field",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": true,
        "error": null
      },
      "errors": []
    },
    "./api.py": {
      "path": "./api.py",
      "exists": true,
      "size_bytes": 13682,
      "lines": 386,
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "name": "os",
          "alias": null
        },
        {
          "type": "import",
          "name": "logging",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi",
          "name": "APIRouter",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi",
          "name": "HTTPException",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi",
          "name": "Depends",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi",
          "name": "BackgroundTasks",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi.responses",
          "name": "JSONResponse",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "Project",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "ProjectPin",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "WorkflowPlan",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "ProjectSettings",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "ProjectCreateRequest",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "ProjectPinRequest",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "WorkflowPlanRequest",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "SettingsUpdateRequest",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "EnvironmentVariablesRequest",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "DashboardResponse",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "ProjectStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "FlowStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "database",
          "name": "get_project_repository",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "database",
          "name": "get_workflow_repository",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "database",
          "name": "ProjectRepository",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "database",
          "name": "WorkflowRepository",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "github_integration",
          "name": "GitHubProjectManager",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "codegen_integration",
          "name": "CodegenPlanGenerator",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": false,
        "error": "attempted relative import with no known parent package"
      },
      "errors": []
    },
    "./consolidated_dashboard.py": {
      "path": "./consolidated_dashboard.py",
      "exists": true,
      "size_bytes": 4046,
      "lines": 133,
      "functions": [
        {
          "name": "create_consolidated_dashboard",
          "line_number": 108,
          "is_async": false,
          "parameters": [
            {
              "name": "contexten_app",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Factory function to create a consolidated dashboard instance.",
          "returns_annotation": "ConsolidatedDashboard"
        },
        {
          "name": "__init__",
          "line_number": 22,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "contexten_app",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Initialize the Consolidated Dashboard.",
          "returns_annotation": null
        },
        {
          "name": "run",
          "line_number": 57,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Run the dashboard server (blocking).",
          "returns_annotation": null
        },
        {
          "name": "get_health_status",
          "line_number": 88,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Get current health status.",
          "returns_annotation": null
        }
      ],
      "classes": [
        {
          "name": "ConsolidatedDashboard",
          "line_number": 16,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 22,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "contexten_app",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize the Consolidated Dashboard.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "start",
              "line_number": 35,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Start the dashboard server.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "run",
              "line_number": 57,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Run the dashboard server (blocking).",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "stop",
              "line_number": 76,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Stop the dashboard server.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "get_health_status",
              "line_number": 88,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Get current health status.",
              "returns_annotation": null,
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Main dashboard extension class that consolidates all PR features.\nProvides a unified interface for the complete dashboard system."
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "logging",
          "alias": null
        },
        {
          "type": "import",
          "name": "os",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_api",
          "name": "ConsolidatedDashboardAPI",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_api",
          "name": "create_dashboard_app",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "UserSettings",
          "alias": null
        },
        {
          "type": "import",
          "name": "asyncio",
          "alias": null
        },
        {
          "type": "import",
          "name": "uvicorn",
          "alias": null
        },
        {
          "type": "import",
          "name": "uvicorn",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": false,
        "error": "attempted relative import with no known parent package"
      },
      "errors": []
    },
    "./start_dashboard_standalone.py": {
      "path": "./start_dashboard_standalone.py",
      "exists": true,
      "size_bytes": 17043,
      "lines": 451,
      "functions": [
        {
          "name": "print_banner",
          "line_number": 37,
          "is_async": false,
          "parameters": [],
          "decorators": [],
          "docstring": "Print the dashboard banner.",
          "returns_annotation": null
        },
        {
          "name": "validate_environment",
          "line_number": 55,
          "is_async": false,
          "parameters": [],
          "decorators": [],
          "docstring": "Validate environment configuration.",
          "returns_annotation": "Dict[str, Any]"
        },
        {
          "name": "create_standalone_dashboard",
          "line_number": 100,
          "is_async": false,
          "parameters": [],
          "decorators": [],
          "docstring": "Create the standalone dashboard application.",
          "returns_annotation": null
        },
        {
          "name": "main",
          "line_number": 410,
          "is_async": false,
          "parameters": [],
          "decorators": [],
          "docstring": "Main entry point.",
          "returns_annotation": null
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "name": "os",
          "alias": null
        },
        {
          "type": "import",
          "name": "sys",
          "alias": null
        },
        {
          "type": "import",
          "name": "logging",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi",
          "name": "FastAPI",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi",
          "name": "HTTPException",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi.middleware.cors",
          "name": "CORSMiddleware",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi.responses",
          "name": "JSONResponse",
          "alias": null
        },
        {
          "type": "import",
          "name": "uvicorn",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "Project",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "Flow",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "Task",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "ProjectStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "FlowStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "TaskStatus",
          "alias": null
        },
        {
          "type": "import",
          "name": "uvicorn",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi.responses",
          "name": "HTMLResponse",
          "alias": null
        },
        {
          "type": "import",
          "name": "time",
          "alias": null
        },
        {
          "type": "import",
          "name": "traceback",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": true,
        "error": null
      },
      "errors": []
    },
    "./main.py": {
      "path": "./main.py",
      "exists": true,
      "size_bytes": 2394,
      "lines": 92,
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "name": "sys",
          "alias": null
        },
        {
          "type": "import",
          "name": "os",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi",
          "name": "FastAPI",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi",
          "name": "HTTPException",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi.middleware.cors",
          "name": "CORSMiddleware",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi.staticfiles",
          "name": "StaticFiles",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi.responses",
          "name": "JSONResponse",
          "alias": null
        },
        {
          "type": "import",
          "name": "uvicorn",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": true,
        "error": null
      },
      "errors": []
    },
    "./consolidated_api.py": {
      "path": "./consolidated_api.py",
      "exists": true,
      "size_bytes": 27891,
      "lines": 653,
      "functions": [
        {
          "name": "create_dashboard_app",
          "line_number": 649,
          "is_async": false,
          "parameters": [
            {
              "name": "contexten_app",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Factory function to create the dashboard FastAPI app.",
          "returns_annotation": "FastAPI"
        },
        {
          "name": "__init__",
          "line_number": 41,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "contexten_app",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Initialize the Consolidated Dashboard API.",
          "returns_annotation": null
        },
        {
          "name": "_setup_routes",
          "line_number": 79,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Setup all API routes.",
          "returns_annotation": null
        },
        {
          "name": "disconnect",
          "line_number": 491,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "websocket",
              "annotation": "WebSocket"
            }
          ],
          "decorators": [],
          "docstring": "Remove a WebSocket connection.",
          "returns_annotation": null
        },
        {
          "name": "_start_background_tasks",
          "line_number": 553,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Start background monitoring tasks.",
          "returns_annotation": null
        }
      ],
      "classes": [
        {
          "name": "ConsolidatedDashboardAPI",
          "line_number": 35,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 41,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "contexten_app",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize the Consolidated Dashboard API.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_setup_routes",
              "line_number": 79,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Setup all API routes.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "connect",
              "line_number": 477,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "websocket",
                  "annotation": "WebSocket"
                }
              ],
              "decorators": [],
              "docstring": "Accept a new WebSocket connection.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "disconnect",
              "line_number": 491,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "websocket",
                  "annotation": "WebSocket"
                }
              ],
              "decorators": [],
              "docstring": "Remove a WebSocket connection.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_handle_websocket_message",
              "line_number": 498,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "websocket",
                  "annotation": "WebSocket"
                },
                {
                  "name": "message",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Handle incoming WebSocket messages.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_broadcast_event",
              "line_number": 530,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "event",
                  "annotation": "WebSocketEvent"
                }
              ],
              "decorators": [],
              "docstring": "Broadcast an event to all connected WebSocket clients.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_start_background_tasks",
              "line_number": 553,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Start background monitoring tasks.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_system_health_monitor",
              "line_number": 560,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Background task for system health monitoring.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_analyze_project_background",
              "line_number": 573,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Background task for project analysis.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_monitor_workflow_execution",
              "line_number": 580,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Background task for workflow execution monitoring.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_execute_codegen_task",
              "line_number": 587,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Background task for Codegen task execution.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_validate_quality_gates_background",
              "line_number": 594,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Background task for quality gate validation.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_check_github_status",
              "line_number": 606,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Check GitHub service status.",
              "returns_annotation": "ServiceStatus",
              "is_method": true
            },
            {
              "name": "_check_linear_status",
              "line_number": 615,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Check Linear service status.",
              "returns_annotation": "ServiceStatus",
              "is_method": true
            },
            {
              "name": "_check_slack_status",
              "line_number": 624,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Check Slack service status.",
              "returns_annotation": "ServiceStatus",
              "is_method": true
            },
            {
              "name": "_check_codegen_status",
              "line_number": 633,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Check Codegen SDK status.",
              "returns_annotation": "ServiceStatus",
              "is_method": true
            },
            {
              "name": "_check_database_status",
              "line_number": 640,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Check database status.",
              "returns_annotation": "ServiceStatus",
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Consolidated Dashboard API class combining all PR features.\nProvides REST endpoints and WebSocket connections for the complete dashboard system."
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "asyncio",
          "alias": null
        },
        {
          "type": "import",
          "name": "json",
          "alias": null
        },
        {
          "type": "import",
          "name": "logging",
          "alias": null
        },
        {
          "type": "import",
          "name": "os",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi",
          "name": "FastAPI",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi",
          "name": "HTTPException",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi",
          "name": "WebSocket",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi",
          "name": "WebSocketDisconnect",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi",
          "name": "BackgroundTasks",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi.middleware.cors",
          "name": "CORSMiddleware",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi.responses",
          "name": "JSONResponse",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "Project",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "Flow",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "Task",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "UserSettings",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "QualityGate",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "FlowStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "TaskStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "ServiceStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "ProjectStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "QualityGateStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "ServiceStatusResponse",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "ProjectCreateRequest",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "ProjectUpdateRequest",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "FlowStartRequest",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "PlanGenerateRequest",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "CodegenTaskRequest",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "SystemHealthResponse",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "DashboardResponse",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "WebSocketEvent",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "ProjectUpdateEvent",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "FlowUpdateEvent",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "TaskUpdateEvent",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "QualityGateEvent",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "SystemHealthEvent",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "services.strands_orchestrator",
          "name": "StrandsOrchestrator",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "services.project_service",
          "name": "ProjectService",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "services.codegen_service",
          "name": "CodegenService",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "services.quality_service",
          "name": "QualityService",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "services.monitoring_service",
          "name": "MonitoringService",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": false,
        "error": "attempted relative import with no known parent package"
      },
      "errors": []
    },
    "./start_dashboard.py": {
      "path": "./start_dashboard.py",
      "exists": true,
      "size_bytes": 4689,
      "lines": 156,
      "functions": [
        {
          "name": "check_dependencies",
          "line_number": 14,
          "is_async": false,
          "parameters": [],
          "decorators": [],
          "docstring": "Check if required dependencies are available",
          "returns_annotation": null
        },
        {
          "name": "install_frontend_deps",
          "line_number": 44,
          "is_async": false,
          "parameters": [],
          "decorators": [],
          "docstring": "Install frontend dependencies if needed",
          "returns_annotation": null
        },
        {
          "name": "start_backend",
          "line_number": 62,
          "is_async": false,
          "parameters": [],
          "decorators": [],
          "docstring": "Start the FastAPI backend",
          "returns_annotation": null
        },
        {
          "name": "start_frontend",
          "line_number": 74,
          "is_async": false,
          "parameters": [],
          "decorators": [],
          "docstring": "Start the React frontend",
          "returns_annotation": null
        },
        {
          "name": "main",
          "line_number": 88,
          "is_async": false,
          "parameters": [],
          "decorators": [],
          "docstring": "Main startup function",
          "returns_annotation": null
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "name": "subprocess",
          "alias": null
        },
        {
          "type": "import",
          "name": "sys",
          "alias": null
        },
        {
          "type": "import",
          "name": "os",
          "alias": null
        },
        {
          "type": "import",
          "name": "time",
          "alias": null
        },
        {
          "type": "import",
          "name": "signal",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "type": "import",
          "name": "uvicorn",
          "alias": null
        },
        {
          "type": "import",
          "name": "fastapi",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": true,
        "error": null
      },
      "errors": []
    },
    "./start_consolidated_dashboard.py": {
      "path": "./start_consolidated_dashboard.py",
      "exists": true,
      "size_bytes": 5975,
      "lines": 187,
      "functions": [
        {
          "name": "setup_logging",
          "line_number": 25,
          "is_async": false,
          "parameters": [
            {
              "name": "debug",
              "annotation": "bool"
            }
          ],
          "decorators": [],
          "docstring": "Setup logging configuration.",
          "returns_annotation": null
        },
        {
          "name": "check_environment",
          "line_number": 43,
          "is_async": false,
          "parameters": [],
          "decorators": [],
          "docstring": "Check required environment variables.",
          "returns_annotation": null
        },
        {
          "name": "print_banner",
          "line_number": 81,
          "is_async": false,
          "parameters": [],
          "decorators": [],
          "docstring": "Print startup banner.",
          "returns_annotation": null
        },
        {
          "name": "main",
          "line_number": 100,
          "is_async": false,
          "parameters": [],
          "decorators": [],
          "docstring": "Main entry point.",
          "returns_annotation": null
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "name": "os",
          "alias": null
        },
        {
          "type": "import",
          "name": "sys",
          "alias": null
        },
        {
          "type": "import",
          "name": "logging",
          "alias": null
        },
        {
          "type": "import",
          "name": "argparse",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_dashboard",
          "name": "create_consolidated_dashboard",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "start_dashboard_standalone",
          "name": "create_standalone_dashboard",
          "alias": "create_consolidated_dashboard"
        },
        {
          "type": "import",
          "name": "uvicorn",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": true,
        "error": null
      },
      "errors": []
    },
    "./dashboard.py": {
      "path": "./dashboard.py",
      "exists": true,
      "size_bytes": 12927,
      "lines": 347,
      "functions": [
        {
          "name": "setup_dashboard",
          "line_number": 332,
          "is_async": false,
          "parameters": [
            {
              "name": "contexten_app",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Setup dashboard extension for ContextenApp.\n\nArgs:\n    contexten_app: The ContextenApp instance\n    \nReturns:\n    Dashboard: The initialized dashboard extension",
          "returns_annotation": "Dashboard"
        },
        {
          "name": "__init__",
          "line_number": 42,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "contexten_app",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Initialize the Dashboard extension.\n\nArgs:\n    contexten_app: The parent ContextenApp instance",
          "returns_annotation": null
        },
        {
          "name": "_setup_routes",
          "line_number": 63,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Setup FastAPI routes for the dashboard.",
          "returns_annotation": null
        },
        {
          "name": "_setup_static_files",
          "line_number": 82,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Setup static file serving for the React frontend.",
          "returns_annotation": null
        },
        {
          "name": "_get_fallback_html",
          "line_number": 109,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Get fallback HTML when React build is not available.",
          "returns_annotation": "str"
        }
      ],
      "classes": [
        {
          "name": "Dashboard",
          "line_number": 28,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 42,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "contexten_app",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize the Dashboard extension.\n\nArgs:\n    contexten_app: The parent ContextenApp instance",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_setup_routes",
              "line_number": 63,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Setup FastAPI routes for the dashboard.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_setup_static_files",
              "line_number": 82,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Setup static file serving for the React frontend.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_serve_dashboard_ui",
              "line_number": 96,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Serve the dashboard UI HTML.",
              "returns_annotation": "HTMLResponse",
              "is_method": true
            },
            {
              "name": "_get_fallback_html",
              "line_number": 109,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Get fallback HTML when React build is not available.",
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "initialize",
              "line_number": 233,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize the dashboard extension.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "handle_github_event",
              "line_number": 251,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "event_type",
                  "annotation": "str"
                },
                {
                  "name": "payload",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Handle GitHub webhook events.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "handle_linear_event",
              "line_number": 270,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "event_type",
                  "annotation": "str"
                },
                {
                  "name": "payload",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Handle Linear webhook events.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "handle_workflow_update",
              "line_number": 286,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "workflow_id",
                  "annotation": "str"
                },
                {
                  "name": "status",
                  "annotation": "str"
                },
                {
                  "name": "progress",
                  "annotation": "float"
                }
              ],
              "decorators": [],
              "docstring": "Handle workflow execution updates.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "get_dashboard_stats",
              "line_number": 303,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Get dashboard statistics and metrics.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "cleanup",
              "line_number": 321,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Cleanup dashboard resources.",
              "returns_annotation": null,
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Dashboard extension for Contexten providing comprehensive project management\nand workflow orchestration capabilities.\n\nFeatures:\n- Project pinning and management\n- GitHub repository integration\n- Automated plan generation via Codegen SDK\n- Multi-layered workflow orchestration (Prefect, ControlFlow, MCP)\n- Real-time progress tracking\n- Quality gates and validation"
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "os",
          "alias": null
        },
        {
          "type": "import",
          "name": "logging",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi",
          "name": "FastAPI",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi",
          "name": "Request",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi.staticfiles",
          "name": "StaticFiles",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi.responses",
          "name": "HTMLResponse",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi.responses",
          "name": "FileResponse",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "api",
          "name": "router",
          "alias": "api_router"
        },
        {
          "type": "from_import",
          "module": "websocket",
          "name": "WebSocketManager",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "database",
          "name": "initialize_database",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "database",
          "name": "db_manager",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "github_integration",
          "name": "GitHubProjectManager",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "codegen_integration",
          "name": "CodegenPlanGenerator",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "workflows.orchestrator",
          "name": "WorkflowOrchestrator",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": false,
        "error": "attempted relative import with no known parent package"
      },
      "errors": []
    },
    "./database.py": {
      "path": "./database.py",
      "exists": true,
      "size_bytes": 18724,
      "lines": 490,
      "functions": [
        {
          "name": "__init__",
          "line_number": 200,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "database_url",
              "annotation": "Optional[str]"
            }
          ],
          "decorators": [],
          "docstring": "Initialize database manager.\n\nArgs:\n    database_url: PostgreSQL connection URL. If None, uses environment variable.",
          "returns_annotation": null
        },
        {
          "name": "_setup_async_engine",
          "line_number": 218,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Setup async database engine.",
          "returns_annotation": null
        },
        {
          "name": "__init__",
          "line_number": 266,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "db_manager",
              "annotation": "DatabaseManager"
            }
          ],
          "decorators": [],
          "docstring": null,
          "returns_annotation": null
        },
        {
          "name": "__init__",
          "line_number": 395,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "db_manager",
              "annotation": "DatabaseManager"
            }
          ],
          "decorators": [],
          "docstring": null,
          "returns_annotation": null
        }
      ],
      "classes": [
        {
          "name": "DatabaseManager",
          "line_number": 197,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 200,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "database_url",
                  "annotation": "Optional[str]"
                }
              ],
              "decorators": [],
              "docstring": "Initialize database manager.\n\nArgs:\n    database_url: PostgreSQL connection URL. If None, uses environment variable.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_setup_async_engine",
              "line_number": 218,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Setup async database engine.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "initialize_schema",
              "line_number": 236,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize database schema.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "get_session",
              "line_number": 251,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Get database session.",
              "returns_annotation": "Optional[AsyncSession]",
              "is_method": true
            },
            {
              "name": "close",
              "line_number": 257,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Close database connections.",
              "returns_annotation": null,
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Database manager for the dashboard system."
        },
        {
          "name": "ProjectRepository",
          "line_number": 263,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 266,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "db_manager",
                  "annotation": "DatabaseManager"
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "create_project",
              "line_number": 269,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project",
                  "annotation": "Project"
                }
              ],
              "decorators": [],
              "docstring": "Create a new project.",
              "returns_annotation": "Optional[str]",
              "is_method": true
            },
            {
              "name": "get_project",
              "line_number": 298,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get project by ID.",
              "returns_annotation": "Optional[Project]",
              "is_method": true
            },
            {
              "name": "get_projects_by_user",
              "line_number": 328,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "user_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get all projects pinned by a user.",
              "returns_annotation": "List[Project]",
              "is_method": true
            },
            {
              "name": "pin_project",
              "line_number": 363,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_pin",
                  "annotation": "ProjectPin"
                }
              ],
              "decorators": [],
              "docstring": "Pin a project for a user.",
              "returns_annotation": "bool",
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Repository for project data operations."
        },
        {
          "name": "WorkflowRepository",
          "line_number": 392,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 395,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "db_manager",
                  "annotation": "DatabaseManager"
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "create_plan",
              "line_number": 398,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "plan",
                  "annotation": "WorkflowPlan"
                }
              ],
              "decorators": [],
              "docstring": "Create a new workflow plan.",
              "returns_annotation": "Optional[str]",
              "is_method": true
            },
            {
              "name": "get_plans_by_project",
              "line_number": 435,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get all workflow plans for a project.",
              "returns_annotation": "List[WorkflowPlan]",
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Repository for workflow data operations."
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "os",
          "alias": null
        },
        {
          "type": "import",
          "name": "asyncio",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "type": "import",
          "name": "json",
          "alias": null
        },
        {
          "type": "import",
          "name": "logging",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "Project",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "ProjectPin",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "ProjectSettings",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "WorkflowPlan",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "WorkflowTask",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "WorkflowExecution",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "QualityGate",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "PRInfo",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "EventLog",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "ProjectStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "FlowStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "WorkflowStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "TaskStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "QualityGateStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "PRStatus",
          "alias": null
        },
        {
          "type": "import",
          "name": "asyncpg",
          "alias": null
        },
        {
          "type": "import",
          "name": "sqlalchemy",
          "alias": "sa"
        },
        {
          "type": "from_import",
          "module": "sqlalchemy.ext.asyncio",
          "name": "create_async_engine",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "sqlalchemy.ext.asyncio",
          "name": "AsyncSession",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "sqlalchemy.orm",
          "name": "sessionmaker",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "sqlalchemy.orm",
          "name": "declarative_base",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "sqlalchemy.dialects.postgresql",
          "name": "UUID",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "sqlalchemy.dialects.postgresql",
          "name": "JSONB",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": false,
        "error": "attempted relative import with no known parent package"
      },
      "errors": []
    },
    "./websocket.py": {
      "path": "./websocket.py",
      "exists": true,
      "size_bytes": 15798,
      "lines": 417,
      "functions": [
        {
          "name": "__init__",
          "line_number": 30,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "websocket",
              "annotation": "WebSocket"
            },
            {
              "name": "user_id",
              "annotation": "str"
            },
            {
              "name": "connection_id",
              "annotation": "str"
            }
          ],
          "decorators": [],
          "docstring": null,
          "returns_annotation": null
        },
        {
          "name": "subscribe",
          "line_number": 45,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "topic",
              "annotation": "str"
            }
          ],
          "decorators": [],
          "docstring": "Subscribe to a topic.",
          "returns_annotation": null
        },
        {
          "name": "unsubscribe",
          "line_number": 50,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "topic",
              "annotation": "str"
            }
          ],
          "decorators": [],
          "docstring": "Unsubscribe from a topic.",
          "returns_annotation": null
        },
        {
          "name": "is_subscribed",
          "line_number": 55,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "topic",
              "annotation": "str"
            }
          ],
          "decorators": [],
          "docstring": "Check if subscribed to a topic.",
          "returns_annotation": "bool"
        },
        {
          "name": "__init__",
          "line_number": 63,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": null,
          "returns_annotation": null
        },
        {
          "name": "setup_routes",
          "line_number": 71,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "app",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Setup WebSocket routes on the FastAPI app.",
          "returns_annotation": null
        },
        {
          "name": "get_connection_stats",
          "line_number": 382,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Get WebSocket connection statistics.\n\nReturns:\n    Connection statistics dictionary",
          "returns_annotation": "Dict[str, Any]"
        }
      ],
      "classes": [
        {
          "name": "WebSocketConnection",
          "line_number": 27,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 30,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "websocket",
                  "annotation": "WebSocket"
                },
                {
                  "name": "user_id",
                  "annotation": "str"
                },
                {
                  "name": "connection_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "send_message",
              "line_number": 38,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "message",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Send a message to this connection.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "subscribe",
              "line_number": 45,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "topic",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Subscribe to a topic.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "unsubscribe",
              "line_number": 50,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "topic",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Unsubscribe from a topic.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "is_subscribed",
              "line_number": 55,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "topic",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Check if subscribed to a topic.",
              "returns_annotation": "bool",
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Represents a WebSocket connection with metadata."
        },
        {
          "name": "WebSocketManager",
          "line_number": 60,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 63,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "setup_routes",
              "line_number": 71,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "app",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Setup WebSocket routes on the FastAPI app.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "handle_connection",
              "line_number": 80,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "websocket",
                  "annotation": "WebSocket"
                },
                {
                  "name": "user_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Handle a new WebSocket connection.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_handle_messages",
              "line_number": 119,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "connection",
                  "annotation": "WebSocketConnection"
                }
              ],
              "decorators": [],
              "docstring": "Handle incoming messages from a WebSocket connection.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_process_message",
              "line_number": 135,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "connection",
                  "annotation": "WebSocketConnection"
                },
                {
                  "name": "message",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Process an incoming message from a client.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_subscribe_connection",
              "line_number": 161,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "connection",
                  "annotation": "WebSocketConnection"
                },
                {
                  "name": "topic",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Subscribe a connection to a topic.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_unsubscribe_connection",
              "line_number": 179,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "connection",
                  "annotation": "WebSocketConnection"
                },
                {
                  "name": "topic",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Unsubscribe a connection from a topic.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_send_status_update",
              "line_number": 198,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "connection",
                  "annotation": "WebSocketConnection"
                }
              ],
              "decorators": [],
              "docstring": "Send current status to a connection.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_cleanup_connection",
              "line_number": 218,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "connection_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Clean up a disconnected connection.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "broadcast",
              "line_number": 243,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "message",
                  "annotation": "Dict[str, Any]"
                },
                {
                  "name": "topic",
                  "annotation": "Optional[str]"
                }
              ],
              "decorators": [],
              "docstring": "Broadcast a message to all connections or topic subscribers.\n\nArgs:\n    message: Message to broadcast\n    topic: Optional topic to broadcast to specific subscribers",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "send_to_user",
              "line_number": 279,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "user_id",
                  "annotation": "str"
                },
                {
                  "name": "message",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Send a message to all connections for a specific user.\n\nArgs:\n    user_id: Target user ID\n    message: Message to send",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "send_project_update",
              "line_number": 314,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                },
                {
                  "name": "update_data",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Send a project-specific update.\n\nArgs:\n    project_id: Project ID\n    update_data: Update data",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "send_workflow_update",
              "line_number": 330,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "workflow_id",
                  "annotation": "str"
                },
                {
                  "name": "status",
                  "annotation": "str"
                },
                {
                  "name": "progress",
                  "annotation": "float"
                },
                {
                  "name": "details",
                  "annotation": "Optional[Dict[str, Any]]"
                }
              ],
              "decorators": [],
              "docstring": "Send a workflow execution update.\n\nArgs:\n    workflow_id: Workflow ID\n    status: Current status\n    progress: Progress percentage (0-100)\n    details: Additional details",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "send_pr_update",
              "line_number": 350,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                },
                {
                  "name": "pr_data",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Send a pull request update.\n\nArgs:\n    project_id: Project ID\n    pr_data: PR data",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "send_quality_gate_update",
              "line_number": 366,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task_id",
                  "annotation": "str"
                },
                {
                  "name": "gate_data",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Send a quality gate update.\n\nArgs:\n    task_id: Task ID\n    gate_data: Quality gate data",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "get_connection_stats",
              "line_number": 382,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Get WebSocket connection statistics.\n\nReturns:\n    Connection statistics dictionary",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "cleanup",
              "line_number": 402,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Cleanup all WebSocket connections.",
              "returns_annotation": null,
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Manages WebSocket connections and real-time messaging."
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "json",
          "alias": null
        },
        {
          "type": "import",
          "name": "logging",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Set",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi",
          "name": "WebSocket",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi",
          "name": "WebSocketDisconnect",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi.routing",
          "name": "APIRouter",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": true,
        "error": null
      },
      "errors": []
    },
    "./validate_everything.py": {
      "path": "./validate_everything.py",
      "exists": true,
      "size_bytes": 8653,
      "lines": 277,
      "functions": [
        {
          "name": "print_header",
          "line_number": 14,
          "is_async": false,
          "parameters": [
            {
              "name": "title",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Print a formatted header.",
          "returns_annotation": null
        },
        {
          "name": "print_success",
          "line_number": 20,
          "is_async": false,
          "parameters": [
            {
              "name": "message",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Print a success message.",
          "returns_annotation": null
        },
        {
          "name": "print_error",
          "line_number": 24,
          "is_async": false,
          "parameters": [
            {
              "name": "message",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Print an error message.",
          "returns_annotation": null
        },
        {
          "name": "print_info",
          "line_number": 28,
          "is_async": false,
          "parameters": [
            {
              "name": "message",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Print an info message.",
          "returns_annotation": null
        },
        {
          "name": "test_imports",
          "line_number": 32,
          "is_async": false,
          "parameters": [],
          "decorators": [],
          "docstring": "Test all import capabilities.",
          "returns_annotation": null
        },
        {
          "name": "test_dashboard_creation",
          "line_number": 76,
          "is_async": false,
          "parameters": [],
          "decorators": [],
          "docstring": "Test dashboard application creation.",
          "returns_annotation": null
        },
        {
          "name": "test_server_startup",
          "line_number": 105,
          "is_async": false,
          "parameters": [],
          "decorators": [],
          "docstring": "Test server startup and basic functionality.",
          "returns_annotation": null
        },
        {
          "name": "test_models",
          "line_number": 173,
          "is_async": false,
          "parameters": [],
          "decorators": [],
          "docstring": "Test data model functionality.",
          "returns_annotation": null
        },
        {
          "name": "main",
          "line_number": 225,
          "is_async": false,
          "parameters": [],
          "decorators": [],
          "docstring": "Run all validation tests.",
          "returns_annotation": null
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "name": "sys",
          "alias": null
        },
        {
          "type": "import",
          "name": "os",
          "alias": null
        },
        {
          "type": "import",
          "name": "subprocess",
          "alias": null
        },
        {
          "type": "import",
          "name": "time",
          "alias": null
        },
        {
          "type": "import",
          "name": "json",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "Project",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "Flow",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "Task",
          "alias": null
        },
        {
          "type": "import",
          "name": "start_dashboard_standalone",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "fastapi",
          "name": "FastAPI",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "start_dashboard_standalone",
          "name": "create_standalone_dashboard",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "Project",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "Flow",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "Task",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "FlowStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "TaskStatus",
          "alias": null
        },
        {
          "type": "import",
          "name": "importlib.util",
          "alias": null
        },
        {
          "type": "import",
          "name": "traceback",
          "alias": null
        },
        {
          "type": "import",
          "name": "traceback",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": true,
        "error": null
      },
      "errors": []
    },
    "./test_consolidated_system.py": {
      "path": "./test_consolidated_system.py",
      "exists": true,
      "size_bytes": 11945,
      "lines": 367,
      "functions": [
        {
          "name": "main",
          "line_number": 352,
          "is_async": false,
          "parameters": [],
          "decorators": [],
          "docstring": "Main entry point.",
          "returns_annotation": null
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "name": "asyncio",
          "alias": null
        },
        {
          "type": "import",
          "name": "json",
          "alias": null
        },
        {
          "type": "import",
          "name": "logging",
          "alias": null
        },
        {
          "type": "import",
          "name": "sys",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "src.contexten.extensions.dashboard.consolidated_dashboard",
          "name": "create_consolidated_dashboard",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "src.contexten.extensions.dashboard.consolidated_models",
          "name": "ProjectCreateRequest",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "src.contexten.extensions.dashboard.consolidated_models",
          "name": "FlowStartRequest",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "src.contexten.extensions.dashboard.consolidated_models",
          "name": "PlanGenerateRequest",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "src.contexten.extensions.dashboard.consolidated_models",
          "name": "ProjectUpdateEvent",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": false,
        "error": "No module named 'dotenv'"
      },
      "errors": []
    },
    "./codegen_integration.py": {
      "path": "./codegen_integration.py",
      "exists": true,
      "size_bytes": 16911,
      "lines": 442,
      "functions": [
        {
          "name": "__init__",
          "line_number": 28,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "org_id",
              "annotation": "Optional[str]"
            },
            {
              "name": "token",
              "annotation": "Optional[str]"
            }
          ],
          "decorators": [],
          "docstring": "Initialize Codegen plan generator.\n\nArgs:\n    org_id: Codegen organization ID. If None, uses environment variable.\n    token: Codegen API token. If None, uses environment variable.",
          "returns_annotation": null
        },
        {
          "name": "_build_plan_prompt",
          "line_number": 111,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "requirements",
              "annotation": "str"
            },
            {
              "name": "title",
              "annotation": "str"
            },
            {
              "name": "description",
              "annotation": "str"
            },
            {
              "name": "context",
              "annotation": "Optional[Dict[str, Any]]"
            }
          ],
          "decorators": [],
          "docstring": "Build the prompt for Codegen plan generation.\n\nArgs:\n    requirements: User requirements\n    title: Plan title\n    description: Plan description\n    context: Additional context\n    \nReturns:\n    Formatted prompt string",
          "returns_annotation": "str"
        }
      ],
      "classes": [
        {
          "name": "CodegenPlanGenerator",
          "line_number": 25,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 28,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "org_id",
                  "annotation": "Optional[str]"
                },
                {
                  "name": "token",
                  "annotation": "Optional[str]"
                }
              ],
              "decorators": [],
              "docstring": "Initialize Codegen plan generator.\n\nArgs:\n    org_id: Codegen organization ID. If None, uses environment variable.\n    token: Codegen API token. If None, uses environment variable.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "initialize",
              "line_number": 42,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize the Codegen agent.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "generate_plan",
              "line_number": 54,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                },
                {
                  "name": "requirements",
                  "annotation": "str"
                },
                {
                  "name": "title",
                  "annotation": "str"
                },
                {
                  "name": "description",
                  "annotation": "str"
                },
                {
                  "name": "context",
                  "annotation": "Optional[Dict[str, Any]]"
                }
              ],
              "decorators": [],
              "docstring": "Generate a workflow plan using Codegen SDK.\n\nArgs:\n    project_id: Project ID for context\n    requirements: User requirements text\n    title: Plan title\n    description: Plan description\n    context: Additional context information\n    \nReturns:\n    Generated plan dictionary",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "_build_plan_prompt",
              "line_number": 111,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "requirements",
                  "annotation": "str"
                },
                {
                  "name": "title",
                  "annotation": "str"
                },
                {
                  "name": "description",
                  "annotation": "str"
                },
                {
                  "name": "context",
                  "annotation": "Optional[Dict[str, Any]]"
                }
              ],
              "decorators": [],
              "docstring": "Build the prompt for Codegen plan generation.\n\nArgs:\n    requirements: User requirements\n    title: Plan title\n    description: Plan description\n    context: Additional context\n    \nReturns:\n    Formatted prompt string",
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "_parse_codegen_result",
              "line_number": 163,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "result",
                  "annotation": "str"
                },
                {
                  "name": "requirements",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Parse Codegen result into structured plan format.\n\nArgs:\n    result: Raw result from Codegen\n    requirements: Original requirements\n    \nReturns:\n    Structured plan dictionary",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "_extract_tasks_from_result",
              "line_number": 195,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "result",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Extract tasks from Codegen result.\n\nArgs:\n    result: Codegen result text\n    \nReturns:\n    List of task dictionaries",
              "returns_annotation": "List[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "_extract_summary_from_result",
              "line_number": 248,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "result",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Extract summary from Codegen result.",
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "_calculate_complexity_score",
              "line_number": 253,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "result",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Calculate complexity score from Codegen result.",
              "returns_annotation": "float",
              "is_method": true
            },
            {
              "name": "_extract_duration_from_result",
              "line_number": 258,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "result",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Extract estimated duration from Codegen result.",
              "returns_annotation": "int",
              "is_method": true
            },
            {
              "name": "_extract_risks_from_result",
              "line_number": 263,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "result",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Extract risk assessment from Codegen result.",
              "returns_annotation": "List[str]",
              "is_method": true
            },
            {
              "name": "_generate_fallback_plan",
              "line_number": 272,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "requirements",
                  "annotation": "str"
                },
                {
                  "name": "title",
                  "annotation": "str"
                },
                {
                  "name": "description",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Generate a fallback plan when Codegen is not available.\n\nArgs:\n    requirements: User requirements\n    title: Plan title\n    description: Plan description\n    \nReturns:\n    Fallback plan dictionary",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "_analyze_requirements_for_tasks",
              "line_number": 307,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "requirements",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Analyze requirements text to generate basic tasks.\n\nArgs:\n    requirements: Requirements text\n    \nReturns:\n    List of basic task dictionaries",
              "returns_annotation": "List[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "create_linear_issues_from_plan",
              "line_number": 412,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "plan",
                  "annotation": "Dict[str, Any]"
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Create Linear issues from a generated plan.\n\nArgs:\n    plan: Generated plan dictionary\n    project_id: Project ID for context\n    \nReturns:\n    List of created Linear issue IDs",
              "returns_annotation": "List[str]",
              "is_method": true
            },
            {
              "name": "create_github_issues_from_plan",
              "line_number": 427,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "plan",
                  "annotation": "Dict[str, Any]"
                },
                {
                  "name": "owner",
                  "annotation": "str"
                },
                {
                  "name": "repo",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Create GitHub issues from a generated plan.\n\nArgs:\n    plan: Generated plan dictionary\n    owner: Repository owner\n    repo: Repository name\n    \nReturns:\n    List of created GitHub issue IDs",
              "returns_annotation": "List[str]",
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Codegen SDK integration for automated plan generation."
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "os",
          "alias": null
        },
        {
          "type": "import",
          "name": "logging",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "WorkflowPlan",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "WorkflowTask",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "TaskStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "codegen",
          "name": "Agent",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": false,
        "error": "attempted relative import with no known parent package"
      },
      "errors": []
    },
    "./consolidated_models.py": {
      "path": "./consolidated_models.py",
      "exists": true,
      "size_bytes": 13971,
      "lines": 422,
      "functions": [
        {
          "name": "to_dict",
          "line_number": 94,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Convert to dictionary for JSON serialization.",
          "returns_annotation": "Dict[str, Any]"
        },
        {
          "name": "to_dict",
          "line_number": 154,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Convert to dictionary for JSON serialization.",
          "returns_annotation": "Dict[str, Any]"
        },
        {
          "name": "progress_percentage",
          "line_number": 204,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            "property"
          ],
          "docstring": "Calculate progress based on completed tasks.",
          "returns_annotation": "float"
        },
        {
          "name": "to_dict",
          "line_number": 211,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Convert to dictionary for JSON serialization.",
          "returns_annotation": "Dict[str, Any]"
        },
        {
          "name": "to_dict",
          "line_number": 248,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Convert to dictionary for JSON serialization.",
          "returns_annotation": "Dict[str, Any]"
        },
        {
          "name": "to_dict",
          "line_number": 295,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Convert to dictionary for JSON serialization (excluding sensitive data).",
          "returns_annotation": "Dict[str, Any]"
        }
      ],
      "classes": [
        {
          "name": "FlowStatus",
          "line_number": 14,
          "base_classes": [
            "str",
            "Enum"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Flow execution status."
        },
        {
          "name": "TaskStatus",
          "line_number": 25,
          "base_classes": [
            "str",
            "Enum"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Individual task status."
        },
        {
          "name": "ServiceStatus",
          "line_number": 35,
          "base_classes": [
            "str",
            "Enum"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Service connection status."
        },
        {
          "name": "ProjectStatus",
          "line_number": 43,
          "base_classes": [
            "str",
            "Enum"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Project status."
        },
        {
          "name": "QualityGateStatus",
          "line_number": 51,
          "base_classes": [
            "str",
            "Enum"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Quality gate validation status."
        },
        {
          "name": "Project",
          "line_number": 61,
          "base_classes": [],
          "methods": [
            {
              "name": "to_dict",
              "line_number": 94,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Convert to dictionary for JSON serialization.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            }
          ],
          "decorators": [
            "dataclass"
          ],
          "docstring": "Enhanced project model combining all PR features."
        },
        {
          "name": "Task",
          "line_number": 127,
          "base_classes": [],
          "methods": [
            {
              "name": "to_dict",
              "line_number": 154,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Convert to dictionary for JSON serialization.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            }
          ],
          "decorators": [
            "dataclass"
          ],
          "docstring": "Enhanced task model for workflow execution."
        },
        {
          "name": "Flow",
          "line_number": 181,
          "base_classes": [],
          "methods": [
            {
              "name": "progress_percentage",
              "line_number": 204,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [
                "property"
              ],
              "docstring": "Calculate progress based on completed tasks.",
              "returns_annotation": "float",
              "is_method": true
            },
            {
              "name": "to_dict",
              "line_number": 211,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Convert to dictionary for JSON serialization.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            }
          ],
          "decorators": [
            "dataclass"
          ],
          "docstring": "Enhanced flow model for project execution."
        },
        {
          "name": "QualityGate",
          "line_number": 234,
          "base_classes": [],
          "methods": [
            {
              "name": "to_dict",
              "line_number": 248,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Convert to dictionary for JSON serialization.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            }
          ],
          "decorators": [
            "dataclass"
          ],
          "docstring": "Quality gate for validation."
        },
        {
          "name": "UserSettings",
          "line_number": 266,
          "base_classes": [],
          "methods": [
            {
              "name": "to_dict",
              "line_number": 295,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Convert to dictionary for JSON serialization (excluding sensitive data).",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            }
          ],
          "decorators": [
            "dataclass"
          ],
          "docstring": "Enhanced user settings for dashboard configuration."
        },
        {
          "name": "ServiceStatusResponse",
          "line_number": 319,
          "base_classes": [
            "BaseModel"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Response model for service status."
        },
        {
          "name": "ProjectCreateRequest",
          "line_number": 332,
          "base_classes": [
            "BaseModel"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Request model for creating a project."
        },
        {
          "name": "ProjectUpdateRequest",
          "line_number": 339,
          "base_classes": [
            "BaseModel"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Request model for updating a project."
        },
        {
          "name": "FlowStartRequest",
          "line_number": 346,
          "base_classes": [
            "BaseModel"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Request model for starting a flow."
        },
        {
          "name": "PlanGenerateRequest",
          "line_number": 354,
          "base_classes": [
            "BaseModel"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Request model for generating a plan."
        },
        {
          "name": "CodegenTaskRequest",
          "line_number": 361,
          "base_classes": [
            "BaseModel"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Request model for Codegen SDK tasks."
        },
        {
          "name": "SystemHealthResponse",
          "line_number": 369,
          "base_classes": [
            "BaseModel"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Response model for system health."
        },
        {
          "name": "DashboardResponse",
          "line_number": 380,
          "base_classes": [
            "BaseModel"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Generic response model for dashboard API."
        },
        {
          "name": "WebSocketEvent",
          "line_number": 389,
          "base_classes": [
            "BaseModel"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Base WebSocket event model."
        },
        {
          "name": "ProjectUpdateEvent",
          "line_number": 399,
          "base_classes": [
            "WebSocketEvent"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Project update WebSocket event."
        },
        {
          "name": "FlowUpdateEvent",
          "line_number": 404,
          "base_classes": [
            "WebSocketEvent"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Flow update WebSocket event."
        },
        {
          "name": "TaskUpdateEvent",
          "line_number": 409,
          "base_classes": [
            "WebSocketEvent"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Task update WebSocket event."
        },
        {
          "name": "QualityGateEvent",
          "line_number": 414,
          "base_classes": [
            "WebSocketEvent"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Quality gate WebSocket event."
        },
        {
          "name": "SystemHealthEvent",
          "line_number": 419,
          "base_classes": [
            "WebSocketEvent"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "System health WebSocket event."
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "enum",
          "name": "Enum",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Union",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "dataclasses",
          "name": "field",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "pydantic",
          "name": "BaseModel",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "pydantic",
          "name": "Field",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": true,
        "error": null
      },
      "errors": []
    },
    "./__init__.py": {
      "path": "./__init__.py",
      "exists": true,
      "size_bytes": 887,
      "lines": 38,
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "dashboard",
          "name": "Dashboard",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "Project",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "ProjectPin",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "WorkflowPlan",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "WorkflowTask",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "WorkflowExecution",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "QualityGate",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "ProjectSettings",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": false,
        "error": "attempted relative import with no known parent package"
      },
      "errors": []
    },
    "./comprehensive_validation.py": {
      "path": "./comprehensive_validation.py",
      "exists": true,
      "size_bytes": 12617,
      "lines": 328,
      "functions": [
        {
          "name": "main",
          "line_number": 288,
          "is_async": false,
          "parameters": [],
          "decorators": [],
          "docstring": "Main validation function.",
          "returns_annotation": null
        },
        {
          "name": "__init__",
          "line_number": 19,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": null,
          "returns_annotation": null
        },
        {
          "name": "analyze_file",
          "line_number": 31,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "file_path",
              "annotation": "str"
            }
          ],
          "decorators": [],
          "docstring": "Analyze a single Python file.",
          "returns_annotation": "Dict[str, Any]"
        },
        {
          "name": "_analyze_function",
          "line_number": 111,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "node",
              "annotation": "ast.FunctionDef"
            }
          ],
          "decorators": [],
          "docstring": "Analyze a function definition.",
          "returns_annotation": "Dict[str, Any]"
        },
        {
          "name": "_analyze_class",
          "line_number": 143,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "node",
              "annotation": "ast.ClassDef"
            }
          ],
          "decorators": [],
          "docstring": "Analyze a class definition.",
          "returns_annotation": "Dict[str, Any]"
        },
        {
          "name": "_test_import",
          "line_number": 172,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "file_path",
              "annotation": "str"
            },
            {
              "name": "file_info",
              "annotation": "Dict[str, Any]"
            }
          ],
          "decorators": [],
          "docstring": "Test if the file can be imported.",
          "returns_annotation": null
        },
        {
          "name": "__init__",
          "line_number": 198,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": null,
          "returns_annotation": null
        },
        {
          "name": "validate_all_files",
          "line_number": 202,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Validate all Python files in the dashboard system.",
          "returns_annotation": "Dict[str, Any]"
        },
        {
          "name": "generate_report",
          "line_number": 223,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "results",
              "annotation": "Dict[str, Any]"
            }
          ],
          "decorators": [],
          "docstring": "Generate a comprehensive validation report.",
          "returns_annotation": "str"
        }
      ],
      "classes": [
        {
          "name": "CodeAnalyzer",
          "line_number": 16,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 19,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "analyze_file",
              "line_number": 31,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "file_path",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Analyze a single Python file.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "_analyze_function",
              "line_number": 111,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "node",
                  "annotation": "ast.FunctionDef"
                }
              ],
              "decorators": [],
              "docstring": "Analyze a function definition.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "_analyze_class",
              "line_number": 143,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "node",
                  "annotation": "ast.ClassDef"
                }
              ],
              "decorators": [],
              "docstring": "Analyze a class definition.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "_test_import",
              "line_number": 172,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "file_path",
                  "annotation": "str"
                },
                {
                  "name": "file_info",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Test if the file can be imported.",
              "returns_annotation": null,
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Analyzes Python code files for functions, classes, and parameters."
        },
        {
          "name": "DashboardValidator",
          "line_number": 195,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 198,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "validate_all_files",
              "line_number": 202,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Validate all Python files in the dashboard system.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "generate_report",
              "line_number": 223,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "results",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Generate a comprehensive validation report.",
              "returns_annotation": "str",
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Main validator for the dashboard system."
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "ast",
          "alias": null
        },
        {
          "type": "import",
          "name": "os",
          "alias": null
        },
        {
          "type": "import",
          "name": "sys",
          "alias": null
        },
        {
          "type": "import",
          "name": "importlib.util",
          "alias": null
        },
        {
          "type": "import",
          "name": "traceback",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "type": "import",
          "name": "json",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": true,
        "error": null
      },
      "errors": []
    },
    "./services/strands_orchestrator.py": {
      "path": "./services/strands_orchestrator.py",
      "exists": true,
      "size_bytes": 22084,
      "lines": 556,
      "functions": [
        {
          "name": "__init__",
          "line_number": 44,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Initialize the Strands Orchestrator.",
          "returns_annotation": null
        },
        {
          "name": "_init_layer_managers",
          "line_number": 52,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Initialize all layer managers with fallbacks.",
          "returns_annotation": null
        }
      ],
      "classes": [
        {
          "name": "StrandsOrchestrator",
          "line_number": 35,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 44,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize the Strands Orchestrator.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_init_layer_managers",
              "line_number": 52,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize all layer managers with fallbacks.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "start_workflow",
              "line_number": 96,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                },
                {
                  "name": "requirements",
                  "annotation": "str"
                },
                {
                  "name": "flow_name",
                  "annotation": "Optional[str]"
                },
                {
                  "name": "auto_execute",
                  "annotation": "bool"
                }
              ],
              "decorators": [],
              "docstring": "Start a multi-layer workflow orchestration.",
              "returns_annotation": "Flow",
              "is_method": true
            },
            {
              "name": "_init_strands_workflow",
              "line_number": 151,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow",
                  "annotation": "Flow"
                }
              ],
              "decorators": [],
              "docstring": "Initialize Strands Workflow layer.",
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "_create_prefect_flow",
              "line_number": 166,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow",
                  "annotation": "Flow"
                }
              ],
              "decorators": [],
              "docstring": "Create Prefect flow for high-level orchestration.",
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "_setup_controlflow",
              "line_number": 184,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow",
                  "annotation": "Flow"
                }
              ],
              "decorators": [],
              "docstring": "Setup ControlFlow for task management.",
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "_generate_workflow_plan",
              "line_number": 202,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow",
                  "annotation": "Flow"
                }
              ],
              "decorators": [],
              "docstring": "Generate workflow plan and tasks.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_execute_workflow",
              "line_number": 235,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow",
                  "annotation": "Flow"
                }
              ],
              "decorators": [],
              "docstring": "Execute the workflow across all layers.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "get_workflow",
              "line_number": 275,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get workflow by ID.",
              "returns_annotation": "Optional[Flow]",
              "is_method": true
            },
            {
              "name": "pause_workflow",
              "line_number": 279,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Pause a running workflow.",
              "returns_annotation": "Optional[Flow]",
              "is_method": true
            },
            {
              "name": "resume_workflow",
              "line_number": 303,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Resume a paused workflow.",
              "returns_annotation": "Optional[Flow]",
              "is_method": true
            },
            {
              "name": "stop_workflow",
              "line_number": 327,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Stop a running workflow.",
              "returns_annotation": "Optional[Flow]",
              "is_method": true
            },
            {
              "name": "monitor_workflow_execution",
              "line_number": 357,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Monitor workflow execution and update status.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_update_workflow_status",
              "line_number": 372,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow",
                  "annotation": "Flow"
                }
              ],
              "decorators": [],
              "docstring": "Update workflow status based on layer statuses.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "check_workflow_status",
              "line_number": 408,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Check Strands Workflow status.",
              "returns_annotation": "ServiceStatus",
              "is_method": true
            },
            {
              "name": "check_mcp_status",
              "line_number": 419,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Check MCP status.",
              "returns_annotation": "ServiceStatus",
              "is_method": true
            },
            {
              "name": "check_controlflow_status",
              "line_number": 430,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Check ControlFlow status.",
              "returns_annotation": "ServiceStatus",
              "is_method": true
            },
            {
              "name": "check_prefect_status",
              "line_number": 441,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Check Prefect status.",
              "returns_annotation": "ServiceStatus",
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Multi-layer orchestrator that coordinates:\n- Top Layer: Prefect flows for high-level workflow management\n- Middle Layer: ControlFlow system for task orchestration  \n- Bottom Layer: MCP-based agentic flows for granular execution\n- Integration Layer: Strands Workflow for unified management"
        },
        {
          "name": "MockStrandsWorkflowManager",
          "line_number": 454,
          "base_classes": [],
          "methods": [
            {
              "name": "create_workflow",
              "line_number": 457,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "name",
                  "annotation": "str"
                },
                {
                  "name": "description",
                  "annotation": "str"
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "generate_plan",
              "line_number": 462,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "workflow_id",
                  "annotation": "str"
                },
                {
                  "name": "requirements",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "check_health",
              "line_number": 487,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": "bool",
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Mock Strands Workflow Manager for development."
        },
        {
          "name": "MockMCPManager",
          "line_number": 491,
          "base_classes": [],
          "methods": [
            {
              "name": "execute_task",
              "line_number": 494,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task_description",
                  "annotation": "str"
                },
                {
                  "name": "context",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "check_health",
              "line_number": 499,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": "bool",
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Mock MCP Manager for development."
        },
        {
          "name": "MockControlFlowManager",
          "line_number": 503,
          "base_classes": [],
          "methods": [
            {
              "name": "create_flow",
              "line_number": 506,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "name",
                  "annotation": "str"
                },
                {
                  "name": "description",
                  "annotation": "str"
                },
                {
                  "name": "project_context",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "create_task",
              "line_number": 511,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow_id",
                  "annotation": "str"
                },
                {
                  "name": "name",
                  "annotation": "str"
                },
                {
                  "name": "description",
                  "annotation": "str"
                },
                {
                  "name": "task_type",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "pause_flow",
              "line_number": 516,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "resume_flow",
              "line_number": 519,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "cancel_flow",
              "line_number": 522,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "get_task_status",
              "line_number": 525,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "check_health",
              "line_number": 528,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": "bool",
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Mock ControlFlow Manager for development."
        },
        {
          "name": "MockPrefectManager",
          "line_number": 532,
          "base_classes": [],
          "methods": [
            {
              "name": "create_flow_run",
              "line_number": 535,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow_name",
                  "annotation": "str"
                },
                {
                  "name": "parameters",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "start_flow_run",
              "line_number": 540,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow_run_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "pause_flow_run",
              "line_number": 543,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow_run_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "resume_flow_run",
              "line_number": 546,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow_run_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "cancel_flow_run",
              "line_number": 549,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow_run_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "get_flow_run_status",
              "line_number": 552,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow_run_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "check_health",
              "line_number": 555,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": "bool",
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Mock Prefect Manager for development."
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "asyncio",
          "alias": null
        },
        {
          "type": "import",
          "name": "logging",
          "alias": null
        },
        {
          "type": "import",
          "name": "uuid",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "Flow",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "Task",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "FlowStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "TaskStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "ServiceStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "workflows.controlflow_integration",
          "name": "ControlFlowManager",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "workflows.prefect_integration",
          "name": "PrefectManager",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "workflows.mcp_integration",
          "name": "MCPManager",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "strands_tools.workflow",
          "name": "WorkflowManager",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "strands.tools.mcp.mcp_client",
          "name": "MCPClient",
          "alias": null
        },
        {
          "type": "import",
          "name": "controlflow",
          "alias": null
        },
        {
          "type": "import",
          "name": "prefect",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": false,
        "error": "attempted relative import beyond top-level package"
      },
      "errors": []
    },
    "./services/monitoring_service.py": {
      "path": "./services/monitoring_service.py",
      "exists": true,
      "size_bytes": 20999,
      "lines": 534,
      "functions": [
        {
          "name": "__init__",
          "line_number": 24,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Initialize the Monitoring service.",
          "returns_annotation": null
        },
        {
          "name": "_calculate_overall_status",
          "line_number": 367,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "system_metrics",
              "annotation": "Dict[str, Any]"
            },
            {
              "name": "services",
              "annotation": "ServiceStatusResponse"
            }
          ],
          "decorators": [],
          "docstring": "Calculate overall system status.",
          "returns_annotation": "str"
        },
        {
          "name": "_is_cache_valid",
          "line_number": 465,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "cache_key",
              "annotation": "str"
            },
            {
              "name": "now",
              "annotation": "datetime"
            }
          ],
          "decorators": [],
          "docstring": "Check if cache entry is still valid.",
          "returns_annotation": "bool"
        },
        {
          "name": "_store_health_history",
          "line_number": 475,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "health_data",
              "annotation": "Dict[str, Any]"
            }
          ],
          "decorators": [],
          "docstring": "Store health data in history.",
          "returns_annotation": null
        },
        {
          "name": "_start_background_monitoring",
          "line_number": 483,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Start background monitoring tasks.",
          "returns_annotation": null
        },
        {
          "name": "stop_monitoring",
          "line_number": 530,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Stop background monitoring.",
          "returns_annotation": null
        }
      ],
      "classes": [
        {
          "name": "MonitoringService",
          "line_number": 18,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 24,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize the Monitoring service.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "get_system_health",
              "line_number": 44,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Get comprehensive system health status.",
              "returns_annotation": "SystemHealthResponse",
              "is_method": true
            },
            {
              "name": "_get_system_metrics",
              "line_number": 95,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Get system resource metrics.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "_get_all_service_statuses",
              "line_number": 171,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Get status of all services with caching.",
              "returns_annotation": "ServiceStatusResponse",
              "is_method": true
            },
            {
              "name": "_check_service_health",
              "line_number": 212,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "service_name",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Check health of a specific service.",
              "returns_annotation": "ServiceStatus",
              "is_method": true
            },
            {
              "name": "_check_github_health",
              "line_number": 243,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Check GitHub service health.",
              "returns_annotation": "ServiceStatus",
              "is_method": true
            },
            {
              "name": "_check_linear_health",
              "line_number": 256,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Check Linear service health.",
              "returns_annotation": "ServiceStatus",
              "is_method": true
            },
            {
              "name": "_check_slack_health",
              "line_number": 267,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Check Slack service health.",
              "returns_annotation": "ServiceStatus",
              "is_method": true
            },
            {
              "name": "_check_codegen_health",
              "line_number": 278,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Check Codegen SDK health.",
              "returns_annotation": "ServiceStatus",
              "is_method": true
            },
            {
              "name": "_check_database_health",
              "line_number": 289,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Check database health.",
              "returns_annotation": "ServiceStatus",
              "is_method": true
            },
            {
              "name": "_check_orchestration_health",
              "line_number": 298,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "service_name",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Check orchestration service health.",
              "returns_annotation": "ServiceStatus",
              "is_method": true
            },
            {
              "name": "_get_workflow_statistics",
              "line_number": 334,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Get workflow and task statistics.",
              "returns_annotation": "Dict[str, int]",
              "is_method": true
            },
            {
              "name": "_get_recent_error_count",
              "line_number": 358,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Get count of recent errors.",
              "returns_annotation": "int",
              "is_method": true
            },
            {
              "name": "_calculate_overall_status",
              "line_number": 367,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "system_metrics",
                  "annotation": "Dict[str, Any]"
                },
                {
                  "name": "services",
                  "annotation": "ServiceStatusResponse"
                }
              ],
              "decorators": [],
              "docstring": "Calculate overall system status.",
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "_check_system_alerts",
              "line_number": 400,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "metrics",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Check system metrics against alert thresholds.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_create_alert",
              "line_number": 438,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "alert_type",
                  "annotation": "str"
                },
                {
                  "name": "message",
                  "annotation": "str"
                },
                {
                  "name": "level",
                  "annotation": "str"
                },
                {
                  "name": "data",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Create a new alert.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_is_cache_valid",
              "line_number": 465,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "cache_key",
                  "annotation": "str"
                },
                {
                  "name": "now",
                  "annotation": "datetime"
                }
              ],
              "decorators": [],
              "docstring": "Check if cache entry is still valid.",
              "returns_annotation": "bool",
              "is_method": true
            },
            {
              "name": "_store_health_history",
              "line_number": 475,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "health_data",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Store health data in history.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_start_background_monitoring",
              "line_number": 483,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Start background monitoring tasks.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_background_health_monitor",
              "line_number": 488,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Background task for continuous health monitoring.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "get_alerts",
              "line_number": 502,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "limit",
                  "annotation": "int"
                }
              ],
              "decorators": [],
              "docstring": "Get recent alerts.",
              "returns_annotation": "List[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "acknowledge_alert",
              "line_number": 506,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "alert_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Acknowledge an alert.",
              "returns_annotation": "bool",
              "is_method": true
            },
            {
              "name": "get_health_history",
              "line_number": 516,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "hours",
                  "annotation": "int"
                }
              ],
              "decorators": [],
              "docstring": "Get health history for the specified number of hours.",
              "returns_annotation": "List[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "update_alert_thresholds",
              "line_number": 525,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "thresholds",
                  "annotation": "Dict[str, float]"
                }
              ],
              "decorators": [],
              "docstring": "Update alert thresholds.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "stop_monitoring",
              "line_number": 530,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Stop background monitoring.",
              "returns_annotation": null,
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Service for system monitoring, health checks, and alerting.\nMonitors system resources, service health, and workflow status."
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "asyncio",
          "alias": null
        },
        {
          "type": "import",
          "name": "logging",
          "alias": null
        },
        {
          "type": "import",
          "name": "psutil",
          "alias": null
        },
        {
          "type": "import",
          "name": "time",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "SystemHealthResponse",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "ServiceStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "ServiceStatusResponse",
          "alias": null
        },
        {
          "type": "import",
          "name": "os",
          "alias": null
        },
        {
          "type": "import",
          "name": "os",
          "alias": null
        },
        {
          "type": "import",
          "name": "os",
          "alias": null
        },
        {
          "type": "import",
          "name": "os",
          "alias": null
        },
        {
          "type": "import",
          "name": "strands_tools",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "strands.tools.mcp.mcp_client",
          "name": "MCPClient",
          "alias": null
        },
        {
          "type": "import",
          "name": "controlflow",
          "alias": null
        },
        {
          "type": "import",
          "name": "prefect",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": false,
        "error": "attempted relative import beyond top-level package"
      },
      "errors": []
    },
    "./services/quality_service.py": {
      "path": "./services/quality_service.py",
      "exists": true,
      "size_bytes": 19920,
      "lines": 468,
      "functions": [
        {
          "name": "__init__",
          "line_number": 22,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Initialize the Quality service.",
          "returns_annotation": null
        },
        {
          "name": "_init_default_quality_gates",
          "line_number": 30,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Initialize default quality gates based on analysis data.",
          "returns_annotation": null
        },
        {
          "name": "_evaluate_condition",
          "line_number": 224,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "value",
              "annotation": "Union[float, int]"
            },
            {
              "name": "operator",
              "annotation": "str"
            },
            {
              "name": "threshold",
              "annotation": "Union[float, int]"
            }
          ],
          "decorators": [],
          "docstring": "Evaluate a condition based on operator.",
          "returns_annotation": "bool"
        },
        {
          "name": "_get_mock_metrics",
          "line_number": 277,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "project_id",
              "annotation": "str"
            }
          ],
          "decorators": [],
          "docstring": "Get mock metrics for development and testing.",
          "returns_annotation": "Dict[str, Any]"
        },
        {
          "name": "_generate_recommendations",
          "line_number": 341,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "gate_results",
              "annotation": "List[Dict[str, Any]]"
            }
          ],
          "decorators": [],
          "docstring": "Generate recommendations based on gate results.",
          "returns_annotation": "List[str]"
        }
      ],
      "classes": [
        {
          "name": "QualityService",
          "line_number": 16,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 22,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize the Quality service.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_init_default_quality_gates",
              "line_number": 30,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize default quality gates based on analysis data.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "get_quality_gates",
              "line_number": 99,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get quality gates for a project.",
              "returns_annotation": "List[QualityGate]",
              "is_method": true
            },
            {
              "name": "_create_default_gates_for_project",
              "line_number": 107,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Create default quality gates for a project.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "validate_all_gates",
              "line_number": 125,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Validate all quality gates for a project.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "_validate_single_gate",
              "line_number": 175,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "gate",
                  "annotation": "QualityGate"
                },
                {
                  "name": "metrics",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Validate a single quality gate.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "_evaluate_condition",
              "line_number": 224,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "value",
                  "annotation": "Union[float, int]"
                },
                {
                  "name": "operator",
                  "annotation": "str"
                },
                {
                  "name": "threshold",
                  "annotation": "Union[float, int]"
                }
              ],
              "decorators": [],
              "docstring": "Evaluate a condition based on operator.",
              "returns_annotation": "bool",
              "is_method": true
            },
            {
              "name": "_get_project_metrics",
              "line_number": 242,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get current metrics for a project.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "_analyze_project_with_graph_sitter",
              "line_number": 261,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Analyze project using graph-sitter tools.",
              "returns_annotation": "Optional[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "_get_mock_metrics",
              "line_number": 277,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get mock metrics for development and testing.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "_update_adaptive_thresholds",
              "line_number": 308,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                },
                {
                  "name": "metrics",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Update adaptive thresholds based on historical data.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_generate_recommendations",
              "line_number": 341,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "gate_results",
                  "annotation": "List[Dict[str, Any]]"
                }
              ],
              "decorators": [],
              "docstring": "Generate recommendations based on gate results.",
              "returns_annotation": "List[str]",
              "is_method": true
            },
            {
              "name": "validate_pr_quality",
              "line_number": 377,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                },
                {
                  "name": "pr_url",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Validate quality gates specifically for a pull request.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "_run_pr_specific_checks",
              "line_number": 403,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "pr_url",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Run PR-specific quality checks.",
              "returns_annotation": "List[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "get_validation_history",
              "line_number": 425,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get validation history for a project.",
              "returns_annotation": "List[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "create_custom_gate",
              "line_number": 429,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                },
                {
                  "name": "name",
                  "annotation": "str"
                },
                {
                  "name": "metric",
                  "annotation": "str"
                },
                {
                  "name": "threshold",
                  "annotation": "Union[float, int]"
                },
                {
                  "name": "operator",
                  "annotation": "str"
                },
                {
                  "name": "severity",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Create a custom quality gate for a project.",
              "returns_annotation": "QualityGate",
              "is_method": true
            },
            {
              "name": "delete_quality_gate",
              "line_number": 457,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                },
                {
                  "name": "gate_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Delete a quality gate.",
              "returns_annotation": "bool",
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Service for managing quality gates and validation processes.\nProvides comprehensive code quality assessment and validation."
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "logging",
          "alias": null
        },
        {
          "type": "import",
          "name": "uuid",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Union",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "QualityGate",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "QualityGateStatus",
          "alias": null
        },
        {
          "type": "import",
          "name": "random",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": false,
        "error": "attempted relative import beyond top-level package"
      },
      "errors": []
    },
    "./services/codegen_service.py": {
      "path": "./services/codegen_service.py",
      "exists": true,
      "size_bytes": 23306,
      "lines": 645,
      "functions": [
        {
          "name": "__init__",
          "line_number": 24,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Initialize the Codegen service.",
          "returns_annotation": null
        },
        {
          "name": "_create_plan_prompt",
          "line_number": 275,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "project_id",
              "annotation": "str"
            },
            {
              "name": "requirements",
              "annotation": "str"
            },
            {
              "name": "include_quality_gates",
              "annotation": "bool"
            }
          ],
          "decorators": [],
          "docstring": "Create a prompt for plan generation.",
          "returns_annotation": "str"
        },
        {
          "name": "_create_task_prompt",
          "line_number": 335,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "task",
              "annotation": "Task"
            }
          ],
          "decorators": [],
          "docstring": "Create a context-aware prompt for task execution.",
          "returns_annotation": "str"
        },
        {
          "name": "_create_pr_validation_prompt",
          "line_number": 364,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "pr_url",
              "annotation": "str"
            },
            {
              "name": "quality_criteria",
              "annotation": "List[str]"
            }
          ],
          "decorators": [],
          "docstring": "Create a prompt for PR validation.",
          "returns_annotation": "str"
        },
        {
          "name": "_create_followup_prompt",
          "line_number": 401,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "completed_task",
              "annotation": "Task"
            },
            {
              "name": "result",
              "annotation": "Dict[str, Any]"
            }
          ],
          "decorators": [],
          "docstring": "Create a prompt for follow-up task generation.",
          "returns_annotation": "str"
        },
        {
          "name": "_parse_plan_result",
          "line_number": 452,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "result",
              "annotation": "Any"
            }
          ],
          "decorators": [],
          "docstring": "Parse plan generation result into structured format.",
          "returns_annotation": "Dict[str, Any]"
        },
        {
          "name": "_parse_validation_result",
          "line_number": 481,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "result",
              "annotation": "Any"
            }
          ],
          "decorators": [],
          "docstring": "Parse PR validation result.",
          "returns_annotation": "Dict[str, Any]"
        },
        {
          "name": "_parse_followup_tasks",
          "line_number": 510,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "result",
              "annotation": "Any"
            }
          ],
          "decorators": [],
          "docstring": "Parse follow-up tasks result.",
          "returns_annotation": "List[Dict[str, Any]]"
        },
        {
          "name": "__init__",
          "line_number": 528,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "org_id",
              "annotation": "str"
            },
            {
              "name": "token",
              "annotation": "str"
            }
          ],
          "decorators": [],
          "docstring": null,
          "returns_annotation": null
        },
        {
          "name": "__init__",
          "line_number": 555,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "task_id",
              "annotation": "str"
            },
            {
              "name": "prompt",
              "annotation": "str"
            }
          ],
          "decorators": [],
          "docstring": null,
          "returns_annotation": null
        }
      ],
      "classes": [
        {
          "name": "CodegenService",
          "line_number": 18,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 24,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize the Codegen service.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "check_status",
              "line_number": 35,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Check if Codegen SDK is properly configured and accessible.",
              "returns_annotation": "ServiceStatus",
              "is_method": true
            },
            {
              "name": "_get_agent",
              "line_number": 52,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Get or create Codegen agent instance.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "generate_plan",
              "line_number": 71,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                },
                {
                  "name": "requirements",
                  "annotation": "str"
                },
                {
                  "name": "include_quality_gates",
                  "annotation": "bool"
                }
              ],
              "decorators": [],
              "docstring": "Generate a development plan using Codegen SDK.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "create_task",
              "line_number": 111,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task_type",
                  "annotation": "str"
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                },
                {
                  "name": "prompt",
                  "annotation": "str"
                },
                {
                  "name": "context",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Create a new Codegen task.",
              "returns_annotation": "Task",
              "is_method": true
            },
            {
              "name": "execute_task",
              "line_number": 135,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Execute a Codegen task.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "get_task",
              "line_number": 184,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get a task by ID.",
              "returns_annotation": "Optional[Task]",
              "is_method": true
            },
            {
              "name": "get_all_tasks",
              "line_number": 188,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Get all tasks.",
              "returns_annotation": "List[Task]",
              "is_method": true
            },
            {
              "name": "cancel_task",
              "line_number": 192,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Cancel a running task.",
              "returns_annotation": "bool",
              "is_method": true
            },
            {
              "name": "validate_pr",
              "line_number": 219,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "pr_url",
                  "annotation": "str"
                },
                {
                  "name": "quality_criteria",
                  "annotation": "List[str]"
                }
              ],
              "decorators": [],
              "docstring": "Validate a pull request using Codegen SDK.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "create_followup_tasks",
              "line_number": 249,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "completed_task",
                  "annotation": "Task"
                },
                {
                  "name": "result",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Create follow-up tasks based on completed task results.",
              "returns_annotation": "List[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "_create_plan_prompt",
              "line_number": 275,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                },
                {
                  "name": "requirements",
                  "annotation": "str"
                },
                {
                  "name": "include_quality_gates",
                  "annotation": "bool"
                }
              ],
              "decorators": [],
              "docstring": "Create a prompt for plan generation.",
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "_create_task_prompt",
              "line_number": 335,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task",
                  "annotation": "Task"
                }
              ],
              "decorators": [],
              "docstring": "Create a context-aware prompt for task execution.",
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "_create_pr_validation_prompt",
              "line_number": 364,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "pr_url",
                  "annotation": "str"
                },
                {
                  "name": "quality_criteria",
                  "annotation": "List[str]"
                }
              ],
              "decorators": [],
              "docstring": "Create a prompt for PR validation.",
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "_create_followup_prompt",
              "line_number": 401,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "completed_task",
                  "annotation": "Task"
                },
                {
                  "name": "result",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Create a prompt for follow-up task generation.",
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "_wait_for_task_completion",
              "line_number": 428,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task",
                  "annotation": null
                },
                {
                  "name": "timeout",
                  "annotation": "int"
                }
              ],
              "decorators": [],
              "docstring": "Wait for a Codegen task to complete with timeout.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_parse_plan_result",
              "line_number": 452,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "result",
                  "annotation": "Any"
                }
              ],
              "decorators": [],
              "docstring": "Parse plan generation result into structured format.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "_parse_validation_result",
              "line_number": 481,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "result",
                  "annotation": "Any"
                }
              ],
              "decorators": [],
              "docstring": "Parse PR validation result.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "_parse_followup_tasks",
              "line_number": 510,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "result",
                  "annotation": "Any"
                }
              ],
              "decorators": [],
              "docstring": "Parse follow-up tasks result.",
              "returns_annotation": "List[Dict[str, Any]]",
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Service for integrating with Codegen SDK for plan generation and task execution.\nProvides comprehensive code generation capabilities with proper authentication."
        },
        {
          "name": "MockCodegenAgent",
          "line_number": 525,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 528,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "org_id",
                  "annotation": "str"
                },
                {
                  "name": "token",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "run",
              "line_number": 533,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "prompt",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Mock run method.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "cancel_task",
              "line_number": 547,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Mock cancel method.",
              "returns_annotation": null,
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Mock Codegen Agent for development and testing."
        },
        {
          "name": "MockCodegenTask",
          "line_number": 552,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 555,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task_id",
                  "annotation": "str"
                },
                {
                  "name": "prompt",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": null,
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_simulate_completion",
              "line_number": 565,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Simulate task completion.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "refresh",
              "line_number": 642,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Mock refresh method.",
              "returns_annotation": null,
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Mock Codegen Task for development."
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "os",
          "alias": null
        },
        {
          "type": "import",
          "name": "asyncio",
          "alias": null
        },
        {
          "type": "import",
          "name": "logging",
          "alias": null
        },
        {
          "type": "import",
          "name": "uuid",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "Task",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "TaskStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "ServiceStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "codegen",
          "name": "Agent",
          "alias": null
        },
        {
          "type": "import",
          "name": "json",
          "alias": null
        },
        {
          "type": "import",
          "name": "json",
          "alias": null
        },
        {
          "type": "import",
          "name": "json",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": false,
        "error": "attempted relative import beyond top-level package"
      },
      "errors": []
    },
    "./services/__init__.py": {
      "path": "./services/__init__.py",
      "exists": true,
      "size_bytes": 462,
      "lines": 19,
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "strands_orchestrator",
          "name": "StrandsOrchestrator",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "project_service",
          "name": "ProjectService",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "codegen_service",
          "name": "CodegenService",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "quality_service",
          "name": "QualityService",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "monitoring_service",
          "name": "MonitoringService",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": false,
        "error": "attempted relative import beyond top-level package"
      },
      "errors": []
    },
    "./services/project_service.py": {
      "path": "./services/project_service.py",
      "exists": true,
      "size_bytes": 16584,
      "lines": 400,
      "functions": [
        {
          "name": "__init__",
          "line_number": 26,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Initialize the Project service.",
          "returns_annotation": null
        },
        {
          "name": "_init_github_client",
          "line_number": 35,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Initialize GitHub client with fallback to mock.",
          "returns_annotation": null
        },
        {
          "name": "_parse_repo_url",
          "line_number": 245,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "repo_url",
              "annotation": "str"
            }
          ],
          "decorators": [],
          "docstring": "Parse GitHub repository URL to extract owner and repo name.",
          "returns_annotation": "Dict[str, str]"
        }
      ],
      "classes": [
        {
          "name": "ProjectService",
          "line_number": 20,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 26,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize the Project service.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_init_github_client",
              "line_number": 35,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize GitHub client with fallback to mock.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "get_all_projects",
              "line_number": 57,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Get all projects.",
              "returns_annotation": "List[Project]",
              "is_method": true
            },
            {
              "name": "get_pinned_projects",
              "line_number": 61,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Get pinned projects.",
              "returns_annotation": "List[Project]",
              "is_method": true
            },
            {
              "name": "get_project",
              "line_number": 65,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get a specific project.",
              "returns_annotation": "Optional[Project]",
              "is_method": true
            },
            {
              "name": "create_project",
              "line_number": 69,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "repo_url",
                  "annotation": "str"
                },
                {
                  "name": "requirements",
                  "annotation": "str"
                },
                {
                  "name": "auto_pin",
                  "annotation": "bool"
                }
              ],
              "decorators": [],
              "docstring": "Create a new project from a GitHub repository.",
              "returns_annotation": "Project",
              "is_method": true
            },
            {
              "name": "update_project",
              "line_number": 127,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                },
                {
                  "name": "requirements",
                  "annotation": "Optional[str]"
                },
                {
                  "name": "is_pinned",
                  "annotation": "Optional[bool]"
                },
                {
                  "name": "flow_status",
                  "annotation": "Optional[FlowStatus]"
                }
              ],
              "decorators": [],
              "docstring": "Update a project.",
              "returns_annotation": "Optional[Project]",
              "is_method": true
            },
            {
              "name": "delete_project",
              "line_number": 152,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Delete a project.",
              "returns_annotation": "bool",
              "is_method": true
            },
            {
              "name": "analyze_project",
              "line_number": 160,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "project_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Analyze a project using graph-sitter and other tools.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "get_github_repositories",
              "line_number": 183,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Get available GitHub repositories for the current user.",
              "returns_annotation": "List[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "get_user_settings",
              "line_number": 222,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Get user settings.",
              "returns_annotation": "UserSettings",
              "is_method": true
            },
            {
              "name": "update_user_settings",
              "line_number": 226,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "settings",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Update user settings.",
              "returns_annotation": "UserSettings",
              "is_method": true
            },
            {
              "name": "_parse_repo_url",
              "line_number": 245,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "repo_url",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Parse GitHub repository URL to extract owner and repo name.",
              "returns_annotation": "Dict[str, str]",
              "is_method": true
            },
            {
              "name": "_fetch_github_repo_details",
              "line_number": 277,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "owner",
                  "annotation": "str"
                },
                {
                  "name": "repo_name",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Fetch repository details from GitHub API.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Service for project management with enhanced GitHub integration.\nPreserves essential functionality while modernizing architecture."
        },
        {
          "name": "MockGitHubClient",
          "line_number": 322,
          "base_classes": [],
          "methods": [
            {
              "name": "get_repositories",
              "line_number": 325,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Mock method to get repositories.",
              "returns_annotation": "List[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "get_repo_details",
              "line_number": 381,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "owner",
                  "annotation": "str"
                },
                {
                  "name": "repo_name",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Mock method to get repository details.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Mock GitHub client for development and testing."
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "os",
          "alias": null
        },
        {
          "type": "import",
          "name": "logging",
          "alias": null
        },
        {
          "type": "import",
          "name": "uuid",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "urllib.parse",
          "name": "urlparse",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "Project",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "UserSettings",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "ProjectStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "consolidated_models",
          "name": "FlowStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "contexten.extensions.github.github",
          "name": "GitHubIntegration",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "github",
          "name": "Github",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": false,
        "error": "attempted relative import beyond top-level package"
      },
      "errors": []
    },
    "./workflows/__init__.py": {
      "path": "./workflows/__init__.py",
      "exists": true,
      "size_bytes": 788,
      "lines": 24,
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "orchestrator",
          "name": "WorkflowOrchestrator",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "prefect_integration",
          "name": "PrefectFlowManager",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "controlflow_integration",
          "name": "ControlFlowManager",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "mcp_integration",
          "name": "MCPAgentManager",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": false,
        "error": "attempted relative import beyond top-level package"
      },
      "errors": []
    },
    "./workflows/mcp_integration.py": {
      "path": "./workflows/mcp_integration.py",
      "exists": true,
      "size_bytes": 21055,
      "lines": 571,
      "functions": [
        {
          "name": "__init__",
          "line_number": 30,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Initialize MCP agent manager.",
          "returns_annotation": null
        },
        {
          "name": "_build_agent_prompt",
          "line_number": 298,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "task",
              "annotation": "WorkflowTask"
            }
          ],
          "decorators": [],
          "docstring": "Build a detailed prompt for the MCP agent.",
          "returns_annotation": "str"
        }
      ],
      "classes": [
        {
          "name": "MCPAgentManager",
          "line_number": 27,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 30,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize MCP agent manager.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "initialize",
              "line_number": 40,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize MCP agent manager.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_setup_default_tools",
              "line_number": 56,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Setup default MCP tools and capabilities.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "execute_task",
              "line_number": 99,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task",
                  "annotation": "WorkflowTask"
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Execute a task using MCP agents.\n\nArgs:\n    task: Task to execute\n    execution_id: Parent execution ID\n    \nReturns:\n    True if task execution started successfully",
              "returns_annotation": "bool",
              "is_method": true
            },
            {
              "name": "_get_or_create_mcp_client",
              "line_number": 144,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get or create MCP client for an execution.",
              "returns_annotation": "Any",
              "is_method": true
            },
            {
              "name": "_create_agent_config",
              "line_number": 158,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task",
                  "annotation": "WorkflowTask"
                }
              ],
              "decorators": [],
              "docstring": "Create agent configuration based on task requirements.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "_create_agent",
              "line_number": 202,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "mcp_client",
                  "annotation": "Any"
                },
                {
                  "name": "agent_config",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Create an MCP agent with the specified configuration.",
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "_execute_task_with_agent",
              "line_number": 222,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task",
                  "annotation": "WorkflowTask"
                },
                {
                  "name": "agent_id",
                  "annotation": "str"
                },
                {
                  "name": "mcp_client",
                  "annotation": "Any"
                }
              ],
              "decorators": [],
              "docstring": "Execute a task using the specified MCP agent.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_run_agent_task",
              "line_number": 270,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "agent_id",
                  "annotation": "str"
                },
                {
                  "name": "task",
                  "annotation": "WorkflowTask"
                },
                {
                  "name": "mcp_client",
                  "annotation": "Any"
                }
              ],
              "decorators": [],
              "docstring": "Run a task with an MCP agent.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "_build_agent_prompt",
              "line_number": 298,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task",
                  "annotation": "WorkflowTask"
                }
              ],
              "decorators": [],
              "docstring": "Build a detailed prompt for the MCP agent.",
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "get_task_progress",
              "line_number": 344,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get the progress of an MCP task execution.\n\nArgs:\n    task_id: Task ID\n    \nReturns:\n    Progress information or None if not found",
              "returns_annotation": "Optional[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "cancel_execution",
              "line_number": 369,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Cancel all MCP agents in an execution.\n\nArgs:\n    execution_id: Execution ID\n    \nReturns:\n    True if cancellation was successful",
              "returns_annotation": "bool",
              "is_method": true
            },
            {
              "name": "pause_execution",
              "line_number": 413,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Pause MCP agents in an execution.\n\nArgs:\n    execution_id: Execution ID\n    \nReturns:\n    True if pause was successful",
              "returns_annotation": "bool",
              "is_method": true
            },
            {
              "name": "resume_execution",
              "line_number": 435,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Resume paused MCP agents in an execution.\n\nArgs:\n    execution_id: Execution ID\n    \nReturns:\n    True if resume was successful",
              "returns_annotation": "bool",
              "is_method": true
            },
            {
              "name": "get_execution_logs",
              "line_number": 457,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get execution logs from MCP agents.\n\nArgs:\n    execution_id: Execution ID\n    \nReturns:\n    List of log entries",
              "returns_annotation": "List[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "get_metrics",
              "line_number": 499,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get MCP metrics for an execution.\n\nArgs:\n    execution_id: Execution ID\n    \nReturns:\n    Metrics dictionary",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "get_stats",
              "line_number": 539,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Get MCP manager statistics.\n\nReturns:\n    Statistics dictionary",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "cleanup",
              "line_number": 554,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Cleanup MCP manager resources.",
              "returns_annotation": null,
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "MCP agent manager for bottom-layer agentic flows."
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "logging",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "type": "import",
          "name": "json",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "WorkflowTask",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "TaskStatus",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "contexten.mcp.mcp_client",
          "name": "MCPClient",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": false,
        "error": "attempted relative import beyond top-level package"
      },
      "errors": []
    },
    "./workflows/controlflow_integration.py": {
      "path": "./workflows/controlflow_integration.py",
      "exists": true,
      "size_bytes": 16395,
      "lines": 451,
      "functions": [
        {
          "name": "__init__",
          "line_number": 32,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Initialize ControlFlow manager.",
          "returns_annotation": null
        },
        {
          "name": "_select_agent_for_task",
          "line_number": 153,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "task",
              "annotation": "WorkflowTask"
            }
          ],
          "decorators": [],
          "docstring": "Select appropriate agent based on task type.",
          "returns_annotation": "Any"
        },
        {
          "name": "_build_task_instructions",
          "line_number": 171,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "task",
              "annotation": "WorkflowTask"
            }
          ],
          "decorators": [],
          "docstring": "Build detailed instructions for a ControlFlow task.",
          "returns_annotation": "str"
        },
        {
          "name": "_build_task_context",
          "line_number": 204,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "task",
              "annotation": "WorkflowTask"
            }
          ],
          "decorators": [],
          "docstring": "Build context information for a ControlFlow task.",
          "returns_annotation": "Dict[str, Any]"
        }
      ],
      "classes": [
        {
          "name": "ControlFlowManager",
          "line_number": 29,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 32,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize ControlFlow manager.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "initialize",
              "line_number": 42,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize ControlFlow manager.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_setup_default_agents",
              "line_number": 58,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Setup default ControlFlow agents.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "execute_task",
              "line_number": 94,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task",
                  "annotation": "WorkflowTask"
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Execute a task using ControlFlow.\n\nArgs:\n    task: Task to execute\n    execution_id: Parent execution ID\n    \nReturns:\n    True if task execution started successfully",
              "returns_annotation": "bool",
              "is_method": true
            },
            {
              "name": "_get_or_create_flow",
              "line_number": 141,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get or create a ControlFlow flow for an execution.",
              "returns_annotation": "Any",
              "is_method": true
            },
            {
              "name": "_select_agent_for_task",
              "line_number": 153,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task",
                  "annotation": "WorkflowTask"
                }
              ],
              "decorators": [],
              "docstring": "Select appropriate agent based on task type.",
              "returns_annotation": "Any",
              "is_method": true
            },
            {
              "name": "_build_task_instructions",
              "line_number": 171,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task",
                  "annotation": "WorkflowTask"
                }
              ],
              "decorators": [],
              "docstring": "Build detailed instructions for a ControlFlow task.",
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "_build_task_context",
              "line_number": 204,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task",
                  "annotation": "WorkflowTask"
                }
              ],
              "decorators": [],
              "docstring": "Build context information for a ControlFlow task.",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "_execute_task_async",
              "line_number": 226,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task",
                  "annotation": "WorkflowTask"
                },
                {
                  "name": "cf_task",
                  "annotation": "Any"
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Execute a ControlFlow task asynchronously.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "get_task_status",
              "line_number": 254,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get the status of a ControlFlow task.\n\nArgs:\n    task_id: Task ID\n    \nReturns:\n    Task status dictionary or None if not found",
              "returns_annotation": "Optional[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "cancel_execution",
              "line_number": 289,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Cancel all tasks in an execution.\n\nArgs:\n    execution_id: Execution ID\n    \nReturns:\n    True if cancellation was successful",
              "returns_annotation": "bool",
              "is_method": true
            },
            {
              "name": "pause_execution",
              "line_number": 320,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Pause an execution.\n\nArgs:\n    execution_id: Execution ID\n    \nReturns:\n    True if pause was successful",
              "returns_annotation": "bool",
              "is_method": true
            },
            {
              "name": "resume_execution",
              "line_number": 339,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Resume a paused execution.\n\nArgs:\n    execution_id: Execution ID\n    \nReturns:\n    True if resume was successful",
              "returns_annotation": "bool",
              "is_method": true
            },
            {
              "name": "get_execution_logs",
              "line_number": 358,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get execution logs from ControlFlow.\n\nArgs:\n    execution_id: Execution ID\n    \nReturns:\n    List of log entries",
              "returns_annotation": "List[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "get_metrics",
              "line_number": 388,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get ControlFlow metrics for an execution.\n\nArgs:\n    execution_id: Execution ID\n    \nReturns:\n    Metrics dictionary",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "get_stats",
              "line_number": 419,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Get ControlFlow manager statistics.\n\nReturns:\n    Statistics dictionary",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "cleanup",
              "line_number": 434,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Cleanup ControlFlow manager resources.",
              "returns_annotation": null,
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "ControlFlow manager for middle-layer task orchestration."
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "logging",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "WorkflowTask",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "TaskStatus",
          "alias": null
        },
        {
          "type": "import",
          "name": "controlflow",
          "alias": "cf"
        },
        {
          "type": "from_import",
          "module": "controlflow",
          "name": "Flow",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "controlflow",
          "name": "Task",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "controlflow",
          "name": "Agent",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": false,
        "error": "attempted relative import beyond top-level package"
      },
      "errors": []
    },
    "./workflows/orchestrator.py": {
      "path": "./workflows/orchestrator.py",
      "exists": true,
      "size_bytes": 17898,
      "lines": 475,
      "functions": [
        {
          "name": "__init__",
          "line_number": 39,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Initialize the workflow orchestrator.",
          "returns_annotation": null
        },
        {
          "name": "_calculate_execution_time",
          "line_number": 328,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "execution_id",
              "annotation": "str"
            }
          ],
          "decorators": [],
          "docstring": "Calculate execution time in seconds.",
          "returns_annotation": "float"
        }
      ],
      "classes": [
        {
          "name": "OrchestrationLayer",
          "line_number": 22,
          "base_classes": [
            "str",
            "Enum"
          ],
          "methods": [],
          "decorators": [],
          "docstring": "Workflow orchestration layers."
        },
        {
          "name": "WorkflowOrchestrator",
          "line_number": 29,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 39,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize the workflow orchestrator.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "initialize",
              "line_number": 50,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize all workflow managers.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "execute_workflow",
              "line_number": 63,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "plan",
                  "annotation": "WorkflowPlan"
                },
                {
                  "name": "execution_config",
                  "annotation": "Optional[Dict[str, Any]]"
                }
              ],
              "decorators": [],
              "docstring": "Execute a workflow plan through the multi-layered orchestration system.\n\nArgs:\n    plan: Workflow plan to execute\n    execution_config: Optional execution configuration\n    \nReturns:\n    Execution ID for tracking",
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "_register_execution_callbacks",
              "line_number": 119,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Register callbacks for execution progress tracking.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "execute_task_layer",
              "line_number": 130,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "task",
                  "annotation": "WorkflowTask"
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                },
                {
                  "name": "layer",
                  "annotation": "OrchestrationLayer"
                }
              ],
              "decorators": [],
              "docstring": "Execute a specific task through the appropriate orchestration layer.\n\nArgs:\n    task: Task to execute\n    execution_id: Parent execution ID\n    layer: Orchestration layer to use\n    \nReturns:\n    True if task execution started successfully",
              "returns_annotation": "bool",
              "is_method": true
            },
            {
              "name": "get_execution_status",
              "line_number": 161,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get the current status of a workflow execution.\n\nArgs:\n    execution_id: Execution ID\n    \nReturns:\n    Execution status or None if not found",
              "returns_annotation": "Optional[WorkflowExecution]",
              "is_method": true
            },
            {
              "name": "cancel_execution",
              "line_number": 172,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Cancel a running workflow execution.\n\nArgs:\n    execution_id: Execution ID to cancel\n    \nReturns:\n    True if cancellation was successful",
              "returns_annotation": "bool",
              "is_method": true
            },
            {
              "name": "pause_execution",
              "line_number": 207,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Pause a running workflow execution.\n\nArgs:\n    execution_id: Execution ID to pause\n    \nReturns:\n    True if pause was successful",
              "returns_annotation": "bool",
              "is_method": true
            },
            {
              "name": "resume_execution",
              "line_number": 232,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Resume a paused workflow execution.\n\nArgs:\n    execution_id: Execution ID to resume\n    \nReturns:\n    True if resume was successful",
              "returns_annotation": "bool",
              "is_method": true
            },
            {
              "name": "get_execution_logs",
              "line_number": 257,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get execution logs from all layers.\n\nArgs:\n    execution_id: Execution ID\n    \nReturns:\n    List of log entries",
              "returns_annotation": "List[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "get_execution_metrics",
              "line_number": 284,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get execution metrics from all layers.\n\nArgs:\n    execution_id: Execution ID\n    \nReturns:\n    Metrics dictionary",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "_calculate_execution_time",
              "line_number": 328,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Calculate execution time in seconds.",
              "returns_annotation": "float",
              "is_method": true
            },
            {
              "name": "_on_task_started",
              "line_number": 341,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                },
                {
                  "name": "task_id",
                  "annotation": "str"
                },
                {
                  "name": "layer",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Handle task started event.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_on_task_completed",
              "line_number": 359,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                },
                {
                  "name": "task_id",
                  "annotation": "str"
                },
                {
                  "name": "layer",
                  "annotation": "str"
                },
                {
                  "name": "result",
                  "annotation": "Any"
                }
              ],
              "decorators": [],
              "docstring": "Handle task completed event.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_on_task_failed",
              "line_number": 377,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                },
                {
                  "name": "task_id",
                  "annotation": "str"
                },
                {
                  "name": "layer",
                  "annotation": "str"
                },
                {
                  "name": "error",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Handle task failed event.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_on_workflow_progress",
              "line_number": 395,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                },
                {
                  "name": "progress",
                  "annotation": "float"
                }
              ],
              "decorators": [],
              "docstring": "Handle workflow progress update.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "cleanup_completed_executions",
              "line_number": 403,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "max_age_hours",
                  "annotation": "int"
                }
              ],
              "decorators": [],
              "docstring": "Clean up old completed executions.\n\nArgs:\n    max_age_hours: Maximum age in hours for completed executions",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "get_orchestrator_stats",
              "line_number": 430,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Get orchestrator statistics.\n\nReturns:\n    Statistics dictionary",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "cleanup",
              "line_number": 459,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Cleanup orchestrator resources.",
              "returns_annotation": null,
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Main orchestrator for multi-layered workflow execution.\n\nCoordinates between:\n- Prefect flows (top layer): High-level workflow management\n- ControlFlow (middle layer): Task orchestration and dependencies\n- MCP agents (bottom layer): Granular agentic task execution"
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "logging",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "enum",
          "name": "Enum",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "prefect_integration",
          "name": "PrefectFlowManager",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "controlflow_integration",
          "name": "ControlFlowManager",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "mcp_integration",
          "name": "MCPAgentManager",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "WorkflowPlan",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "WorkflowTask",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "WorkflowExecution",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "WorkflowStatus",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": false,
        "error": "attempted relative import beyond top-level package"
      },
      "errors": []
    },
    "./workflows/prefect_integration.py": {
      "path": "./workflows/prefect_integration.py",
      "exists": true,
      "size_bytes": 15474,
      "lines": 434,
      "functions": [
        {
          "name": "__init__",
          "line_number": 38,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [],
          "docstring": "Initialize Prefect flow manager.",
          "returns_annotation": null
        },
        {
          "name": "_count_completed_tasks",
          "line_number": 390,
          "is_async": false,
          "parameters": [
            {
              "name": "self",
              "annotation": null
            },
            {
              "name": "state",
              "annotation": "str"
            }
          ],
          "decorators": [],
          "docstring": "Count completed tasks based on flow state.",
          "returns_annotation": "int"
        }
      ],
      "classes": [
        {
          "name": "PrefectFlowManager",
          "line_number": 35,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_number": 38,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize Prefect flow manager.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "initialize",
              "line_number": 47,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Initialize Prefect client and flows.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "_register_workflow_flows",
              "line_number": 65,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Register Prefect flows for workflow orchestration.",
              "returns_annotation": null,
              "is_method": true
            },
            {
              "name": "start_workflow_flow",
              "line_number": 152,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "plan",
                  "annotation": "WorkflowPlan"
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                },
                {
                  "name": "config",
                  "annotation": "Dict[str, Any]"
                }
              ],
              "decorators": [],
              "docstring": "Start a Prefect workflow flow.\n\nArgs:\n    plan: Workflow plan to execute\n    execution_id: Execution ID for tracking\n    config: Execution configuration\n    \nReturns:\n    Prefect flow run ID",
              "returns_annotation": "str",
              "is_method": true
            },
            {
              "name": "get_flow_status",
              "line_number": 205,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow_run_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get the status of a Prefect flow run.\n\nArgs:\n    flow_run_id: Prefect flow run ID\n    \nReturns:\n    Flow status dictionary or None if not found",
              "returns_annotation": "Optional[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "cancel_flow",
              "line_number": 238,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "flow_run_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Cancel a Prefect flow run.\n\nArgs:\n    flow_run_id: Prefect flow run ID\n    \nReturns:\n    True if cancellation was successful",
              "returns_annotation": "bool",
              "is_method": true
            },
            {
              "name": "pause_flow",
              "line_number": 263,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Pause a workflow flow.\n\nArgs:\n    execution_id: Execution ID\n    \nReturns:\n    True if pause was successful",
              "returns_annotation": "bool",
              "is_method": true
            },
            {
              "name": "resume_flow",
              "line_number": 293,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Resume a paused workflow flow.\n\nArgs:\n    execution_id: Execution ID\n    \nReturns:\n    True if resume was successful",
              "returns_annotation": "bool",
              "is_method": true
            },
            {
              "name": "get_execution_logs",
              "line_number": 323,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get execution logs from Prefect.\n\nArgs:\n    execution_id: Execution ID\n    \nReturns:\n    List of log entries",
              "returns_annotation": "List[Dict[str, Any]]",
              "is_method": true
            },
            {
              "name": "get_metrics",
              "line_number": 356,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "execution_id",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Get Prefect metrics for an execution.\n\nArgs:\n    execution_id: Execution ID\n    \nReturns:\n    Metrics dictionary",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "_count_completed_tasks",
              "line_number": 390,
              "is_async": false,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                },
                {
                  "name": "state",
                  "annotation": "str"
                }
              ],
              "decorators": [],
              "docstring": "Count completed tasks based on flow state.",
              "returns_annotation": "int",
              "is_method": true
            },
            {
              "name": "get_stats",
              "line_number": 401,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Get Prefect manager statistics.\n\nReturns:\n    Statistics dictionary",
              "returns_annotation": "Dict[str, Any]",
              "is_method": true
            },
            {
              "name": "cleanup",
              "line_number": 415,
              "is_async": true,
              "parameters": [
                {
                  "name": "self",
                  "annotation": null
                }
              ],
              "decorators": [],
              "docstring": "Cleanup Prefect manager resources.",
              "returns_annotation": null,
              "is_method": true
            }
          ],
          "decorators": [],
          "docstring": "Prefect flow manager for top-layer workflow orchestration."
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "logging",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "WorkflowPlan",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "WorkflowTask",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "models",
          "name": "WorkflowStatus",
          "alias": null
        },
        {
          "type": "import",
          "name": "prefect",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "prefect",
          "name": "flow",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "prefect",
          "name": "task",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "prefect",
          "name": "get_run_logger",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "prefect.client.orchestration",
          "name": "PrefectClient",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "prefect.deployments",
          "name": "Deployment",
          "alias": null
        },
        {
          "type": "from_import",
          "module": "prefect.server.schemas.states",
          "name": "StateType",
          "alias": null
        }
      ],
      "syntax_valid": true,
      "import_test": {
        "success": false,
        "error": "attempted relative import beyond top-level package"
      },
      "errors": []
    }
  }
}